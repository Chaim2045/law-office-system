
All projects
השוואה ניתוח ומיפוי
"אני מצרף כאן את קובץ Google Apps Script המלא של המערכת. אנא בצע ניתוח מלא ויסודי בהתאם לנקודות הבאות: 1. מיפוי מבני: * צור מפה היררכית של כל הפונקציות בקובץ (כולל doGet, doPost, פונקציות עזר, פונקציות פנימיות, מחלקות אם יש). * מפה לפי קטגוריות: פונקציות לטיפול ב-actions (frontend calls), פונקציות עיבוד לוגיקה, פונקציות שירות (Utilities), פונקציות אבטחה/בדיקות. * רשום אילו actions קיימים (מה שמתקבל בפרמטרים action), והיכן בדיוק הם מטופלים. 2. הערכת איכות הקוד: * דרג את הקוד מבחינת קריאות (readability), תיעוד (comments), מודולריות ואחידות סגנון (ציון מ-1 עד 10 בכל תחום). * מצא בעיות סגנוניות או חוסר סדר (כמו פונקציות ארוכות מדי, שמות לא עקביים, כפילויות). 3. הערכת יציבות ותחזוקה: * דרג את רמת היציבות: איך הקוד מתמודד עם שגיאות? האם יש מספיק try/catch? * האם יש מנגנוני אבטחת קריאות (כמו נעילות או מניעת כפילויות בכתיבה)? * האם יש טיפול במקרי קצה (קריאות ריקות, נתונים חסרים, בעיות תקשורת)? 4. רשימת המלצות שדרוג: * אילו שיפורים קריטיים דרושים כדי להפוך את הקוד ליציב ובטוח יותר? * הצע שדרוגי מבנה: חלוקה לפונקציות קטנות יותר, יצירת קובץ config לקבועים, כתיבת פונקציות עזר במקום קוד שחוזר על עצמו. * הצע Best Practices לעבודה נכונה עם Google Apps Script (כמו שימוש נכון ב-LockService, טיפול ב-Properties, ניהול לוגים). המטרה: לקבל מיפוי ברור של הקוד, ציון איכות לכל היבט חשוב, זיהוי בעיות קריטיות ולסיום תוכנית עבודה קצרה לשדרוג וייצוב הסקריפט.




Modular Script Upgrade Project
Last message 39 seconds ago
Modular Script Upgrade Project
Last message 11 minutes ago
Google Apps Script Analysis
Last message 1 hour ago
Google Apps Script Modularization Strategy
Last message 1 hour ago
Google Apps Script Code Division
Last message 16 hours ago
Script Function Migration Analysis
Last message 17 hours ago
Code File Comparison Strategy
Last message 21 hours ago
Google Apps Script Project Structure
Last message 22 hours ago
Code File Merge Strategy
Last message 22 hours ago
Google Apps Script Code Review
Last message 22 hours ago
Project knowledge
7% of project capacity used
Retrieving

APP SKRIPT גרסה קודמת
5,375 lines

text



APP Skript מחולק מודולרי
6,521 lines

text



APP Skript מחולק מודולרי
210.05 KB •6,521 lines
•
Formatting may be inconsistent from source

/**
 * @fileoverview תצורה וקבועים למערכת ניהול משרד עורכי דין
 * מכיל את כל ההגדרות, צבעים, שמות גליונות ונתיבי תיקיות
 * @version 2.0.0
 * @since 2025-01-01
 */

// ===== קבועים כלליים =====

/**
 * הגדרות מרכזיות של המערכת
 */
const CONFIG = {
  // שמות גליונות מאסטר
  MASTER_CLIENTS: 'מאסטר_לקוחות',
  MASTER_EMPLOYEES: 'מאסטר_עובדים', 
  MASTER_UPDATES: 'מאסטר_עדכונים',
  MASTER_LOGINS: 'מאסטר_כניסות',
  
  // שמות טאבים בגליונות עובדים
  TAB_TIMESHEET: 'שעתון',
  TAB_TASKS: 'משימות',
  TAB_HISTORY: 'היסטוריה',
  TAB_CHANGES: 'עדכונים',
  
  // תיקיות ב-Drive
  CLIENTS_FOLDER: 'לקוחות_משרד',
  EMPLOYEES_FOLDER: 'עובדים_משרד',
  
  // הגדרות חישוב אוטומטי
  AUTO_CALC: {
    FIRST_DATA_ROW: 5,      // שורה ראשונה עם נתונים
    DATE_COL: 1,            // עמודת תאריך
    DESCRIPTION_COL: 2,     // עמודת תיאור
    LAWYER_COL: 3,          // עמודת עורך דין
    MINUTES_COL: 4,         // עמודת דקות
    CUMULATIVE_COL: 5,      // עמודת דקות מצטבר
    REMAINING_MIN_COL: 6,   // עמודת דקות נותרות
    REMAINING_HOURS_COL: 7, // עמודת שעות נותרות
    NOTES_COL: 8            // עמודת הערות
  },
  
  // הגדרות נעילה (Locking)
  LOCK_CONFIG: {
    MAX_WAIT_TIME: 30000,           // 30 שניות המתנה מקסימלית
    RETRY_DELAY: 1000,              // שנייה בין ניסיונות
    CLIENT_OPERATIONS: 'client_ops', // מפתח נעילה לפעולות לקוח
    BUDGET_OPERATIONS: 'budget_ops', // מפתח נעילה לתקצוב
    TIMESHEET_OPERATIONS: 'time_ops', // מפתח נעילה לשעתון
    MASTER_UPDATES: 'master_updates' // מפתח נעילה לעדכוני מאסטר
  }
};

/**
 * צבעים סטנדרטיים למערכת
 */
const COLORS = {
  PRIMARY: '#1e40af',     // כחול ראשי
  SUCCESS: '#10b981',     // ירוק הצלחה
  WARNING: '#f59e0b',     // כתום אזהרה
  ERROR: '#ef4444',       // אדום שגיאה
  LIGHT: '#f8fafc',       // רקע בהיר
  BONUS: '#fef3c7',       // צבע רקע לבונוסים
  CRITICAL: '#fee2e2'     // צבע רקע ללקוחות קריטיים
};

/**
 * הודעות מערכת סטנדרטיות
 */
const MESSAGES = {
  SUCCESS: {
    CLIENT_CREATED: '✅ לקוח נוצר בהצלחה',
    CLIENT_UPDATED: '✅ לקוח עודכן בהצלחה',
    TASK_CREATED: '✅ משימה נוצרה בהצלחה',
    TASK_UPDATED: '✅ משימה עודכנה בהצלחה',
    TASK_COMPLETED: '✅ משימה הושלמה בהצלחה',
    TIMESHEET_SAVED: '✅ רישום שעתון נשמר בהצלחה'
  },
  
  ERRORS: {
    CLIENT_EXISTS: '❌ לקוח כבר קיים במערכת',
    CLIENT_NOT_FOUND: '❌ לקוח לא נמצא',
    TASK_NOT_FOUND: '❌ משימה לא נמצאה',
    INVALID_DATA: '❌ נתונים לא תקינים',
    SYSTEM_ERROR: '❌ שגיאת מערכת',
    LOCK_TIMEOUT: '❌ לא הצלחתי לקבל נעילה',
    PERMISSION_DENIED: '❌ אין הרשאות מספיקות'
  },
  
  WARNINGS: {
    CLIENT_BLOCKED: '⚠️ לקוח חסום - אין שעות נותרות',
    LOW_HOURS: '⚠️ נותרו מעט שעות ללקוח',
    TASK_OVERDUE: '⚠️ משימה פגת תוקף',
    DATA_MIGRATION: '⚠️ נדרשת מיגרציה של נתונים'
  }
};

/**
 * הגדרות ברירת מחדל למשתמשים חדשים
 */
const DEFAULTS = {
  CLIENT: {
    TYPE: 'hours',
    TOTAL_HOURS: 30,
    DESCRIPTION: 'לקוח חדש'
  },
  
  TASK: {
    STATUS: 'פעיל',
    ESTIMATED_MINUTES: 60,
    PRIORITY: 'רגיל'
  },
  
  TIMESHEET: {
    DEFAULT_LAWYER: 'לא צוין',
    DEFAULT_MINUTES: 30
  }
};

/**
 * רשימת פעולות מורשות במערכת
 */
const ALLOWED_ACTIONS = [
  // פעולות לקוחות
  'createClient',
  'updateClient', 
  'deleteClient',
  'loadClients',
  'getClients',
  
  // פעולות משימות
  'addBudgetTask',
  'updateBudgetTask',
  'completeBudgetTask',
  'extendTaskDeadline',
  'getBudgetTasks',
  'getFilteredBudgetTasks',
  'getTaskHistory',
  
  // פעולות שעתון
  'addTimesheetEntry',
  'saveTimesheetAndUpdateClient',
  'getTimesheetEntries',
  'getFilteredTimesheetEntries',
  
  // פעולות מערכת
  'userLogin',
  'testConnection',
  'loadData',
  'updateRecentClient',
  'getRecentClients',
  
  // פעולות מיגרציה וייבוא
  'importFromExcel',
  'processExcelImport',
  
  // פעולות בדיקה
  'ping'
];

/**
 * הגדרות וולידציה
 */
const VALIDATION = {
  CLIENT_NAME: {
    MIN_LENGTH: 2,
    MAX_LENGTH: 100,
    PATTERN: /^[\u0590-\u05FF\s\w.-]+$/ // עברית, אנגלית, רווחים, נקודות ומקפים
  },
  
  FILE_NUMBER: {
    MIN_LENGTH: 4,
    MAX_LENGTH: 20,
    PATTERN: /^\d{4}\/\d{3,4}$/ // פורמט: YYYY/XXX או YYYY/XXXX
  },
  
  HOURS: {
    MIN: 1,
    MAX: 500
  },
  
  MINUTES: {
    MIN: 1,
    MAX: 600 // 10 שעות מקסימום ביום
  }
};

/**
 * הגדרות ביצועים ומטמון
 */
const PERFORMANCE = {
  MAX_BATCH_SIZE: 100,      // מספר מקסימלי של פריטים בבאצ'
  CACHE_DURATION: 300000,   // 5 דקות במילישניות
  MAX_RETRY_ATTEMPTS: 3,    // מספר ניסיונות חוזרים
  TIMEOUT_MS: 30000,        // 30 שניות timeout
  LOG_LEVEL: 'INFO'         // רמת לוגים: DEBUG, INFO, WARN, ERROR
};

/**
 * קבועי פורמט ותאריכים
 */
const FORMATS = {
  DATE: {
    DISPLAY: 'DD/MM/YYYY',
    INPUT: 'YYYY-MM-DD',
    EXCEL: 'DD.M.YY',
    HEBREW: 'he-IL'
  },
  
  TIME: {
    DISPLAY: 'HH:mm',
    FULL: 'HH:mm:ss',
    HEBREW: 'he-IL'
  },
  
  CURRENCY: {
    SYMBOL: '₪',
    LOCALE: 'he-IL'
  }
};

/**
 * הגדרות דוחות וסטטיסטיקות
 */
const REPORTS = {
  PERIODS: {
    TODAY: 'today',
    WEEK: 'week', 
    MONTH: 'month',
    QUARTER: 'quarter',
    YEAR: 'year',
    ALL: 'all'
  },
  
  CHART_COLORS: [
    '#1e40af', '#10b981', '#f59e0b', '#ef4444', 
    '#8b5cf6', '#06b6d4', '#84cc16', '#f97316'
  ]
};

// ===== יצוא הקבועים =====

/**
 * מטא-נתונים על המערכת
 */
const SYSTEM_INFO = {
  NAME: 'מערכת ניהול משרד עורכי דין',
  VERSION: '2.0.0',
  BUILD_DATE: '2025-01-01',
  AUTHOR: 'מערכת משופרת',
  FEATURES: [
    'ניהול לקוחות עם חישוב אוטומטי',
    'מעקב משימות ותקצוב',
    'שעתון דיגיטלי',
    'מיגרציה אוטומטית',
    'ייבוא מאקסל',
    'דוחות וסטטיסטיקות'
  ]
};

// הקבועים זמינים לכל הקבצים האחרים








/**
 * @fileoverview נקודות כניסה ראשיות למערכת ניהול משרד עורכי דין
 * מכיל את doPost, doGet, onOpen וניתוב פעולות המערכת
 * @version 2.0.0
 * @since 2025-01-01
 * @requires config.js
 */

// ===== נקודות כניסה ראשיות =====

/**
 * נקודת כניסה ראשית לבקשות POST
 * מטפלת בכל הפעולות העסקיות של המערכת
 * @param {Object} e - אובייקט הבקשה מ-Google Apps Script
 * @returns {ContentService.TextOutput} תגובה בפורמט JSON
 */
function doPost(e) {
  const startTime = new Date().getTime();
  
  try {
    // בדיקת תקינות הבקשה
    if (!e || !e.postData) {
      throw new Error('בקשה לא תקינה - חסרים נתונים');
    }
    
    let requestData;
    try {
      requestData = JSON.parse(e.postData.contents);
    } catch (parseError) {
      throw new Error('פורמט JSON לא תקין: ' + parseError.toString());
    }
    
    const { action, data, timestamp } = requestData;
    
    // בדיקת תקינות פרמטרים
    if (!action) {
      throw new Error('חסר פרמטר action');
    }
    
    // בדיקה שהפעולה מורשית
    if (!ALLOWED_ACTIONS.includes(action)) {
      throw new Error(`פעולה לא מורשית: ${action}`);
    }
    
    Logger.log(`📨 doPost - פעולה: ${action}, זמן: ${new Date(timestamp)}`);
    
    // בחירת נעילה לפי סוג הפעולה
    const lockKey = getLockKeyByAction(action);
    
    // ביצוע הפעולה עם נעילה
    const result = executeWithLock(lockKey, () => {
      return processActionSafely(action, data);
    });
    
    if (!result.success) {
      throw new Error(result.error);
    }
    
    const duration = new Date().getTime() - startTime;
    
    // החזרת תגובה מובנית
    return ContentService
      .createTextOutput(JSON.stringify({
        success: true,
        action: action,
        data: result.data,
        timestamp: new Date().toISOString(),
        duration: duration,
        lockInfo: {
          key: result.lockKey,
          duration: result.duration
        }
      }))
      .setMimeType(ContentService.MimeType.JSON);
      
  } catch (error) {
    const duration = new Date().getTime() - startTime;
    
    Logger.log(`💥 doPost ERROR: ${error.toString()}`);
    
    // רישום שגיאות למעקב
    logErrorToMaster(error.toString(), e);
    
    return ContentService
      .createTextOutput(JSON.stringify({
        success: false,
        error: error.toString(),
        timestamp: new Date().toISOString(),
        duration: duration,
        requestData: e ? e.postData?.contents?.substring(0, 200) : 'unknown'
      }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

/**
 * נקודת כניסה ראשית לבקשות GET
 * מטפלת בקריאות נתונים ובדיקות מערכת
 * @param {Object} e - אובייקט הבקשה מ-Google Apps Script
 * @returns {ContentService.TextOutput} תגובה בפורמט JSON
 */
function doGet(e) {
  try {
    const action = e.parameter.action;
    const employee = e.parameter.employee;
    
    Logger.log('📥 בקשת GET: ' + action + ' עבור ' + (employee || 'כללי'));
    
    // בדיקה אוטומטית אם צריך ליצור גליון לעובד
    if (employee && action !== 'testConnection') {
      ensureEmployeeExists(employee);
    }
    
    // ניתוב פעולות GET
    return routeGetAction(action, e.parameter);
    
  } catch (error) {
    Logger.log('❌ שגיאה ב-doGet: ' + error.toString());
    return ContentService.createTextOutput(JSON.stringify({
      success: false,
      error: error.toString()
    })).setMimeType(ContentService.MimeType.JSON);
  }
}

/**
 * יצירת תפריט המערכת בפתיחת הגליון
 * מגדיר את כל האופציות הזמינות למשתמש
 */
function onOpen() {
  const ui = SpreadsheetApp.getUi();
  
  ui.createMenu('🏢 מערכת ניהול משרד - משופרת')
    .addItem('🔄 אתחל מערכת משופרת', 'initializeEnhancedSystem')
    .addSeparator()
    .addItem('🔄 מיגרציה מהגרסה הישנה', 'runMigrationProcess')
    .addSeparator()
    .addSubMenu(ui.createMenu('👤 ניהול לקוחות')
      .addItem('➕ הוסף לקוח חדש', 'showAddClientDialog')
      .addItem('📊 רשימת כל הלקוחות', 'showAllClients')
      .addItem('⚠️ לקוחות קריטיים', 'showCriticalClients')
      .addSeparator()
      .addItem('📥 ייבוא לקוח מאקסל ישן', 'showImportFromExcelDialog')
      .addSeparator()
      .addItem('🧮 חישוב מחדש כל הלקוחות', 'recalculateAllClients')
      .addItem('📅 מיון תאריכים כל הלקוחות', 'sortAllClientsByDate')
      .addSeparator()
      .addItem('🔄 המר כל הגליונות לחישוב אוטומטי', 'convertAllExistingClientSheets')
      .addItem('🔄 המר גליון נוכחי לחישוב אוטומטי', 'convertCurrentClientSheet')
      .addSeparator()
      .addItem('🔗 בדוק קישורי לקוחות', 'checkClientLinks')
      .addItem('🔧 תקן קישורי לקוחות', 'fixClientLinks'))
    .addSeparator()
    .addSubMenu(ui.createMenu('📋 ניהול משימות')
      .addItem('📊 דוח משימות', 'showTasksReport')
      .addItem('🔧 תיקון נתונים', 'fixTasksData')
      .addItem('📈 ניתוח ביצועים', 'showPerformanceAnalysis'))
    .addSeparator()
    .addSubMenu(ui.createMenu('👥 ניהול עובדים')
      .addItem('👤 הוסף עובד חדש', 'showAddEmployeeDialog')
      .addItem('📈 דוח פעילות עובדים', 'showEmployeesReport'))
    .addSeparator()
    .addSubMenu(ui.createMenu('⚙️ חישוב אוטומטי')
      .addItem('🔧 התקן טריגרים לכל הלקוחות', 'installTriggersForAllClients')
      .addItem('🧮 חישוב מחדש גליון נוכחי', 'recalculateCurrentSheet')
      .addItem('📊 סטטיסטיקות גליון נוכחי', 'showCurrentSheetStats')
      .addItem('✅ בדוק תקינות תאריכים', 'validateCurrentSheetDates'))
    .addSeparator()
    .addItem('🔧 הגדרות מערכת', 'showSystemSettings')
    .addToUi();
}

// ===== ניתוב פעולות =====

/**
 * ניתוב פעולות GET לפונקציות המתאימות
 * @param {string} action - שם הפעולה
 * @param {Object} parameters - פרמטרי הבקשה
 * @returns {ContentService.TextOutput} תגובה מהפעולה המתאימה
 */
function routeGetAction(action, parameters) {
  const employee = parameters.employee;
  
  switch (action) {
    case 'getClients':
      return getClientsDataFixed();
      
    case 'getBudgetTasks':
      return getBudgetTasksFixed(employee);
      
    case 'getFilteredBudgetTasks':
      return getFilteredBudgetTasksFixed(employee, parameters.filter);
      
    case 'getTimesheetEntries':
      return getTimesheetEntriesData(employee);
      
    case 'getFilteredTimesheetEntries':
      return getFilteredTimesheetEntries(employee, parameters.filter);
      
    case 'testConnection':
      return testConnectionEnhanced();
      
    case 'getTaskHistory':
      return getTaskHistoryFixed(employee, parameters.taskId);

    case 'getRecentClients':
      return getRecentClients(employee);

    case 'updateRecentClient':
      return updateRecentClient(employee, parameters.clientName, parameters.clientType);
      
    default:
      return ContentService.createTextOutput(JSON.stringify({
        success: false,
        error: 'פעולה לא מוכרת: ' + action
      })).setMimeType(ContentService.MimeType.JSON);
  }
}

/**
 * עיבוד פעולות בצורה בטוחה עם טיפול בשגיאות
 * @param {string} action - שם הפעולה
 * @param {Object} data - נתוני הפעולה
 * @returns {Object} תוצאת הפעולה
 */
function processActionSafely(action, data) {
  try {
    switch (action) {
      // פעולות לקוחות
      case 'createClient':
        return createClientEnhanced(data);
        
      case 'updateClient':
        return updateClientEnhanced(data);
        
      // פעולות משימות
      case 'addBudgetTask':
        return addBudgetTaskEnhanced(data);
        
      case 'saveBudgetTaskToSheet':
        return saveBudgetTaskFixed(data);
        
      case 'addTimeToTask':
        return addTimeToTaskFixed(data);
        
      case 'updateBudgetTask':
        return updateBudgetTaskFixed(data);
        
      case 'completeBudgetTask':
        return completeBudgetTaskFixed(data);
        
      case 'extendTaskDeadline':
        return extendTaskDeadlineFixed(data);
        
      // פעולות שעתון
      case 'addTimesheetEntry':
        return saveTimesheetEntryEnhanced(data);
        
      case 'saveTimesheetAndUpdateClient':
        return saveTimesheetEntryEnhanced(data);
        
      // פעולות מערכת
      case 'userLogin':
        return handleUserLogin(data);
        
      case 'loadData':
        return loadAllDataSafely();
        
      case 'ping':
        return pingServer(data);
        
      // פעולות ייבוא
      case 'importFromExcel':
        return processExcelImportSafely(data);
        
      case 'processExcelImport':
        return processExcelImport(data);
        
      default:
        throw new Error(`פעולה לא מוכרת: ${action}`);
    }
  } catch (error) {
    Logger.log(`⚠️ שגיאה בעיבוד פעולה ${action}: ${error.toString()}`);
    throw error;
  }
}

/**
 * קביעת מפתח נעילה לפי סוג הפעולה
 * מונע התנגשויות בין פעולות מקבילות
 * @param {string} action - שם הפעולה
 * @returns {string} מפתח הנעילה המתאים
 */
function getLockKeyByAction(action) {
  const lockMap = {
    // פעולות לקוחות
    'createClient': CONFIG.LOCK_CONFIG.CLIENT_OPERATIONS,
    'updateClient': CONFIG.LOCK_CONFIG.CLIENT_OPERATIONS,
    'deleteClient': CONFIG.LOCK_CONFIG.CLIENT_OPERATIONS,
    
    // פעולות תקצוב
    'addBudgetTask': CONFIG.LOCK_CONFIG.BUDGET_OPERATIONS,
    'updateBudgetTask': CONFIG.LOCK_CONFIG.BUDGET_OPERATIONS,
    'saveBudgetTaskToSheet': CONFIG.LOCK_CONFIG.BUDGET_OPERATIONS,
    'addTimeToTask': CONFIG.LOCK_CONFIG.BUDGET_OPERATIONS,
    'completeBudgetTask': CONFIG.LOCK_CONFIG.BUDGET_OPERATIONS,
    'extendTaskDeadline': CONFIG.LOCK_CONFIG.BUDGET_OPERATIONS,
    
    // פעולות שעתון
    'addTimesheetEntry': CONFIG.LOCK_CONFIG.TIMESHEET_OPERATIONS,
    'saveTimesheetAndUpdateClient': CONFIG.LOCK_CONFIG.TIMESHEET_OPERATIONS,
    'updateTimesheet': CONFIG.LOCK_CONFIG.TIMESHEET_OPERATIONS,
    
    // פעולות מאסטר
    'updateMaster': CONFIG.LOCK_CONFIG.MASTER_UPDATES,
    'userLogin': CONFIG.LOCK_CONFIG.MASTER_UPDATES
  };
  
  return lockMap[action] || CONFIG.LOCK_CONFIG.CLIENT_OPERATIONS;
}

// ===== ניהול נעילות (Locking) =====

/**
 * פונקציה מרכזית לביצוע פעולות עם נעילה
 * מונעת התנגשויות בגישה למשאבים משותפים
 * @param {string} lockKey - מפתח הנעילה
 * @param {Function} operation - הפעולה לביצוע
 * @param {number} retries - מספר ניסיונות חוזרים
 * @returns {Object} תוצאת הפעולה עם מידע על הנעילה
 */
function executeWithLock(lockKey, operation, retries = 3) {
  const startTime = new Date().getTime();
  
  try {
    Logger.log(`🔒 מנסה לקבל נעילה: ${lockKey}`);
    
    const lock = LockService.getScriptLock();
    const acquired = lock.tryLock(CONFIG.LOCK_CONFIG.MAX_WAIT_TIME);
    
    if (!acquired) {
      throw new Error(`לא הצלחתי לקבל נעילה תוך ${CONFIG.LOCK_CONFIG.MAX_WAIT_TIME}ms`);
    }
    
    Logger.log(`✅ נעילה הושגה: ${lockKey}`);
    
    // ביצוע הפעולה
    const result = operation();
    
    // שחרור הנעילה
    lock.releaseLock();
    
    const duration = new Date().getTime() - startTime;
    Logger.log(`🏁 פעולה הושלמה: ${lockKey} (${duration}ms)`);
    
    return {
      success: true,
      data: result,
      duration: duration,
      lockKey: lockKey
    };
    
  } catch (error) {
    Logger.log(`❌ שגיאה בפעולה ${lockKey}: ${error.toString()}`);
    
    // ניסיון חוזר
    if (retries > 0) {
      Logger.log(`🔄 מנסה שוב... נותרו ${retries} ניסיונות`);
      Utilities.sleep(CONFIG.LOCK_CONFIG.RETRY_DELAY);
      return executeWithLock(lockKey, operation, retries - 1);
    }
    
    return {
      success: false,
      error: error.toString(),
      lockKey: lockKey,
      duration: new Date().getTime() - startTime
    };
  }
}

// ===== טיפול בשגיאות ולוגים =====

/**
 * רישום שגיאות למאסטר למעקב
 * יוצר גליון שגיאות אם לא קיים ומתעד את השגיאה
 * @param {string} errorMessage - הודעת השגיאה
 * @param {Object} requestData - נתוני הבקשה שגרמה לשגיאה
 */
function logErrorToMaster(errorMessage, requestData) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    let errorSheet;
    
    try {
      errorSheet = ss.getSheetByName('שגיאות_מערכת');
    } catch {
      errorSheet = ss.insertSheet('שגיאות_מערכת');
      errorSheet.getRange(1, 1, 1, 5).setValues([
        ['זמן', 'שגיאה', 'נתוני בקשה', 'משתמש', 'סטטוס']
      ]);
      errorSheet.getRange(1, 1, 1, 5).setFontWeight('bold');
    }
    
    const lastRow = errorSheet.getLastRow();
    errorSheet.getRange(lastRow + 1, 1, 1, 5).setValues([[
      new Date().toLocaleString('he-IL'),
      errorMessage,
      requestData ? JSON.stringify(requestData).substring(0, 100) : 'לא זמין',
      Session.getActiveUser().getEmail(),
      'טעון טיפול'
    ]]);
    
  } catch (logError) {
    Logger.log(`⚠️ לא הצלחתי לרשום שגיאה למאסטר: ${logError.toString()}`);
  }
}

/**
 * יצירת תגובה סטנדרטית למערכת
 * @param {boolean} success - האם הפעולה הצליחה
 * @param {string} message - הודעה למשתמש
 * @param {Object} data - נתונים נוספים (אופציונלי)
 * @returns {ContentService.TextOutput} תגובה בפורמט JSON
 */
function createResponse(success, message = '', data = {}) {
  return ContentService
    .createTextOutput(JSON.stringify({
      success: success,
      message: message,
      timestamp: new Date().toLocaleString('he-IL'),
      ...data
    }))
    .setMimeType(ContentService.MimeType.JSON);
}

// ===== בדיקת חיבור משופרת =====

/**
 * בדיקת חיבור למערכת המשופרת
 * מחזירה מידע מפורט על סטטוס המערכת ותכונותיה
 * @returns {ContentService.TextOutput} דוח מלא על מצב המערכת
 */
function testConnectionEnhanced() {
  Logger.log('🔌 בדיקת חיבור למערכת משופרת...');
  return createResponse(true, 'החיבור למערכת המשופרת תקין!', {
    timestamp: new Date().toLocaleString('he-IL'),
    version: SYSTEM_INFO.VERSION,
    features: SYSTEM_INFO.FEATURES,
    improvements: [
      'ביטול גליונות נפרדים למשימות',
      'מערכת Cache חכמה',
      'מבנה טאבים מתוקן',
      'API מהיר ויעיל',
      'בקרת חסימה אוטומטית',
      '🆕 חישוב זמן אמת לגליונות לקוחות',
      '🆕 עדכון אוטומטי במאסטר לקוחות',
      '🆕 סטטיסטיקות מפורטות לכל לקוח',
      '🆕 תיקון אוטומטי של קישורים שבורים',
      '🆕 המרה אוטומטית של גליונות קיימים'
    ]
  });
}








/**
 * @fileoverview ניהול לקוחות במערכת ניהול משרד עורכי דין
 * מכיל פונקציות ליצירה, עדכון, טעינה וחישוב אוטומטי של לקוחות
 * @version 2.0.0
 * @since 2025-01-01
 * @requires config.js, utils.js
 */

// ===== פונקציות ראשיות לניהול לקוחות =====

/**
 * יצירת לקוח חדש עם חישוב אוטומטי
 * @param {Object} data - נתוני הלקוח והעובד
 * @param {Object} data.client - פרטי הלקוח
 * @param {string} data.employee - שם העובד היוצר
 * @returns {Object} תוצאת היצירה עם פרטי הלקוח החדש
 */
function createClientEnhanced(data) {
  const lock = LockService.getScriptLock();
  
  try {
    lock.waitLock(10000);
    
    const client = data.client;
    const employee = data.employee;
    
    Logger.log('👤 יוצר לקוח עם חישוב אוטומטי: ' + client.fullName);
    
    // בדיקה כפולה שהלקוח לא קיים
    if (isClientExists(client.fileNumber)) {
      return createResponse(false, 'מספר תיק ' + client.fileNumber + ' כבר קיים במערכת');
    }
    
    if (isClientNameExists(client.fullName)) {
      return createResponse(false, 'לקוח בשם ' + client.fullName + ' כבר קיים במערכת');
    }
    
    // יצירת גליון נפרד ללקוח עם חישוב אוטומטי
    const clientSheetUrl = createClientSpreadsheetEnhanced(client);
    
    // שמירה במאסטר
    const masterSheet = setupMasterClients();
    const clientId = Date.now();
    
    const newRow = [
      clientId,
      client.clientName,
      client.fileNumber,
      client.fullName,
      client.description || '',
      client.type,
      client.totalHours || 0,
      client.hoursRemaining || client.totalHours || 0,
      client.stages ? JSON.stringify(client.stages) : '',
      new Date().toLocaleString('he-IL'),
      employee,
      clientSheetUrl
    ];
    
    masterSheet.appendRow(newRow);
    SpreadsheetApp.flush();
    
    // עדכון במאסטר עדכונים
    logUpdate(employee, 'יצירת לקוח', `נוצר לקוח חדש עם חישוב אוטומטי: ${client.fullName} (${client.fileNumber})`);
    
    Logger.log('✅ לקוח נוצר עם חישוב אוטומטי: ' + client.fullName);
    return createResponse(true, 'לקוח נוצר בהצלחה עם חישוב אוטומטי', { 
      clientId: clientId,
      clientSheetUrl: clientSheetUrl 
    });
    
  } catch (error) {
    Logger.log('❌ שגיאה ביצירת לקוח משופר: ' + error.toString());
    return createResponse(false, error.toString());
  } finally {
    lock.releaseLock();
  }
}

/**
 * עדכון לקוח קיים במערכת
 * @param {Object} data - נתוני העדכון
 * @returns {Object} תוצאת העדכון
 */
function updateClientEnhanced(data) {
  try {
    Logger.log('✏️ מעדכן לקוח: ' + data.clientId);
    
    const masterSheet = setupMasterClients();
    const dataRange = masterSheet.getDataRange().getValues();
    
    // חיפוש הלקוח
    for (let i = 3; i < dataRange.length; i++) {
      if (dataRange[i][0] === data.clientId) {
        // עדכון השורה
        if (data.updates.fullName) masterSheet.getRange(i + 1, 4).setValue(data.updates.fullName);
        if (data.updates.description) masterSheet.getRange(i + 1, 5).setValue(data.updates.description);
        if (data.updates.totalHours) masterSheet.getRange(i + 1, 7).setValue(data.updates.totalHours);
        
        SpreadsheetApp.flush();
        
        Logger.log('✅ לקוח עודכן בהצלחה');
        return createResponse(true, MESSAGES.SUCCESS.CLIENT_UPDATED);
      }
    }
    
    return createResponse(false, MESSAGES.ERRORS.CLIENT_NOT_FOUND);
    
  } catch (error) {
    Logger.log('❌ שגיאה בעדכון לקוח: ' + error.toString());
    return createResponse(false, error.toString());
  }
}

/**
 * טעינת נתוני לקוחות עם בדיקת חסימה
 * @returns {Object} רשימת לקוחות עם סטטוס חסימה
 */
function getClientsDataFixed() {
  try {
    const sheet = setupMasterClients();
    Logger.log('📊 גליון לקוחות - מספר שורות: ' + sheet.getLastRow());
    
    if (!sheet || sheet.getLastRow() < 4) {
      Logger.log('⚠️ אין לקוחות בגליון');
      return createResponse(true, 'אין לקוחות', { clients: [] });
    }
    
    const data = sheet.getDataRange().getValues();
    const clients = [];
    
    // הנתונים מתחילים משורה 4 (אינדקס 3)
    for (let i = 3; i < data.length; i++) {
      if (data[i][0]) {
        try {
          const hoursRemaining = calculateRemainingHours(data[i]);
          
          const client = {
            id: data[i][0],
            clientName: data[i][1] || '',
            fileNumber: data[i][2] || '',
            fullName: data[i][3] || '',
            description: data[i][4] || '',
            type: data[i][5] || 'hours',
            totalHours: Number(data[i][6]) || 0,
            hoursRemaining: Number(hoursRemaining) || 0,
            minutesRemaining: Number(hoursRemaining) * 60 || 0,
            stages: data[i][8] ? tryParseJSON(data[i][8]) : null,
            createdAt: data[i][9] || '',
            createdBy: data[i][10] || '',
            clientSheetUrl: data[i][11] || '',
            // שדה חדש - האם חסום
            isBlocked: data[i][5] === 'hours' && Number(hoursRemaining) <= 0
          };
          
          clients.push(client);
          Logger.log(`✅ נטען לקוח: ${client.fullName} (${client.fileNumber}) - חסום: ${client.isBlocked}`);
          
        } catch (error) {
          Logger.log(`⚠️ שגיאה בשורה ${i + 1}: ${error.toString()}`);
        }
      }
    }
    
    Logger.log(`👥 סה"כ נטענו ${clients.length} לקוחות`);
    return createResponse(true, 'לקוחות נטענו בהצלחה', { clients: clients });
    
  } catch (error) {
    Logger.log('❌ שגיאה בטעינת לקוחות: ' + error.toString());
    return createResponse(false, error.toString(), { clients: [] });
  }
}

// ===== יצירת גליונות לקוחות =====

/**
 * יצירת גליון מחשב אוטומטי עבור לקוח חדש
 * @param {Object} client - נתוני הלקוח
 * @returns {string} URL של הגליון שנוצר
 */
function createClientSpreadsheetEnhanced(client) {
  try {
    const spreadsheetName = `לקוח - ${client.fullName} - ${client.fileNumber}`;
    const newSpreadsheet = SpreadsheetApp.create(spreadsheetName);
    
    const folder = getOrCreateFolder(CONFIG.CLIENTS_FOLDER);
    const file = DriveApp.getFileById(newSpreadsheet.getId());
    folder.addFile(file);
    DriveApp.getRootFolder().removeFile(file);
    
    const sheet = newSpreadsheet.getActiveSheet();
    sheet.setName('פעולות');
    
    // כותרת ראשית
    sheet.getRange(1, 1).setValue(`📋 ${client.fullName}`);
    sheet.getRange(1, 1).setFontSize(20).setFontWeight('bold')
      .setBackground(COLORS.PRIMARY).setFontColor('white');
    sheet.getRange(1, 1, 1, 8).merge();
    
    // פרטי לקוח
    sheet.getRange(2, 1).setValue('מס\' תיק:');
    sheet.getRange(2, 2).setValue(client.fileNumber).setFontWeight('bold');
    
    sheet.getRange(2, 4).setValue('סוג:');
    sheet.getRange(2, 5).setValue(client.type === 'hours' ? 'תוכנית שעות' : 'פיקס').setFontWeight('bold');
    
    if (client.type === 'hours') {
      sheet.getRange(2, 7).setValue('סה"כ שעות:');
      sheet.getRange(2, 8).setValue(client.totalHours).setFontWeight('bold');
    }
    
    // כותרות טבלה
    const headers = [
      'תאריך', 'תיאור פעולה', 'צוות משפטי', 'דקות',
      'דקות מצטבר', 'דקות נותרות', 'שעות נותרות', 'הערות'
    ];
    
    sheet.getRange(4, 1, 1, headers.length).setValues([headers]);
    sheet.getRange(4, 1, 1, headers.length)
      .setFontWeight('bold')
      .setBackground(COLORS.PRIMARY)
      .setFontColor('white');
    
    sheet.setFrozenRows(4);
    
    // עיצוב עמודות
    const widths = [100, 300, 120, 100, 120, 150, 150, 200];
    for (let i = 0; i < widths.length; i++) {
      sheet.setColumnWidth(i + 1, widths[i]);
    }
    
    Logger.log('✅ נוצר גליון לקוח עם חישוב אוטומטי: ' + spreadsheetName);
    return newSpreadsheet.getUrl();
    
  } catch (error) {
    Logger.log('❌ שגיאה ביצירת גליון לקוח משופר: ' + error.toString());
    throw error;
  }
}

// ===== פונקציות חישוב אוטומטי =====

/**
 * פונקציה ראשית - מחשבת מחדש גליון לקוח ספציפי
 * @param {string} spreadsheetId - מזהה הגליון (אופציונלי)
 * @returns {boolean} האם החישוב הצליח
 */
function recalculateClientSheet(spreadsheetId = null) {
  try {
    const sheet = spreadsheetId ? 
      SpreadsheetApp.openById(spreadsheetId).getSheetByName('פעולות') :
      SpreadsheetApp.getActiveSheet();
    
    if (!sheet) {
      Logger.log('❌ לא נמצא גליון פעולות');
      return false;
    }
    
    Logger.log('🔄 מתחיל חישוב מחדש של גליון לקוח...');
    
    // קבלת נתוני הלקוח
    const clientData = getClientDataFromSheet(sheet);
    if (!clientData) {
      Logger.log('❌ לא ניתן לזהות נתוני לקוח');
      return false;
    }
    
    // מיון לפי תאריכים
    sortClientSheetByDate(sheet);
    
    // חישוב הנוסחאות
    calculateClientFormulas(sheet, clientData);
    
    Logger.log('✅ חישוב מחדש הושלם בהצלחה!');
    return true;
    
  } catch (error) {
    Logger.log('❌ שגיאה בחישוב מחדש: ' + error.toString());
    return false;
  }
}

/**
 * מיון הנתונים לפי תאריכים בסדר עולה (לגליון לקוח)
 * @param {GoogleAppsScript.Spreadsheet.Sheet} sheet - הגליון לעדכון
 */
function sortClientSheetByDate(sheet) {
  const lastRow = getLastDataRowClient(sheet);
  
  if (lastRow < CONFIG.AUTO_CALC.FIRST_DATA_ROW) {
    Logger.log('אין נתונים למיון');
    return;
  }
  
  Logger.log(`ממיין נתונים מששורה ${CONFIG.AUTO_CALC.FIRST_DATA_ROW} עד שורה ${lastRow}`);
  
  // קבלת הטווח למיון
  const dataRange = sheet.getRange(
    CONFIG.AUTO_CALC.FIRST_DATA_ROW, 
    CONFIG.AUTO_CALC.DATE_COL, 
    lastRow - CONFIG.AUTO_CALC.FIRST_DATA_ROW + 1, 
    CONFIG.AUTO_CALC.NOTES_COL
  );
  
  // מיון לפי עמודת התאריך
  dataRange.sort({column: CONFIG.AUTO_CALC.DATE_COL, ascending: true});
  
  Logger.log('מיון הושלם');
}

/**
 * חישוב הנוסחאות לכל השורות (לגליון לקוח)
 * @param {GoogleAppsScript.Spreadsheet.Sheet} sheet - הגליון לעדכון
 * @param {Object} clientData - נתוני הלקוח
 */
function calculateClientFormulas(sheet, clientData) {
  const lastRow = getLastDataRowClient(sheet);
  
  if (lastRow < CONFIG.AUTO_CALC.FIRST_DATA_ROW) {
    Logger.log('אין נתונים לחישוב');
    return;
  }
  
  Logger.log(`מחשב נוסחאות מששורה ${CONFIG.AUTO_CALC.FIRST_DATA_ROW} עד שורה ${lastRow}`);
  
  let cumulativeMinutes = 0;
  const totalMinutes = clientData.type === 'hours' ? clientData.totalHours * 60 : 0;
  
  // מעבר על כל השורות
  for (let row = CONFIG.AUTO_CALC.FIRST_DATA_ROW; row <= lastRow; row++) {
    const minutes = sheet.getRange(row, CONFIG.AUTO_CALC.MINUTES_COL).getValue();
    const notes = sheet.getRange(row, CONFIG.AUTO_CALC.NOTES_COL).getValue();
    
    // בדיקה האם זה בונוס (לא נספר בדקות המצטברות)
    const isBonus = isRowBonus(notes, minutes);
    
    if (!isBonus && isValidNumber(minutes)) {
      cumulativeMinutes += Number(minutes);
    }
    
    // כתיבת הדקות המצטברות
    sheet.getRange(row, CONFIG.AUTO_CALC.CUMULATIVE_COL).setValue(cumulativeMinutes);
    
    // חישוב דקות ושעות נותרות (רק אם זה לקוח שעות)
    if (clientData.type === 'hours') {
      const remainingMinutes = Math.max(0, totalMinutes - cumulativeMinutes);
      sheet.getRange(row, CONFIG.AUTO_CALC.REMAINING_MIN_COL).setValue(remainingMinutes);
      
      const remainingHours = Math.round((remainingMinutes / 60) * 100) / 100;
      sheet.getRange(row, CONFIG.AUTO_CALC.REMAINING_HOURS_COL).setValue(remainingHours);
    } else {
      // לקוח פיקס - אין חישוב שעות נותרות
      sheet.getRange(row, CONFIG.AUTO_CALC.REMAINING_MIN_COL).setValue(0);
      sheet.getRange(row, CONFIG.AUTO_CALC.REMAINING_HOURS_COL).setValue(0);
    }
    
    // הוספת "בונוס" להערות אם זה בונוס ואין כבר הערה
    if (isBonus && !notes) {
      sheet.getRange(row, CONFIG.AUTO_CALC.NOTES_COL).setValue('בונוס');
    }
    
    // צביעת שורות בונוס
    if (isBonus) {
      sheet.getRange(row, 1, 1, CONFIG.AUTO_CALC.NOTES_COL).setBackground(COLORS.BONUS);
    }
  }
  
  // עדכון שעות נותרות במאסטר לקוחות
  if (clientData.type === 'hours') {
    updateMasterClientHours(clientData.fileNumber, Math.max(0, totalMinutes - cumulativeMinutes) / 60);
  }
  
  Logger.log(`חישוב הושלם. סה"כ דקות מצטברות: ${cumulativeMinutes}`);
}

/**
 * עדכון שעות נותרות במאסטר לקוחות
 * @param {string} fileNumber - מספר תיק הלקוח
 * @param {number} remainingHours - שעות נותרות
 */
function updateMasterClientHours(fileNumber, remainingHours) {
  try {
    const masterSheet = setupMasterClients();
    const data = masterSheet.getDataRange().getValues();
    
    for (let i = 3; i < data.length; i++) {
      if (data[i][2] === fileNumber) {
        masterSheet.getRange(i + 1, 8).setValue(Math.round(remainingHours * 100) / 100);
        SpreadsheetApp.flush();
        Logger.log(`🔄 עודכנו שעות במאסטר: ${fileNumber} -> ${remainingHours}`);
        break;
      }
    }
  } catch (error) {
    Logger.log('⚠️ שגיאה בעדכון שעות במאסטר: ' + error.toString());
  }
}

// ===== פונקציות עזר ללקוחות =====

/**
 * בדיקה האם שורה היא בונוס
 * @param {string} notes - הערות השורה
 * @param {number} minutes - דקות השורה
 * @returns {boolean} האם זה בונוס
 */
function isRowBonus(notes, minutes) {
  if (!notes) return false;
  
  const notesStr = notes.toString().toLowerCase();
  return notesStr.includes('בונוס') || 
         notesStr.includes('מתנה') || 
         notesStr.includes('ביקש לתת') ||
         notesStr.includes('כמתנה') ||
         (Number(minutes) === 0 && notesStr.length > 0);
}

/**
 * בדיקה האם מספר תקין
 * @param {*} value - הערך לבדיקה
 * @returns {boolean} האם המספר תקין
 */
function isValidNumber(value) {
  return value !== null && value !== undefined && value !== '' && !isNaN(Number(value)) && Number(value) > 0;
}

/**
 * קבלת השורה האחרונה עם נתונים (לגליון לקוח)
 * @param {GoogleAppsScript.Spreadsheet.Sheet} sheet - הגליון לבדיקה
 * @returns {number} מספר השורה האחרונה עם נתונים
 */
function getLastDataRowClient(sheet) {
  const lastRow = sheet.getLastRow();
  
  for (let row = lastRow; row >= CONFIG.AUTO_CALC.FIRST_DATA_ROW; row--) {
    const dateValue = sheet.getRange(row, CONFIG.AUTO_CALC.DATE_COL).getValue();
    if (dateValue && dateValue !== '') {
      return row;
    }
  }
  
  return CONFIG.AUTO_CALC.FIRST_DATA_ROW - 1;
}

/**
 * קבלת נתוני לקוח מהגליון
 * @param {GoogleAppsScript.Spreadsheet.Sheet} sheet - גליון הלקוח
 * @returns {Object|null} נתוני הלקוח או null אם לא נמצא
 */
function getClientDataFromSheet(sheet) {
  try {
    // קריאת פרטי הלקוח מהכותרות
    const fileNumberCell = sheet.getRange(2, 2).getValue();
    const typeCell = sheet.getRange(2, 5).getValue();
    const totalHoursCell = sheet.getRange(2, 8).getValue();
    
    if (!fileNumberCell) {
      return null;
    }
    
    return {
      fileNumber: fileNumberCell,
      type: typeCell === 'תוכנית שעות' ? 'hours' : 'fixed',
      totalHours: Number(totalHoursCell) || 0
    };
  } catch (error) {
    Logger.log('❌ שגיאה בקריאת נתוני לקוח: ' + error.toString());
    return null;
  }
}

/**
 * עדכון גליון לקוח עם חישוב אוטומטי
 * @param {Object} entry - נתוני הרישום החדש
 */
function updateClientSheetEnhanced(entry) {
  try {
    const clientSheetUrl = getClientSheetUrl(entry.clientName);
    if (!clientSheetUrl) {
      Logger.log('⚠️ לא נמצא קישור ללקוח: ' + entry.clientName);
      return;
    }
    
    // בדיקה שהקישור עובד
    if (!testClientSheetLink(clientSheetUrl)) {
      Logger.log('⚠️ קישור לא עובד ללקוח: ' + entry.clientName + ' - מדלג על עדכון');
      return;
    }
    
    const clientSpreadsheet = SpreadsheetApp.openByUrl(clientSheetUrl);
    const sheet = clientSpreadsheet.getSheetByName('פעולות');
    
    let lastRow = sheet.getLastRow();
    if (lastRow < 5) lastRow = 4;
    
    const newRow = [
      entry.date,
      entry.action,
      entry.lawyer,
      entry.minutes,
      '', // דקות מצטבר - יחושב אוטומטית
      '', // דקות נותרות - יחושב אוטומטית
      '', // שעות נותרות - יחושב אוטומטית
      entry.notes || ''
    ];
    
    const nextRow = lastRow + 1;
    sheet.getRange(nextRow, 1, 1, newRow.length).setValues([newRow]);
    
    // הפעלת חישוב אוטומטי
    recalculateClientSheet(clientSpreadsheet.getId());
    
    Logger.log('📄 עודכן גליון לקוח עם חישוב אוטומטי: ' + entry.clientName);
    
  } catch (error) {
    Logger.log('⚠️ שגיאה בעדכון גליון לקוח משופר: ' + error.toString());
  }
}

/**
 * חישוב שעות נותרות ללקוח
 * @param {Array} clientRow - שורת הלקוח ממאסטר הלקוחות
 * @returns {number} מספר השעות הנותרות
 */
function calculateRemainingHours(clientRow) {
  try {
    const clientType = clientRow[5];
    const totalHours = clientRow[6] || 0;
    
    if (clientType !== 'hours') {
      return 0;
    }
    
    const clientSheetUrl = clientRow[11];
    if (!clientSheetUrl) {
      return totalHours;
    }
    
    // בדיקה שהקישור עובד
    if (!testClientSheetLink(clientSheetUrl)) {
      Logger.log(`⚠️ קישור לא עובד ללקוח ${clientRow[3]} - מחזיר שעות מקוריות`);
      return totalHours;
    }
    
    const clientSpreadsheet = SpreadsheetApp.openByUrl(clientSheetUrl);
    const sheet = clientSpreadsheet.getSheetByName('פעולות');
    
    if (!sheet || sheet.getLastRow() <= 4) {
      return totalHours;
    }
    
    const lastRow = sheet.getLastRow();
    const remainingHours = sheet.getRange(lastRow, 7).getValue();
    
    return remainingHours || totalHours;
    
  } catch (error) {
    Logger.log('⚠️ שגיאה בחישוב שעות נותרות: ' + error.toString());
    return clientRow[6] || 0;
  }
}

// ===== פונקציות בדיקה וולידציה =====

/**
 * בדיקת קיום לקוח לפי מספר תיק
 * @param {string} fileNumber - מספר תיק הלקוח
 * @returns {boolean} האם הלקוח קיים
 */
function isClientExists(fileNumber) {
  const sheet = setupMasterClients();
  const data = sheet.getDataRange().getValues();
  
  for (let i = 3; i < data.length; i++) {
    if (data[i][2] === fileNumber) return true;
  }
  return false;
}

/**
 * בדיקת קיום לקוח לפי שם מלא
 * @param {string} fullName - שם מלא של הלקוח
 * @returns {boolean} האם הלקוח קיים
 */
function isClientNameExists(fullName) {
  const sheet = setupMasterClients();
  const data = sheet.getDataRange().getValues();
  
  for (let i = 3; i < data.length; i++) {
    if (data[i][3] === fullName) return true;
  }
  return false;
}

/**
 * קבלת URL של גליון לקוח
 * @param {string} clientName - שם הלקוח
 * @returns {string|null} URL הגליון או null
 */
function getClientSheetUrl(clientName) {
  const sheet = setupMasterClients();
  const data = sheet.getDataRange().getValues();
  
  for (let i = 3; i < data.length; i++) {
    if (data[i][3] === clientName) {
      return data[i][11];
    }
  }
  return null;
}

/**
 * קבלת נתוני לקוח לפי שם
 * @param {string} clientName - שם הלקוח
 * @returns {Object|null} נתוני הלקוח או null
 */
function getClientData(clientName) {
  const sheet = setupMasterClients();
  const data = sheet.getDataRange().getValues();
  
  for (let i = 3; i < data.length; i++) {
    if (data[i][3] === clientName) {
      return {
        type: data[i][5],
        totalHours: data[i][6] || 0,
        hoursRemaining: data[i][7] || 0
      };
    }
  }
  return null;
}

/**
 * עדכון שעות לקוח במאסטר
 * @param {string} clientName - שם הלקוח
 * @param {number} minutes - דקות לחיסור
 */
function updateClientHours(clientName, minutes) {
  try {
    const masterSheet = setupMasterClients();
    const data = masterSheet.getDataRange().getValues();
    
    for (let i = 3; i < data.length; i++) {
      if (data[i][3] === clientName) {
        const currentMinutes = (data[i][7] || 0) * 60;
        const newMinutes = Math.max(0, currentMinutes - minutes);
        const newHours = Math.round(newMinutes / 60 * 100) / 100;
        
        masterSheet.getRange(i + 1, 8).setValue(newHours);
        SpreadsheetApp.flush();
        
        Logger.log('🔄 עודכנו שעות: ' + clientName + ' -> ' + newHours);
        
        if (newHours <= 5 && newHours > 0) {
          Logger.log('🚨 התראה: נותרו רק ' + newHours + ' שעות!');
        }
        
        break;
      }
    }
    
  } catch (error) {
    Logger.log('⚠️ שגיאה בעדכון שעות: ' + error.toString());
  }
}

/**
 * בדיקה האם קישור לגליון לקוח עובד
 * @param {string} url - URL הגליון
 * @returns {boolean} האם הקישור עובד
 */
function testClientSheetLink(url) {
  try {
    if (!url || url === '') return false;
    
    const spreadsheet = SpreadsheetApp.openByUrl(url);
    const sheet = spreadsheet.getSheetByName('פעולות');
    
    // בדיקה בסיסית שהגליון קיים ויש לו את המבנה הנכון
    return sheet !== null;
    
  } catch (error) {
    Logger.log(`⚠️ קישור לא עובד: ${url} - ${error.toString()}`);
    return false;
  }
}









/**
 * @fileoverview ניהול משימות ותקצוב במערכת ניהול משרד עורכי דין
 * מכיל פונקציות ליצירה, עדכון, השלמה ומעקב משימות תקציביות
 * @version 2.0.0
 * @since 2025-01-01
 * @requires config.js, utils.js
 */

// ===== פונקציות ראשיות לניהול משימות =====

/**
 * שמירת משימת תקצוב חדשה במבנה מתוקן
 * @param {Object} data - נתוני המשימה והעובד
 * @param {Object} data.task - פרטי המשימה
 * @param {string} data.employee - שם העובד
 * @returns {Object} תוצאת השמירה עם מזהה המשימה
 */
function saveBudgetTaskFixed(data) {
  try {
    const employee = data.employee;
    const task = data.task;
    
    Logger.log('📊 שומר משימת תקצוב מתוקנת: ' + task.taskDescription);
    
    const taskId = Date.now();
    const employeeSpreadsheet = getEmployeeSpreadsheet(employee);
    const tasksSheet = employeeSpreadsheet.getSheetByName(CONFIG.TAB_TASKS);
    
    // וודא שהטאב קיים עם כותרות
    if (!tasksSheet || tasksSheet.getLastRow() === 0) {
      const newTasksSheet = getOrCreateSheet(employeeSpreadsheet, CONFIG.TAB_TASKS);
      setupFixedTasksSheetHeaders(newTasksSheet);
    }
    
    const newRow = [
      taskId,
      task.clientName,
      task.taskDescription,    // תיאור נוכחי
      task.taskDescription,    // תיאור מקורי
      task.estimatedMinutes,
      0,                       // זמן בפועל
      task.deadline,           // תאריך יעד נוכחי
      task.deadline,           // תאריך יעד מקורי
      false,                   // האם הוארך
      'פעיל',                  // סטטוס
      new Date().toLocaleString('he-IL'),
      new Date().toLocaleString('he-IL'),
      task.branch,
      task.fileNumber,
      '',                      // הערות
      ''                       // תאריך השלמה
    ];
    
    tasksSheet.appendRow(newRow);
    SpreadsheetApp.flush();
    
    // רישום ביומן העדכונים
    logUpdate(employee, 'משימה חדשה', `נוספה משימה: ${task.taskDescription} (${task.estimatedMinutes} דק')`);
    
    Logger.log('✅ משימה מתוקנת נשמרה: ID=' + taskId);
    return createResponse(true, MESSAGES.SUCCESS.TASK_CREATED, { taskId: taskId });
    
  } catch (error) {
    Logger.log('❌ שגיאה בשמירת משימה מתוקנת: ' + error.toString());
    return createResponse(false, error.toString());
  }
}

/**
 * הוספת זמן למשימה קיימת
 * @param {Object} data - נתוני רישום הזמן
 * @param {Object} data.timeEntry - פרטי רישום הזמן
 * @param {string} data.employee - שם העובד
 * @returns {Object} תוצאת ההוספה
 */
function addTimeToTaskFixed(data) {
  try {
    const employee = data.employee;
    const timeEntry = data.timeEntry;
    
    Logger.log('⏱️ מוסיף זמן למשימה מתוקנת: ' + timeEntry.taskId);
    
    const employeeSpreadsheet = getEmployeeSpreadsheet(employee);
    const tasksSheet = employeeSpreadsheet.getSheetByName(CONFIG.TAB_TASKS);
    const historySheet = employeeSpreadsheet.getSheetByName(CONFIG.TAB_HISTORY);
    
    // וודא שהטאבים קיימים
    if (!historySheet || historySheet.getLastRow() === 0) {
      const newHistorySheet = getOrCreateSheet(employeeSpreadsheet, CONFIG.TAB_HISTORY);
      setupFixedHistorySheetHeaders(newHistorySheet);
    }
    
    // מצא את המשימה ועדכן זמן בפועל
    const taskRow = findTaskRowFixed(tasksSheet, timeEntry.taskId);
    if (taskRow) {
      const currentMinutes = tasksSheet.getRange(taskRow, 6).getValue() || 0;
      const newMinutes = currentMinutes + timeEntry.minutes;
      tasksSheet.getRange(taskRow, 6).setValue(newMinutes);
      tasksSheet.getRange(taskRow, 12).setValue(new Date().toLocaleString('he-IL')); // עדכון זמן אחרון
    }
    
    // הוסף לטבלת היסטוריה
    const historyId = Date.now() + Math.random();
    const historyRow = [
      historyId,
      timeEntry.taskId,
      timeEntry.date,
      timeEntry.minutes,
      timeEntry.description,
      new Date().toLocaleString('he-IL')
    ];
    
    historySheet.appendRow(historyRow);
    SpreadsheetApp.flush();
    
    // רישום ביומן עדכונים
    logUpdate(employee, 'רישום זמן', `${timeEntry.minutes} דק' על משימה ${timeEntry.taskId}`);
    
    Logger.log('✅ זמן נוסף בהצלחה למשימה מתוקנת');
    return createResponse(true, 'זמן נוסף בהצלחה');
    
  } catch (error) {
    Logger.log('❌ שגיאה בהוספת זמן מתוקן: ' + error.toString());
    return createResponse(false, error.toString());
  }
}

/**
 * עדכון משימה קיימת
 * @param {Object} data - נתוני העדכון
 * @param {string} data.employee - שם העובד
 * @param {string} data.taskId - מזהה המשימה
 * @param {Object} data.updates - השדות לעדכון
 * @returns {Object} תוצאת העדכון
 */
function updateBudgetTaskFixed(data) {
  try {
    const employee = data.employee;
    const taskId = data.taskId;
    const updates = data.updates;
    
    Logger.log('✏️ מעדכן משימה מתוקנת: ' + taskId);
    
    const employeeSpreadsheet = getEmployeeSpreadsheet(employee);
    const tasksSheet = employeeSpreadsheet.getSheetByName(CONFIG.TAB_TASKS);
    const changesSheet = employeeSpreadsheet.getSheetByName(CONFIG.TAB_CHANGES);
    
    // וודא שטאב השינויים קיים
    if (!changesSheet || changesSheet.getLastRow() === 0) {
      const newChangesSheet = getOrCreateSheet(employeeSpreadsheet, CONFIG.TAB_CHANGES);
      setupFixedChangesSheetHeaders(newChangesSheet);
    }
    
    const taskRow = findTaskRowFixed(tasksSheet, taskId);
    if (!taskRow) {
      return createResponse(false, MESSAGES.ERRORS.TASK_NOT_FOUND);
    }
    
    const changes = [];
    
    // עדכון התיאור
    if (updates.taskDescription !== undefined) {
      const oldValue = tasksSheet.getRange(taskRow, 3).getValue();
      tasksSheet.getRange(taskRow, 3).setValue(updates.taskDescription);
      changes.push(['תיאור', oldValue, updates.taskDescription]);
    }
    
    // עדכון זמן מתוקצב
    if (updates.estimatedMinutes !== undefined) {
      const oldValue = tasksSheet.getRange(taskRow, 5).getValue();
      tasksSheet.getRange(taskRow, 5).setValue(updates.estimatedMinutes);
      changes.push(['זמן_מתוקצב', oldValue, updates.estimatedMinutes]);
    }
    
    // עדכון הערות
    if (updates.notes !== undefined) {
      const oldValue = tasksSheet.getRange(taskRow, 15).getValue();
      tasksSheet.getRange(taskRow, 15).setValue(updates.notes);
      changes.push(['הערות', oldValue, updates.notes]);
    }
    
    // עדכון זמן אחרון
    tasksSheet.getRange(taskRow, 12).setValue(new Date().toLocaleString('he-IL'));
    
    // רישום השינויים בטבלת עדכונים
    const timestamp = new Date().toLocaleString('he-IL');
    for (const change of changes) {
      const changeRow = [
        Date.now() + Math.random(),
        taskId,
        change[0],
        change[1],
        change[2],
        timestamp,
        `עדכון ידני על ידי ${employee}`
      ];
      
      changesSheet.appendRow(changeRow);
    }
    
    SpreadsheetApp.flush();
    
    // רישום ביומן עדכונים
    logUpdate(employee, 'עדכון משימה', `עודכנה משימה ${taskId} - ${changes.length} שינויים`);
    
    Logger.log('✅ משימה מתוקנת עודכנה');
    return createResponse(true, MESSAGES.SUCCESS.TASK_UPDATED);
    
  } catch (error) {
    Logger.log('❌ שגיאה בעדכון משימה מתוקנת: ' + error.toString());
    return createResponse(false, error.toString());
  }
}

/**
 * השלמת משימה
 * @param {Object} data - נתוני השלמת המשימה
 * @param {string} data.employee - שם העובד
 * @param {string} data.taskId - מזהה המשימה
 * @param {string} data.completionNotes - הערות השלמה
 * @returns {Object} תוצאת ההשלמה
 */
function completeBudgetTaskFixed(data) {
  try {
    const employee = data.employee;
    const taskId = data.taskId;
    const completionNotes = data.completionNotes || '';
    
    Logger.log('✅ משלים משימה מתוקנת: ' + taskId);
    
    const employeeSpreadsheet = getEmployeeSpreadsheet(employee);
    const tasksSheet = employeeSpreadsheet.getSheetByName(CONFIG.TAB_TASKS);
    const changesSheet = employeeSpreadsheet.getSheetByName(CONFIG.TAB_CHANGES);
    
    const taskRow = findTaskRowFixed(tasksSheet, taskId);
    if (!taskRow) {
      return createResponse(false, MESSAGES.ERRORS.TASK_NOT_FOUND);
    }
    
    const completedAt = new Date().toLocaleString('he-IL');
    
    // עדכון סטטוס וזמן השלמה
    tasksSheet.getRange(taskRow, 10).setValue('הושלם');
    tasksSheet.getRange(taskRow, 16).setValue(completedAt);
    tasksSheet.getRange(taskRow, 12).setValue(completedAt);
    
    if (completionNotes) {
      tasksSheet.getRange(taskRow, 15).setValue(completionNotes);
    }
    
    // צביעת השורה בירוק
    tasksSheet.getRange(taskRow, 1, 1, 16).setBackground('#d4edda');
    
    // רישום השלמה בטבלת שינויים
    const changeRow = [
      Date.now(),
      taskId,
      'השלמה',
      'פעיל',
      'הושלם',
      completedAt,
      completionNotes || 'משימה הושלמה'
    ];
    
    changesSheet.appendRow(changeRow);
    SpreadsheetApp.flush();
    
    // רישום ביומן עדכונים
    logUpdate(employee, 'השלמת משימה', `הושלמה משימה ${taskId}`);
    
    Logger.log('✅ משימה הושלמה בהצלחה');
    return createResponse(true, MESSAGES.SUCCESS.TASK_COMPLETED);
    
  } catch (error) {
    Logger.log('❌ שגיאה בהשלמת משימה: ' + error.toString());
    return createResponse(false, error.toString());
  }
}

/**
 * הארכת תאריך יעד למשימה
 * @param {Object} data - נתוני ההארכה
 * @param {string} data.employee - שם העובד
 * @param {string} data.taskId - מזהה המשימה
 * @param {string} data.newDeadline - תאריך יעד חדש
 * @param {string} data.reason - סיבת ההארכה
 * @returns {Object} תוצאת ההארכה
 */
function extendTaskDeadlineFixed(data) {
  try {
    const employee = data.employee;
    const taskId = data.taskId;
    const newDeadline = data.newDeadline;
    const reason = data.reason || '';
    
    Logger.log('📅 מאריך תאריך יעד למשימה: ' + taskId);
    
    const employeeSpreadsheet = getEmployeeSpreadsheet(employee);
    const tasksSheet = employeeSpreadsheet.getSheetByName(CONFIG.TAB_TASKS);
    const changesSheet = employeeSpreadsheet.getSheetByName(CONFIG.TAB_CHANGES);
    
    const taskRow = findTaskRowFixed(tasksSheet, taskId);
    if (!taskRow) {
      return createResponse(false, MESSAGES.ERRORS.TASK_NOT_FOUND);
    }
    
    // עדכון תאריך יעד וסימון הארכה
    const oldDeadline = tasksSheet.getRange(taskRow, 7).getValue();
    tasksSheet.getRange(taskRow, 7).setValue(newDeadline);
    tasksSheet.getRange(taskRow, 9).setValue(true); // סמן שהוארך
    tasksSheet.getRange(taskRow, 12).setValue(new Date().toLocaleString('he-IL'));
    
    // רישום השינוי
    const changeRow = [
      Date.now(),
      taskId,
      'הארכת_יעד',
      oldDeadline,
      newDeadline,
      new Date().toLocaleString('he-IL'),
      reason || 'הארכה ללא הסבר'
    ];
    
    changesSheet.appendRow(changeRow);
    SpreadsheetApp.flush();
    
    // רישום ביומן עדכונים
    logUpdate(employee, 'הארכת יעד', `הוארך יעד למשימה ${taskId} ל-${newDeadline}`);
    
    Logger.log('✅ תאריך יעד הוארך בהצלחה');
    return createResponse(true, 'תאריך יעד הוארך בהצלחה');
    
  } catch (error) {
    Logger.log('❌ שגיאה בהארכת יעד: ' + error.toString());
    return createResponse(false, error.toString());
  }
}

// ===== קבלת נתוני משימות =====

/**
 * קבלת משימות מתוקנות עם פילטר
 * @param {string} employee - שם העובד
 * @param {string} filter - סוג הפילטר (active/completed/all)
 * @returns {Object} רשימת המשימות המסוננות
 */
function getFilteredBudgetTasksFixed(employee, filter = 'active') {
  try {
    Logger.log('📊 טוען משימות מתוקנות עם פילטר: ' + filter);
    
    const employeeSpreadsheet = getEmployeeSpreadsheet(employee);
    const tasksSheet = employeeSpreadsheet.getSheetByName(CONFIG.TAB_TASKS);
    const historySheet = employeeSpreadsheet.getSheetByName(CONFIG.TAB_HISTORY);
    
    if (!tasksSheet || tasksSheet.getLastRow() <= 3) {
      return createResponse(true, 'אין משימות', { tasks: [] });
    }
    
    const tasksData = tasksSheet.getDataRange().getValues();
    const historyData = historySheet && historySheet.getLastRow() > 3 ? 
                       historySheet.getDataRange().getValues() : [];
    
    // בנה מפה של היסטוריה
    const historyMap = buildTaskHistoryMap(historyData);
    
    const tasks = [];
    const now = new Date();
    const oneMonthAgo = new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());
    
    // עיבוד משימות
    for (let i = 3; i < tasksData.length; i++) {
      if (tasksData[i][0]) {
        const task = createTaskObject(tasksData[i], historyMap);
        
        // החלת פילטר
        if (shouldIncludeTask(task, filter, oneMonthAgo)) {
          tasks.push(task);
        }
      }
    }
    
    Logger.log(`✅ נטענו ${tasks.length} משימות מתוקנות עם פילטר ${filter}`);
    return createResponse(true, 'משימות נטענו בהצלחה', { tasks });
    
  } catch (error) {
    Logger.log('❌ שגיאה בטעינת משימות מתוקנות: ' + error.toString());
    return createResponse(false, error.toString(), { tasks: [] });
  }
}

/**
 * קבלת משימות פעילות (ברירת מחדל)
 * @param {string} employee - שם העובד
 * @returns {Object} רשימת המשימות הפעילות
 */
function getBudgetTasksFixed(employee) {
  return getFilteredBudgetTasksFixed(employee, 'active');
}

/**
 * קבלת היסטוריית משימה ספציפית
 * @param {string} employee - שם העובד
 * @param {string} taskId - מזהה המשימה
 * @returns {Object} היסטוריית זמנים ושינויים של המשימה
 */
function getTaskHistoryFixed(employee, taskId) {
  try {
    Logger.log('📜 מביא היסטוריה למשימה: ' + taskId);
    
    const employeeSpreadsheet = getEmployeeSpreadsheet(employee);
    const historySheet = employeeSpreadsheet.getSheetByName(CONFIG.TAB_HISTORY);
    const changesSheet = employeeSpreadsheet.getSheetByName(CONFIG.TAB_CHANGES);
    
    const history = [];
    const changes = [];
    
    // היסטוריית זמנים
    if (historySheet && historySheet.getLastRow() > 3) {
      const historyData = historySheet.getDataRange().getValues();
      
      for (let i = 3; i < historyData.length; i++) {
        if (historyData[i][1] == taskId) {
          history.push({
            id: historyData[i][0],
            date: historyData[i][2],
            minutes: historyData[i][3],
            description: historyData[i][4],
            timestamp: historyData[i][5]
          });
        }
      }
    }
    
    // היסטוריית שינויים
    if (changesSheet && changesSheet.getLastRow() > 3) {
      const changesData = changesSheet.getDataRange().getValues();
      
      for (let i = 3; i < changesData.length; i++) {
        if (changesData[i][1] == taskId) {
          changes.push({
            id: changesData[i][0],
            type: changesData[i][2],
            oldValue: changesData[i][3],
            newValue: changesData[i][4],
            timestamp: changesData[i][5],
            notes: changesData[i][6]
          });
        }
      }
    }
    
    return createResponse(true, 'היסטוריה נטענה', { 
      history: history.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp)),
      changes: changes.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))
    });
    
  } catch (error) {
    Logger.log('❌ שגיאה בטעינת היסטוריה: ' + error.toString());
    return createResponse(false, error.toString());
  }
}

// ===== הגדרת כותרות טאבים =====

/**
 * הגדרת כותרות טאב משימות
 * @param {GoogleAppsScript.Spreadsheet.Sheet} sheet - הגליון להגדרה
 */
function setupFixedTasksSheetHeaders(sheet) {
  if (sheet.getLastRow() === 0) {
    sheet.getRange(1, 1).setValue('📋 משימות מתוקצבות');
    sheet.getRange(1, 1).setFontSize(18).setFontWeight('bold')
      .setBackground(COLORS.PRIMARY).setFontColor('white');
    sheet.getRange(1, 1, 1, 16).merge();
    
    const headers = [
      'ID', 'לקוח', 'תיאור_נוכחי', 'תיאור_מקורי', 'דקות_תקצוב', 
      'דקות_בפועל', 'תאריך_יעד', 'תאריך_מקורי', 'הוארך', 'סטטוס', 
      'נוצר', 'עודכן', 'סניף', 'מס_תיק', 'הערות', 'הושלם_ב'
    ];
    
    sheet.getRange(3, 1, 1, headers.length).setValues([headers]);
    sheet.getRange(3, 1, 1, headers.length)
      .setFontWeight('bold')
      .setBackground(COLORS.PRIMARY)
      .setFontColor('white');
    
    sheet.setFrozenRows(3);
    
    // עיצוב עמודות
    const widths = [80, 200, 300, 300, 100, 100, 150, 150, 80, 100, 150, 150, 100, 100, 200, 150];
    for (let i = 0; i < widths.length; i++) {
      sheet.setColumnWidth(i + 1, widths[i]);
    }
  }
}

/**
 * הגדרת כותרות טאב היסטוריה
 * @param {GoogleAppsScript.Spreadsheet.Sheet} sheet - הגליון להגדרה
 */
function setupFixedHistorySheetHeaders(sheet) {
  if (sheet.getLastRow() === 0) {
    sheet.getRange(1, 1).setValue('⏰ היסטוריית זמנים');
    sheet.getRange(1, 1).setFontSize(18).setFontWeight('bold')
      .setBackground(COLORS.SUCCESS).setFontColor('white');
    sheet.getRange(1, 1, 1, 6).merge();
    
    const headers = ['ID_זמן', 'ID_משימה', 'תאריך', 'דקות', 'תיאור_עבודה', 'הוסף_ב'];
    
    sheet.getRange(3, 1, 1, headers.length).setValues([headers]);
    sheet.getRange(3, 1, 1, headers.length)
      .setFontWeight('bold')
      .setBackground(COLORS.SUCCESS)
      .setFontColor('white');
    
    sheet.setFrozenRows(3);
    
    // עיצוב עמודות
    sheet.setColumnWidth(1, 120);  // ID זמן
    sheet.setColumnWidth(2, 120);  // ID משימה
    sheet.setColumnWidth(3, 100);  // תאריך
    sheet.setColumnWidth(4, 80);   // דקות
    sheet.setColumnWidth(5, 400);  // תיאור עבודה
    sheet.setColumnWidth(6, 150);  // הוסף ב
  }
}

/**
 * הגדרת כותרות טאב שינויים
 * @param {GoogleAppsScript.Spreadsheet.Sheet} sheet - הגליון להגדרה
 */
function setupFixedChangesSheetHeaders(sheet) {
  if (sheet.getLastRow() === 0) {
    sheet.getRange(1, 1).setValue('📝 עדכונים ושינויים');
    sheet.getRange(1, 1).setFontSize(18).setFontWeight('bold')
      .setBackground(COLORS.WARNING).setFontColor('white');
    sheet.getRange(1, 1, 1, 7).merge();
    
    const headers = ['ID_עדכון', 'ID_משימה', 'סוג_עדכון', 'ערך_ישן', 'ערך_חדש', 'תאריך_עדכון', 'הערות'];
    
    sheet.getRange(3, 1, 1, headers.length).setValues([headers]);
    sheet.getRange(3, 1, 1, headers.length)
      .setFontWeight('bold')
      .setBackground(COLORS.WARNING)
      .setFontColor('white');
    
    sheet.setFrozenRows(3);
    
    // עיצוב עמודות
    const widths = [120, 120, 150, 200, 200, 150, 300];
    for (let i = 0; i < widths.length; i++) {
      sheet.setColumnWidth(i + 1, widths[i]);
    }
  }
}

// ===== פונקציות עזר למשימות =====

/**
 * חיפוש שורת משימה לפי מזהה
 * @param {GoogleAppsScript.Spreadsheet.Sheet} sheet - גליון המשימות
 * @param {string} taskId - מזהה המשימה
 * @returns {number|null} מספר השורה או null אם לא נמצא
 */
function findTaskRowFixed(sheet, taskId) {
  const data = sheet.getDataRange().getValues();
  for (let i = 3; i < data.length; i++) {
    if (data[i][0] == taskId) {
      return i + 1;
    }
  }
  return null;
}

/**
 * בנית מפה של היסטוריית משימות
 * @param {Array} historyData - נתוני ההיסטוריה
 * @returns {Object} מפה של היסטוריות לפי מזהה משימה
 */
function buildTaskHistoryMap(historyData) {
  const historyMap = {};
  
  for (let i = 3; i < historyData.length; i++) {
    const taskId = historyData[i][1];
    if (!historyMap[taskId]) historyMap[taskId] = [];
    
    historyMap[taskId].push({
      id: historyData[i][0],
      date: historyData[i][2],
      minutes: historyData[i][3],
      description: historyData[i][4],
      timestamp: historyData[i][5]
    });
  }
  
  return historyMap;
}

/**
 * יצירת אובייקט משימה מנתוני שורה
 * @param {Array} rowData - נתוני השורה
 * @param {Object} historyMap - מפת ההיסטוריה
 * @returns {Object} אובייקט המשימה
 */
function createTaskObject(rowData, historyMap) {
  return {
    id: rowData[0],
    clientName: rowData[1],
    description: rowData[2],
    originalDescription: rowData[3],
    estimatedMinutes: Number(rowData[4]) || 0,
    actualMinutes: Number(rowData[5]) || 0,
    deadline: rowData[6],
    originalDeadline: rowData[7],
    extended: rowData[8],
    status: rowData[9],
    createdAt: rowData[10],
    lastUpdated: rowData[11],
    branch: rowData[12],
    fileNumber: rowData[13],
    notes: rowData[14],
    completedAt: rowData[15],
    history: historyMap[rowData[0]] || []
  };
}

/**
 * בדיקה האם לכלול משימה בפילטר
 * @param {Object} task - אובייקט המשימה
 * @param {string} filter - סוג הפילטר
 * @param {Date} oneMonthAgo - תאריך לפני חודש
 * @returns {boolean} האם לכלול את המשימה
 */
function shouldIncludeTask(task, filter, oneMonthAgo) {
  switch (filter) {
    case 'active':
      return task.status !== 'הושלם';
      
    case 'completed':
      if (task.status === 'הושלם' && task.completedAt) {
        return new Date(task.completedAt) >= oneMonthAgo;
      }
      return false;
      
    case 'all':
      return true;
      
    default:
      return false;
  }
}














/**
 * @fileoverview ניהול שעתון ורישום זמנים במערכת ניהול משרד עורכי דין
 * מכיל פונקציות לרישום, עדכון וטעינת נתוני שעתון עם עדכון אוטומטי של לקוחות
 * @version 2.0.0
 * @since 2025-01-01
 * @requires config.js, clients.js, utils.js
 */

// ===== פונקציות ראשיות לניהול שעתון =====

/**
 * שמירת רישום שעתון חדש עם חישוב אוטומטי
 * @param {Object} data - נתוני הרישום והעובד
 * @param {Object} data.entry - פרטי הרישום
 * @param {string} data.employee - שם העובד
 * @returns {Object} תוצאת השמירה
 */
function saveTimesheetEntryEnhanced(data) {
  try {
    const employee = data.employee;
    const entry = data.entry;
    
    Logger.log('⏰ שומר רישום שעתון עם חישוב אוטומטי: ' + entry.action);
    
    // שמירה בגליון העובד
    const employeeSpreadsheet = getEmployeeSpreadsheet(employee);
    const timesheetSheet = employeeSpreadsheet.getSheetByName(CONFIG.TAB_TIMESHEET);
    
    // וודא שטאב השעתון קיים
    if (!timesheetSheet || timesheetSheet.getLastRow() === 0) {
      const newTimesheetSheet = getOrCreateSheet(employeeSpreadsheet, CONFIG.TAB_TIMESHEET);
      setupTimesheetTab(newTimesheetSheet, employee);
    }
    
    const entryId = Date.now();
    const newRow = [
      entryId,
      entry.date,
      entry.action,
      entry.lawyer,
      entry.minutes,
      entry.clientName,
      entry.fileNumber,
      entry.notes || '',
      new Date().toLocaleString('he-IL')
    ];
    
    timesheetSheet.appendRow(newRow);
    SpreadsheetApp.flush();
    
    // עדכון גליון הלקוח עם חישוב אוטומטי
    updateClientSheetEnhanced(entry);
    
    // עדכון שעות אם צריך
    if (entry.updateHours && entry.clientType === 'hours') {
      updateClientHours(entry.clientName, entry.minutes);
    }
    
    // עדכון במאסטר עדכונים
    logUpdate(employee, 'פעולה בשעתון', `${entry.action} - ${entry.clientName} (${entry.minutes} דק') - עם חישוב אוטומטי`);
    
    Logger.log('✅ רישום שעתון נשמר עם חישוב אוטומטי');
    return createResponse(true, MESSAGES.SUCCESS.TIMESHEET_SAVED);
    
  } catch (error) {
    Logger.log('❌ שגיאה בשמירת שעתון משופר: ' + error.toString());
    return createResponse(false, error.toString());
  }
}

/**
 * טעינת רישומי שעתון של עובד (ברירת מחדל - היום)
 * @param {string} employee - שם העובד
 * @returns {Object} רשימת רישומי היום
 */
function getTimesheetEntriesData(employee) {
  return getFilteredTimesheetEntries(employee, 'today');
}

/**
 * טעינת רישומי שעתון מסוננים
 * @param {string} employee - שם העובד
 * @param {string} filter - סוג הפילטר (today/month/all)
 * @returns {Object} רשימת הרישומים המסוננים
 */
function getFilteredTimesheetEntries(employee, filter = 'today') {
  try {
    Logger.log('⏰ טוען רשומות שעתון עם פילטר: ' + filter);
    
    const employeeSpreadsheet = getEmployeeSpreadsheet(employee);
    const timesheetSheet = employeeSpreadsheet.getSheetByName(CONFIG.TAB_TIMESHEET);
    
    if (!timesheetSheet || timesheetSheet.getLastRow() <= 3) {
      return createResponse(true, 'אין רשומות', { entries: [] });
    }
    
    const data = timesheetSheet.getDataRange().getValues();
    const entries = [];
    const filterDates = calculateFilterDates(filter);
    
    // עיבוד רישומים
    for (let i = 3; i < data.length; i++) {
      if (data[i][0]) {
        const entry = createTimesheetEntryObject(data[i]);
        
        // החלת פילטר תאריכים
        if (shouldIncludeTimesheetEntry(entry, filter, filterDates)) {
          entries.push(entry);
        }
      }
    }
    
    // מיון לפי תאריך (החדשים ראשונים)
    entries.sort((a, b) => new Date(b.date) - new Date(a.date));
    
    Logger.log(`✅ נטענו ${entries.length} רשומות עם פילטר ${filter}`);
    return createResponse(true, 'רשומות נטענו בהצלחה', { entries });
    
  } catch (error) {
    Logger.log('❌ שגיאה בטעינת שעתון: ' + error.toString());
    return createResponse(false, error.toString(), { entries: [] });
  }
}

/**
 * עדכון רישום שעתון קיים
 * @param {Object} data - נתוני העדכון
 * @param {string} data.employee - שם העובד
 * @param {string} data.entryId - מזהה הרישום
 * @param {Object} data.updates - השדות לעדכון
 * @returns {Object} תוצאת העדכון
 */
function updateTimesheetEntry(data) {
  try {
    const employee = data.employee;
    const entryId = data.entryId;
    const updates = data.updates;
    
    Logger.log('✏️ מעדכן רישום שעתון: ' + entryId);
    
    const employeeSpreadsheet = getEmployeeSpreadsheet(employee);
    const timesheetSheet = employeeSpreadsheet.getSheetByName(CONFIG.TAB_TIMESHEET);
    
    if (!timesheetSheet) {
      return createResponse(false, 'גליון שעתון לא נמצא');
    }
    
    const entryRow = findTimesheetEntryRow(timesheetSheet, entryId);
    if (!entryRow) {
      return createResponse(false, 'רישום לא נמצא');
    }
    
    // עדכון השדות
    if (updates.date !== undefined) {
      timesheetSheet.getRange(entryRow, 2).setValue(updates.date);
    }
    
    if (updates.action !== undefined) {
      timesheetSheet.getRange(entryRow, 3).setValue(updates.action);
    }
    
    if (updates.lawyer !== undefined) {
      timesheetSheet.getRange(entryRow, 4).setValue(updates.lawyer);
    }
    
    if (updates.minutes !== undefined) {
      const oldMinutes = timesheetSheet.getRange(entryRow, 5).getValue();
      timesheetSheet.getRange(entryRow, 5).setValue(updates.minutes);
      
      // עדכון הפרש הדקות בגליון הלקוח
      const clientName = timesheetSheet.getRange(entryRow, 6).getValue();
      if (clientName && updates.minutes !== oldMinutes) {
        updateClientSheetMinutes(clientName, updates.minutes - oldMinutes);
      }
    }
    
    if (updates.notes !== undefined) {
      timesheetSheet.getRange(entryRow, 8).setValue(updates.notes);
    }
    
    SpreadsheetApp.flush();
    
    // רישום ביומן עדכונים
    logUpdate(employee, 'עדכון שעתון', `עודכן רישום ${entryId}`);
    
    Logger.log('✅ רישום שעתון עודכן בהצלחה');
    return createResponse(true, 'רישום עודכן בהצלחה');
    
  } catch (error) {
    Logger.log('❌ שגיאה בעדכון רישום שעתון: ' + error.toString());
    return createResponse(false, error.toString());
  }
}

/**
 * מחיקת רישום שעתון
 * @param {Object} data - נתוני המחיקה
 * @param {string} data.employee - שם העובד
 * @param {string} data.entryId - מזהה הרישום
 * @returns {Object} תוצאת המחיקה
 */
function deleteTimesheetEntry(data) {
  try {
    const employee = data.employee;
    const entryId = data.entryId;
    
    Logger.log('🗑️ מוחק רישום שעתון: ' + entryId);
    
    const employeeSpreadsheet = getEmployeeSpreadsheet(employee);
    const timesheetSheet = employeeSpreadsheet.getSheetByName(CONFIG.TAB_TIMESHEET);
    
    if (!timesheetSheet) {
      return createResponse(false, 'גליון שעתון לא נמצא');
    }
    
    const entryRow = findTimesheetEntryRow(timesheetSheet, entryId);
    if (!entryRow) {
      return createResponse(false, 'רישום לא נמצא');
    }
    
    // שמירת נתוני הרישום לפני מחיקה
    const entryData = timesheetSheet.getRange(entryRow, 1, 1, 9).getValues()[0];
    const clientName = entryData[5];
    const minutes = entryData[4];
    
    // מחיקת השורה
    timesheetSheet.deleteRow(entryRow);
    SpreadsheetApp.flush();
    
    // עדכון גליון הלקוח (חיסור הדקות)
    if (clientName && minutes) {
      updateClientSheetMinutes(clientName, -minutes);
    }
    
    // רישום ביומן עדכונים
    logUpdate(employee, 'מחיקת רישום', `נמחק רישום ${entryId} - ${clientName} (${minutes} דק')`);
    
    Logger.log('✅ רישום שעתון נמחק בהצלחה');
    return createResponse(true, 'רישום נמחק בהצלחה');
    
  } catch (error) {
    Logger.log('❌ שגיאה במחיקת רישום שעתון: ' + error.toString());
    return createResponse(false, error.toString());
  }
}

// ===== פונקציות עזר לשעתון =====

/**
 * הגדרת טאב שעתון חדש
 * @param {GoogleAppsScript.Spreadsheet.Sheet} sheet - הגליון להגדרה
 * @param {string} employeeName - שם העובד
 */
function setupTimesheetTab(sheet, employeeName) {
  // כותרת
  sheet.getRange(1, 1).setValue(`⏰ שעתון - ${employeeName}`);
  sheet.getRange(1, 1).setFontSize(18).setFontWeight('bold')
    .setBackground(COLORS.SUCCESS).setFontColor('white');
  sheet.getRange(1, 1, 1, 9).merge();
  
  // כותרות טבלה
  const headers = [
    'ID', 'תאריך', 'פעולה', 'עו"ד', 'דקות',
    'לקוח', 'מס\' תיק', 'הערות', 'נוצר ב'
  ];
  
  sheet.getRange(3, 1, 1, headers.length).setValues([headers]);
  sheet.getRange(3, 1, 1, headers.length)
    .setFontWeight('bold')
    .setBackground(COLORS.SUCCESS)
    .setFontColor('white');
  
  sheet.setFrozenRows(3);
  
  // עיצוב עמודות
  const widths = [80, 100, 300, 100, 80, 200, 100, 200, 150];
  for (let i = 0; i < widths.length; i++) {
    sheet.setColumnWidth(i + 1, widths[i]);
  }
}

/**
 * יצירת אובייקט רישום שעתון
 * @param {Array} rowData - נתוני השורה
 * @returns {Object} אובייקט הרישום
 */
function createTimesheetEntryObject(rowData) {
  return {
    id: rowData[0],
    date: rowData[1],
    action: rowData[2],
    lawyer: rowData[3],
    minutes: Number(rowData[4]) || 0,
    clientName: rowData[5],
    fileNumber: rowData[6],
    notes: rowData[7],
    createdAt: rowData[8]
  };
}

/**
 * חישוב תאריכי פילטר
 * @param {string} filter - סוג הפילטר
 * @returns {Object} אובייקט עם תאריכי הפילטר
 */
function calculateFilterDates(filter) {
  const now = new Date();
  const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
  const oneMonthAgo = new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());
  
  return {
    today: today,
    oneMonthAgo: oneMonthAgo,
    now: now
  };
}

/**
 * בדיקה האם לכלול רישום בפילטר
 * @param {Object} entry - אובייקט הרישום
 * @param {string} filter - סוג הפילטר
 * @param {Object} filterDates - תאריכי הפילטר
 * @returns {boolean} האם לכלול את הרישום
 */
function shouldIncludeTimesheetEntry(entry, filter, filterDates) {
  const entryDate = new Date(entry.date);
  
  switch (filter) {
    case 'today':
      return entryDate.toDateString() === filterDates.today.toDateString();
      
    case 'month':
      return entryDate >= filterDates.oneMonthAgo;
      
    case 'all':
      return true;
      
    default:
      return false;
  }
}

/**
 * חיפוש שורת רישום שעתון לפי מזהה
 * @param {GoogleAppsScript.Spreadsheet.Sheet} sheet - גליון השעתון
 * @param {string} entryId - מזהה הרישום
 * @returns {number|null} מספר השורה או null אם לא נמצא
 */
function findTimesheetEntryRow(sheet, entryId) {
  const data = sheet.getDataRange().getValues();
  
  for (let i = 3; i < data.length; i++) {
    if (data[i][0] == entryId) {
      return i + 1;
    }
  }
  
  return null;
}

/**
 * עדכון דקות בגליון לקוח (ללא חישוב מחדש מלא)
 * @param {string} clientName - שם הלקוח
 * @param {number} minutesDelta - שינוי בדקות (יכול להיות שלילי)
 */
function updateClientSheetMinutes(clientName, minutesDelta) {
  try {
    const clientSheetUrl = getClientSheetUrl(clientName);
    if (!clientSheetUrl || !testClientSheetLink(clientSheetUrl)) {
      Logger.log('⚠️ לא ניתן לעדכן גליון לקוח: ' + clientName);
      return;
    }
    
    const clientSpreadsheet = SpreadsheetApp.openByUrl(clientSheetUrl);
    
    // הפעלת חישוב מחדש מלא (זה יטפל בעדכון הדקות)
    recalculateClientSheet(clientSpreadsheet.getId());
    
    Logger.log(`📄 עודכן גליון לקוח: ${clientName} (${minutesDelta > 0 ? '+' : ''}${minutesDelta} דק')`);
    
  } catch (error) {
    Logger.log('⚠️ שגיאה בעדכון דקות גליון לקוח: ' + error.toString());
  }
}

// ===== דוחות ואנליטיקה =====

/**
 * קבלת סיכום שעתון יומי לעובד
 * @param {string} employee - שם העובד
 * @param {string} date - תאריך (אופציונלי, ברירת מחדל היום)
 * @returns {Object} סיכום היום
 */
function getDailySummary(employee, date = null) {
  try {
    const targetDate = date ? new Date(date) : new Date();
    const dateString = targetDate.toDateString();
    
    Logger.log(`📊 מכין סיכום יומי עבור ${employee} ליום ${dateString}`);
    
    const employeeSpreadsheet = getEmployeeSpreadsheet(employee);
    const timesheetSheet = employeeSpreadsheet.getSheetByName(CONFIG.TAB_TIMESHEET);
    
    if (!timesheetSheet || timesheetSheet.getLastRow() <= 3) {
      return createResponse(true, 'אין נתונים ליום זה', { 
        summary: {
          totalMinutes: 0,
          totalHours: 0,
          entriesCount: 0,
          clientsCount: 0,
          entries: []
        }
      });
    }
    
    const data = timesheetSheet.getDataRange().getValues();
    const dayEntries = [];
    let totalMinutes = 0;
    const clientsSet = new Set();
    
    // סינון רישומים של היום
    for (let i = 3; i < data.length; i++) {
      if (data[i][0]) {
        const entryDate = new Date(data[i][1]);
        
        if (entryDate.toDateString() === dateString) {
          const entry = createTimesheetEntryObject(data[i]);
          dayEntries.push(entry);
          totalMinutes += entry.minutes;
          
          if (entry.clientName) {
            clientsSet.add(entry.clientName);
          }
        }
      }
    }
    
    const summary = {
      date: dateString,
      totalMinutes: totalMinutes,
      totalHours: Math.round((totalMinutes / 60) * 100) / 100,
      entriesCount: dayEntries.length,
      clientsCount: clientsSet.size,
      entries: dayEntries.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt)),
      clientsList: Array.from(clientsSet)
    };
    
    Logger.log(`✅ סיכום יומי: ${summary.totalHours} שעות, ${summary.entriesCount} רישומים`);
    return createResponse(true, 'סיכום יומי נוצר', { summary });
    
  } catch (error) {
    Logger.log('❌ שגיאה ביצירת סיכום יומי: ' + error.toString());
    return createResponse(false, error.toString());
  }
}

/**
 * קבלת סיכום שעתון חודשי לעובד
 * @param {string} employee - שם העובד
 * @param {number} month - חודש (1-12, אופציונלי)
 * @param {number} year - שנה (אופציונלי)
 * @returns {Object} סיכום החודש
 */
function getMonthlySummary(employee, month = null, year = null) {
  try {
    const now = new Date();
    const targetMonth = month || (now.getMonth() + 1);
    const targetYear = year || now.getFullYear();
    
    Logger.log(`📊 מכין סיכום חודשי עבור ${employee} ל-${targetMonth}/${targetYear}`);
    
    const employeeSpreadsheet = getEmployeeSpreadsheet(employee);
    const timesheetSheet = employeeSpreadsheet.getSheetByName(CONFIG.TAB_TIMESHEET);
    
    if (!timesheetSheet || timesheetSheet.getLastRow() <= 3) {
      return createResponse(true, 'אין נתונים לחודש זה', { 
        summary: createEmptyMonthlySummary(targetMonth, targetYear)
      });
    }
    
    const data = timesheetSheet.getDataRange().getValues();
    const monthEntries = [];
    const dailyTotals = {};
    const clientTotals = {};
    let totalMinutes = 0;
    
    // עיבוד רישומים של החודש
    for (let i = 3; i < data.length; i++) {
      if (data[i][0]) {
        const entryDate = new Date(data[i][1]);
        
        if (entryDate.getMonth() + 1 === targetMonth && entryDate.getFullYear() === targetYear) {
          const entry = createTimesheetEntryObject(data[i]);
          monthEntries.push(entry);
          totalMinutes += entry.minutes;
          
          // סיכום יומי
          const dayKey = entryDate.toDateString();
          dailyTotals[dayKey] = (dailyTotals[dayKey] || 0) + entry.minutes;
          
          // סיכום לפי לקוח
          if (entry.clientName) {
            clientTotals[entry.clientName] = (clientTotals[entry.clientName] || 0) + entry.minutes;
          }
        }
      }
    }
    
    const summary = {
      month: targetMonth,
      year: targetYear,
      totalMinutes: totalMinutes,
      totalHours: Math.round((totalMinutes / 60) * 100) / 100,
      entriesCount: monthEntries.length,
      workingDays: Object.keys(dailyTotals).length,
      avgHoursPerDay: Object.keys(dailyTotals).length > 0 ? 
        Math.round((totalMinutes / 60 / Object.keys(dailyTotals).length) * 100) / 100 : 0,
      dailyBreakdown: Object.entries(dailyTotals).map(([date, minutes]) => ({
        date: date,
        minutes: minutes,
        hours: Math.round((minutes / 60) * 100) / 100
      })),
      clientBreakdown: Object.entries(clientTotals).map(([client, minutes]) => ({
        client: client,
        minutes: minutes,
        hours: Math.round((minutes / 60) * 100) / 100,
        percentage: Math.round((minutes / totalMinutes) * 100)
      })).sort((a, b) => b.minutes - a.minutes)
    };
    
    Logger.log(`✅ סיכום חודשי: ${summary.totalHours} שעות, ${summary.entriesCount} רישומים`);
    return createResponse(true, 'סיכום חודשי נוצר', { summary });
    
  } catch (error) {
    Logger.log('❌ שגיאה ביצירת סיכום חודשי: ' + error.toString());
    return createResponse(false, error.toString());
  }
}

/**
 * יצירת סיכום חודשי ריק
 * @param {number} month - החודש
 * @param {number} year - השנה
 * @returns {Object} סיכום חודשי ריק
 */
function createEmptyMonthlySummary(month, year) {
  return {
    month: month,
    year: year,
    totalMinutes: 0,
    totalHours: 0,
    entriesCount: 0,
    workingDays: 0,
    avgHoursPerDay: 0,
    dailyBreakdown: [],
    clientBreakdown: []
  };
}

// ===== ולידציה ובדיקות =====

/**
 * וולידציה של נתוני רישום שעתון
 * @param {Object} entry - נתוני הרישום
 * @returns {Object} תוצאת הוולידציה
 */
function validateTimesheetEntry(entry) {
  const errors = [];
  
  // בדיקת תאריך
  if (!entry.date) {
    errors.push('חסר תאריך');
  } else {
    const entryDate = new Date(entry.date);
    if (isNaN(entryDate.getTime())) {
      errors.push('תאריך לא תקין');
    }
  }
  
  // בדיקת תיאור פעולה
  if (!entry.action || entry.action.trim().length < 3) {
    errors.push('תיאור פעולה חייב להכיל לפחות 3 תווים');
  }
  
  // בדיקת דקות
  if (!entry.minutes || entry.minutes < VALIDATION.MINUTES.MIN || entry.minutes > VALIDATION.MINUTES.MAX) {
    errors.push(`דקות חייבות להיות בין ${VALIDATION.MINUTES.MIN} ל-${VALIDATION.MINUTES.MAX}`);
  }
  
  // בדיקת שם לקוח
  if (!entry.clientName || entry.clientName.trim().length < 2) {
    errors.push('חסר שם לקוח או קצר מדי');
  }
  
  return {
    isValid: errors.length === 0,
    errors: errors
  };
}





/**
 * @fileoverview פונקציות עזר כלליות למערכת ניהול משרד עורכי דין
 * מכיל וולידציה, פורמטים, טיפול בשגיאות, לוגים ועזרים כלליים
 * @version 2.0.0
 * @since 2025-01-01
 * @requires config.js
 */

// ===== פונקציות וולידציה =====

/**
 * וולידציה של שם לקוח
 * @param {string} name - שם הלקוח לבדיקה
 * @returns {Object} תוצאת הוולידציה
 */
function validateClientName(name) {
  const errors = [];
  
  if (!name || typeof name !== 'string') {
    errors.push('שם לקוח הוא שדה חובה');
  } else {
    const trimmedName = name.trim();
    
    if (trimmedName.length < VALIDATION.CLIENT_NAME.MIN_LENGTH) {
      errors.push(`שם לקוח קצר מדי (מינימום ${VALIDATION.CLIENT_NAME.MIN_LENGTH} תווים)`);
    }
    
    if (trimmedName.length > VALIDATION.CLIENT_NAME.MAX_LENGTH) {
      errors.push(`שם לקוח ארוך מדי (מקסימום ${VALIDATION.CLIENT_NAME.MAX_LENGTH} תווים)`);
    }
    
    if (!VALIDATION.CLIENT_NAME.PATTERN.test(trimmedName)) {
      errors.push('שם לקוח מכיל תווים לא תקינים');
    }
  }
  
  return {
    isValid: errors.length === 0,
    errors: errors,
    cleanValue: name ? name.trim() : ''
  };
}

/**
 * וולידציה של מספר תיק
 * @param {string} fileNumber - מספר התיק לבדיקה
 * @returns {Object} תוצאת הוולידציה
 */
function validateFileNumber(fileNumber) {
  const errors = [];
  
  if (!fileNumber || typeof fileNumber !== 'string') {
    errors.push('מספר תיק הוא שדה חובה');
  } else {
    const trimmedNumber = fileNumber.trim();
    
    if (trimmedNumber.length < VALIDATION.FILE_NUMBER.MIN_LENGTH) {
      errors.push(`מספר תיק קצר מדי (מינימום ${VALIDATION.FILE_NUMBER.MIN_LENGTH} תווים)`);
    }
    
    if (trimmedNumber.length > VALIDATION.FILE_NUMBER.MAX_LENGTH) {
      errors.push(`מספר תיק ארוך מדי (מקסימום ${VALIDATION.FILE_NUMBER.MAX_LENGTH} תווים)`);
    }
    
    if (!VALIDATION.FILE_NUMBER.PATTERN.test(trimmedNumber)) {
      errors.push('מספר תיק חייב להיות בפורמט YYYY/XXX');
    }
  }
  
  return {
    isValid: errors.length === 0,
    errors: errors,
    cleanValue: fileNumber ? fileNumber.trim() : ''
  };
}

/**
 * וולידציה של כמות שעות
 * @param {number} hours - כמות השעות לבדיקה
 * @returns {Object} תוצאת הוולידציה
 */
function validateHours(hours) {
  const errors = [];
  const numHours = Number(hours);
  
  if (isNaN(numHours)) {
    errors.push('כמות שעות חייבת להיות מספר');
  } else {
    if (numHours < VALIDATION.HOURS.MIN) {
      errors.push(`כמות שעות חייבת להיות לפחות ${VALIDATION.HOURS.MIN}`);
    }
    
    if (numHours > VALIDATION.HOURS.MAX) {
      errors.push(`כמות שעות לא יכולה לעלות על ${VALIDATION.HOURS.MAX}`);
    }
  }
  
  return {
    isValid: errors.length === 0,
    errors: errors,
    cleanValue: isNaN(numHours) ? 0 : numHours
  };
}

/**
 * וולידציה של כמות דקות
 * @param {number} minutes - כמות הדקות לבדיקה
 * @returns {Object} תוצאת הוולידציה
 */
function validateMinutes(minutes) {
  const errors = [];
  const numMinutes = Number(minutes);
  
  if (isNaN(numMinutes)) {
    errors.push('כמות דקות חייבת להיות מספר');
  } else {
    if (numMinutes < VALIDATION.MINUTES.MIN) {
      errors.push(`כמות דקות חייבת להיות לפחות ${VALIDATION.MINUTES.MIN}`);
    }
    
    if (numMinutes > VALIDATION.MINUTES.MAX) {
      errors.push(`כמות דקות לא יכולה לעלות על ${VALIDATION.MINUTES.MAX}`);
    }
  }
  
  return {
    isValid: errors.length === 0,
    errors: errors,
    cleanValue: isNaN(numMinutes) ? 0 : numMinutes
  };
}

/**
 * וולידציה של תאריך
 * @param {*} date - התאריך לבדיקה
 * @returns {Object} תוצאת הוולידציה
 */
function validateDate(date) {
  const errors = [];
  let cleanDate = null;
  
  if (!date) {
    errors.push('תאריך הוא שדה חובה');
  } else {
    if (date instanceof Date) {
      if (isNaN(date.getTime())) {
        errors.push('תאריך לא תקין');
      } else {
        cleanDate = date;
      }
    } else if (typeof date === 'string') {
      const parsedDate = new Date(date);
      if (isNaN(parsedDate.getTime())) {
        errors.push('פורמט תאריך לא תקין');
      } else {
        cleanDate = parsedDate;
      }
    } else {
      errors.push('תאריך חייב להיות תאריך או מחרוזת');
    }
    
    // בדיקת תאריך עתידי מדי
    if (cleanDate && cleanDate > new Date(Date.now() + 365 * 24 * 60 * 60 * 1000)) {
      errors.push('תאריך לא יכול להיות יותר משנה בעתיד');
    }
  }
  
  return {
    isValid: errors.length === 0,
    errors: errors,
    cleanValue: cleanDate
  };
}

// ===== פונקציות פורמט =====

/**
 * פורמט תאריך לתצוגה בעברית
 * @param {Date|string} date - התאריך לפורמט
 * @param {string} format - סוג הפורמט (display/input/excel)
 * @returns {string} תאריך מפורמט
 */
function formatDate(date, format = 'display') {
  try {
    let dateObj = date;
    
    if (typeof date === 'string') {
      dateObj = new Date(date);
    }
    
    if (!dateObj || isNaN(dateObj.getTime())) {
      return '';
    }
    
    switch (format) {
      case 'display':
        return dateObj.toLocaleDateString(FORMATS.DATE.HEBREW);
        
      case 'input':
        return dateObj.toISOString().split('T')[0];
        
      case 'excel':
        const day = dateObj.getDate().toString().padStart(2, '0');
        const month = (dateObj.getMonth() + 1).toString();
        const year = dateObj.getFullYear().toString().substr(-2);
        return `${day}.${month}.${year}`;
        
      default:
        return dateObj.toLocaleDateString(FORMATS.DATE.HEBREW);
    }
  } catch (error) {
    Logger.log('❌ שגיאה בפורמט תאריך: ' + error.toString());
    return '';
  }
}

/**
 * פורמט זמן לתצוגה בעברית
 * @param {Date|string} time - הזמן לפורמט
 * @param {boolean} includeSeconds - האם לכלול שניות
 * @returns {string} זמן מפורמט
 */
function formatTime(time, includeSeconds = false) {
  try {
    let timeObj = time;
    
    if (typeof time === 'string') {
      timeObj = new Date(time);
    }
    
    if (!timeObj || isNaN(timeObj.getTime())) {
      return '';
    }
    
    const format = includeSeconds ? FORMATS.TIME.FULL : FORMATS.TIME.DISPLAY;
    return timeObj.toLocaleTimeString(FORMATS.TIME.HEBREW, {
      hour: '2-digit',
      minute: '2-digit',
      second: includeSeconds ? '2-digit' : undefined,
      hour12: false
    });
  } catch (error) {
    Logger.log('❌ שגיאה בפורמט זמן: ' + error.toString());
    return '';
  }
}

/**
 * פורמט מספר לתצוגה
 * @param {number} number - המספר לפורמט
 * @param {number} decimals - מספר ספרות אחרי הנקודה
 * @returns {string} מספר מפורמט
 */
function formatNumber(number, decimals = 2) {
  try {
    if (isNaN(number)) return '0';
    
    return Number(number).toLocaleString(FORMATS.DATE.HEBREW, {
      minimumFractionDigits: decimals,
      maximumFractionDigits: decimals
    });
  } catch (error) {
    Logger.log('❌ שגיאה בפורמט מספר: ' + error.toString());
    return '0';
  }
}

/**
 * פורמט מטבע לתצוגה
 * @param {number} amount - הסכום
 * @returns {string} סכום מפורמט במטבע
 */
function formatCurrency(amount) {
  try {
    if (isNaN(amount)) return `0 ${FORMATS.CURRENCY.SYMBOL}`;
    
    return Number(amount).toLocaleString(FORMATS.CURRENCY.LOCALE, {
      style: 'currency',
      currency: 'ILS',
      currencyDisplay: 'symbol'
    });
  } catch (error) {
    Logger.log('❌ שגיאה בפורמט מטבע: ' + error.toString());
    return `0 ${FORMATS.CURRENCY.SYMBOL}`;
  }
}

/**
 * המרת דקות לפורמט שעות:דקות
 * @param {number} minutes - מספר הדקות
 * @returns {string} פורמט שעות:דקות
 */
function formatMinutesToHours(minutes) {
  try {
    if (isNaN(minutes) || minutes < 0) return '0:00';
    
    const hours = Math.floor(minutes / 60);
    const remainingMinutes = minutes % 60;
    
    return `${hours}:${remainingMinutes.toString().padStart(2, '0')}`;
  } catch (error) {
    Logger.log('❌ שגיאה בהמרת דקות לשעות: ' + error.toString());
    return '0:00';
  }
}

// ===== פונקציות JSON ומחרוזות =====

/**
 * ניסיון בטוח לפארסינג JSON
 * @param {string} jsonString - מחרוזת JSON
 * @returns {*} אובייקט מפורסר או null
 */
function tryParseJSON(jsonString) {
  try {
    if (!jsonString || typeof jsonString !== 'string') {
      return null;
    }
    
    return JSON.parse(jsonString);
  } catch (error) {
    Logger.log('⚠️ שגיאה בפארסינג JSON: ' + error.toString());
    return null;
  }
}

/**
 * המרה בטוחה לJSON
 * @param {*} object - האובייקט להמרה
 * @returns {string} מחרוזת JSON או מחרוזת ריקה
 */
function safeStringify(object) {
  try {
    return JSON.stringify(object);
  } catch (error) {
    Logger.log('⚠️ שגיאה בהמרה ל-JSON: ' + error.toString());
    return '';
  }
}

/**
 * ניקוי מחרוזת מתווים מיוחדים
 * @param {string} str - המחרוזת לניקוי
 * @returns {string} מחרוזת נקייה
 */
function sanitizeString(str) {
  if (!str || typeof str !== 'string') return '';
  
  return str
    .trim()
    .replace(/[\x00-\x1F\x7F]/g, '') // הסרת תווי בקרה
    .replace(/\s+/g, ' ') // הפיכת רווחים מרובים לרווח יחיד
    .substring(0, 1000); // הגבלת אורך
}

/**
 * יצירת מזהה ייחודי
 * @param {string} prefix - קידומת למזהה
 * @returns {string} מזהה ייחודי
 */
function generateUniqueId(prefix = '') {
  const timestamp = Date.now();
  const random = Math.floor(Math.random() * 10000);
  return `${prefix}${timestamp}_${random}`;
}

// ===== פונקציות עבודה עם גליונות =====

/**
 * קבלה או יצירת תיקייה ב-Drive
 * @param {string} folderName - שם התיקייה
 * @param {GoogleAppsScript.Drive.Folder} parentFolder - תיקיית אב (אופציונלי)
 * @returns {GoogleAppsScript.Drive.Folder} התיקייה
 */
function getOrCreateFolder(folderName, parentFolder = null) {
  try {
    const parent = parentFolder || DriveApp.getRootFolder();
    const folders = parent.getFoldersByName(folderName);
    
    if (folders.hasNext()) {
      return folders.next();
    } else {
      Logger.log('📁 יוצר תיקייה חדשה: ' + folderName);
      return parent.createFolder(folderName);
    }
  } catch (error) {
    Logger.log('❌ שגיאה ביצירת תיקייה: ' + error.toString());
    throw error;
  }
}

/**
 * קבלה או יצירת גליון במסמך
 * @param {GoogleAppsScript.Spreadsheet.Spreadsheet|string} spreadsheetOrName - מסמך או שם
 * @param {string} sheetName - שם הגליון (אופציונלי)
 * @returns {GoogleAppsScript.Spreadsheet.Sheet} הגליון
 */
function getOrCreateSheet(spreadsheetOrName, sheetName = null) {
  try {
    let ss, name;
    
    if (typeof spreadsheetOrName === 'string') {
      // זה שם של גליון במסמך הנוכחי
      ss = SpreadsheetApp.getActiveSpreadsheet();
      name = spreadsheetOrName;
    } else {
      // זה אובייקט spreadsheet
      ss = spreadsheetOrName;
      name = sheetName;
    }
    
    let sheet = ss.getSheetByName(name);
    
    if (!sheet) {
      sheet = ss.insertSheet(name);
      Logger.log('✨ נוצר גליון: ' + name);
    }
    
    return sheet;
  } catch (error) {
    Logger.log('❌ שגיאה בקבלת/יצירת גליון: ' + error.toString());
    throw error;
  }
}

/**
 * חיפוש שורה בגליון לפי ערך בעמודה ספציפית
 * @param {GoogleAppsScript.Spreadsheet.Sheet} sheet - הגליון לחיפוש
 * @param {*} searchValue - הערך לחיפוש
 * @param {number} searchColumn - העמודה לחיפוש (1-based)
 * @param {number} startRow - שורת התחלה (אופציונלי)
 * @returns {number|null} מספר השורה או null
 */
function findRowByValue(sheet, searchValue, searchColumn, startRow = 1) {
  try {
    const data = sheet.getDataRange().getValues();
    
    for (let i = startRow - 1; i < data.length; i++) {
      if (data[i][searchColumn - 1] === searchValue) {
        return i + 1; // החזרת מספר שורה 1-based
      }
    }
    
    return null;
  } catch (error) {
    Logger.log('❌ שגיאה בחיפוש שורה: ' + error.toString());
    return null;
  }
}

/**
 * העתקת טווח בין גליונות
 * @param {GoogleAppsScript.Spreadsheet.Sheet} sourceSheet - גליון מקור
 * @param {string} sourceRange - טווח מקור
 * @param {GoogleAppsScript.Spreadsheet.Sheet} targetSheet - גליון יעד
 * @param {string} targetRange - טווח יעד
 */
function copyRange(sourceSheet, sourceRange, targetSheet, targetRange) {
  try {
    const source = sourceSheet.getRange(sourceRange);
    const target = targetSheet.getRange(targetRange);
    
    source.copyTo(target, SpreadsheetApp.CopyPasteType.PASTE_NORMAL, false);
    
    Logger.log(`📋 הועתק טווח מ-${sourceRange} ל-${targetRange}`);
  } catch (error) {
    Logger.log('❌ שגיאה בהעתקת טווח: ' + error.toString());
    throw error;
  }
}

// ===== פונקציות הגדרת גליונות מאסטר =====

/**
 * הגדרת גליון מאסטר לקוחות
 * @returns {GoogleAppsScript.Spreadsheet.Sheet} גליון מאסטר לקוחות
 */
function setupMasterClients() {
  const sheet = getOrCreateSheet(CONFIG.MASTER_CLIENTS);
  
  if (sheet.getLastRow() === 0) {
    // כותרת ראשית
    sheet.getRange(1, 1).setValue('📋 מאסטר לקוחות');
    sheet.getRange(1, 1).setFontSize(20).setFontWeight('bold')
      .setBackground(COLORS.PRIMARY).setFontColor('white');
    sheet.getRange(1, 1, 1, 12).merge();
    
    // כותרות עמודות
    const headers = [
      'ID', 'שם לקוח', 'מספר תיק', 'שם מלא', 'תיאור',
      'סוג', 'סה"כ שעות', 'שעות נותרות', 'שלבים',
      'תאריך יצירה', 'נוצר על ידי', 'קישור לגליון'
    ];
    
    sheet.getRange(3, 1, 1, headers.length).setValues([headers]);
    sheet.getRange(3, 1, 1, headers.length)
      .setFontWeight('bold')
      .setBackground(COLORS.PRIMARY)
      .setFontColor('white');
    
    sheet.setFrozenRows(3);
    
    // עיצוב עמודות
    const widths = [80, 150, 100, 250, 200, 100, 100, 100, 200, 150, 150, 300];
    for (let i = 0; i < widths.length; i++) {
      sheet.setColumnWidth(i + 1, widths[i]);
    }
    
    Logger.log('✅ הוגדר גליון מאסטר לקוחות');
  }
  
  return sheet;
}

/**
 * הגדרת גליון מאסטר עובדים
 * @returns {GoogleAppsScript.Spreadsheet.Sheet} גליון מאסטר עובדים
 */
function setupMasterEmployees() {
  const sheet = getOrCreateSheet(CONFIG.MASTER_EMPLOYEES);
  
  if (sheet.getLastRow() === 0) {
    // כותרת ראשית
    sheet.getRange(1, 1).setValue('👥 מאסטר עובדים');
    sheet.getRange(1, 1).setFontSize(20).setFontWeight('bold')
      .setBackground(COLORS.SUCCESS).setFontColor('white');
    sheet.getRange(1, 1, 1, 5).merge();
    
    // כותרות עמודות
    const headers = [
      'ID', 'שם עובד', 'תאריך יצירה', 'קישור לגליון', 'פעילות אחרונה'
    ];
    
    sheet.getRange(3, 1, 1, headers.length).setValues([headers]);
    sheet.getRange(3, 1, 1, headers.length)
      .setFontWeight('bold')
      .setBackground(COLORS.SUCCESS)
      .setFontColor('white');
    
    sheet.setFrozenRows(3);
    
    // עיצוב עמודות
    const widths = [100, 150, 150, 300, 150];
    for (let i = 0; i < widths.length; i++) {
      sheet.setColumnWidth(i + 1, widths[i]);
    }
    
    Logger.log('✅ הוגדר גליון מאסטר עובדים');
  }
  
  return sheet;
}

/**
 * הגדרת גליון מאסטר עדכונים
 * @returns {GoogleAppsScript.Spreadsheet.Sheet} גליון מאסטר עדכונים
 */
function setupMasterUpdates() {
  const sheet = getOrCreateSheet(CONFIG.MASTER_UPDATES);
  
  if (sheet.getLastRow() === 0) {
    // כותרת ראשית
    sheet.getRange(1, 1).setValue('📊 מאסטר עדכונים');
    sheet.getRange(1, 1).setFontSize(20).setFontWeight('bold')
      .setBackground(COLORS.WARNING).setFontColor('white');
    sheet.getRange(1, 1, 1, 5).merge();
    
    // כותרות עמודות
    const headers = [
      'תאריך ושעה', 'עובד', 'סוג פעולה', 'תיאור', 'שעה'
    ];
    
    sheet.getRange(3, 1, 1, headers.length).setValues([headers]);
    sheet.getRange(3, 1, 1, headers.length)
      .setFontWeight('bold')
      .setBackground(COLORS.WARNING)
      .setFontColor('white');
    
    sheet.setFrozenRows(3);
    
    // עיצוב עמודות
    const widths = [150, 120, 150, 400, 100];
    for (let i = 0; i < widths.length; i++) {
      sheet.setColumnWidth(i + 1, widths[i]);
    }
    
    Logger.log('✅ הוגדר גליון מאסטר עדכונים');
  }
  
  return sheet;
}

/**
 * הגדרת גליון מאסטר כניסות
 * @returns {GoogleAppsScript.Spreadsheet.Sheet} גליון מאסטר כניסות
 */
function setupMasterLogins() {
  const sheet = getOrCreateSheet(CONFIG.MASTER_LOGINS);
  
  if (sheet.getLastRow() === 0) {
    // כותרת ראשית
    sheet.getRange(1, 1).setValue('🔑 מאסטר כניסות');
    sheet.getRange(1, 1).setFontSize(20).setFontWeight('bold')
      .setBackground('#10b981').setFontColor('white');
    sheet.getRange(1, 1, 1, 6).merge();
    
    // כותרות עמודות
    const headers = [
      'מזהה כניסה', 'עובד', 'תאריך כניסה', 'שעת כניסה', 
      'כתובת IP', 'מקום כניסה'
    ];
    
    sheet.getRange(3, 1, 1, headers.length).setValues([headers]);
    sheet.getRange(3, 1, 1, headers.length)
      .setFontWeight('bold')
      .setBackground('#10b981')
      .setFontColor('white');
    
    sheet.setFrozenRows(3);
    
    // עיצוב עמודות
    const widths = [120, 120, 120, 100, 150, 200];
    for (let i = 0; i < widths.length; i++) {
      sheet.setColumnWidth(i + 1, widths[i]);
    }
    
    Logger.log('✅ הוגדר גליון מאסטר כניסות');
  }
  
  return sheet;
}

// ===== פונקציות לוגים ועדכונים =====

/**
 * רישום עדכון במאסטר עדכונים
 * @param {string} employee - שם העובד
 * @param {string} actionType - סוג הפעולה
 * @param {string} description - תיאור הפעולה
 */
function logUpdate(employee, actionType, description) {
  try {
    const sheet = setupMasterUpdates();
    
    const newRow = [
      new Date().toLocaleString('he-IL'),
      employee,
      actionType,
      description,
      new Date().toLocaleTimeString('he-IL')
    ];
    
    sheet.appendRow(newRow);
    
    // צביעת השורה לפי סוג הפעולה
    const lastRow = sheet.getLastRow();
    let color = COLORS.LIGHT;
    
    if (actionType.includes('משימה')) color = '#fef3c7';
    else if (actionType.includes('לקוח')) color = '#dbeafe';
    else if (actionType.includes('שעתון')) color = '#d1fae5';
    else if (actionType.includes('כניסה')) color = '#f3e8ff';
    
    sheet.getRange(lastRow, 1, 1, 5).setBackground(color);
    SpreadsheetApp.flush();
    
    Logger.log(`📝 רושם עדכון: ${employee} - ${actionType}`);
    
  } catch (error) {
    Logger.log('⚠️ שגיאה בעדכון לוג: ' + error.toString());
  }
}

/**
 * רישום שגיאה מפורטת
 * @param {string} functionName - שם הפונקציה
 * @param {Error} error - אובייקט השגיאה
 * @param {Object} context - קונטקסט נוסף (אופציונלי)
 */
function logError(functionName, error, context = {}) {
  const errorMessage = `❌ ${functionName}: ${error.toString()}`;
  const contextString = Object.keys(context).length > 0 ? 
    ` | Context: ${safeStringify(context)}` : '';
  
  Logger.log(errorMessage + contextString);
  
  // אפשר להוסיף כאן שליחת הודעות לצוות הטכני
}

/**
 * רישום מידע כללי עם אמוג'י
 * @param {string} message - ההודעה
 * @param {string} emoji - האמוג'י (אופציונלי)
 * @param {Object} data - נתונים נוספים (אופציונלי)
 */
function logInfo(message, emoji = 'ℹ️', data = null) {
  let logMessage = `${emoji} ${message}`;
  
  if (data) {
    logMessage += ` | Data: ${safeStringify(data)}`;
  }
  
  Logger.log(logMessage);
}

// ===== פונקציות ביצועים ומטמון =====

/**
 * שינה קצרה למניעת timeout
 * @param {number} milliseconds - זמן המתנה במילישניות
 */
function safeSleep(milliseconds = 100) {
  if (milliseconds > 0 && milliseconds <= 5000) {
    Utilities.sleep(milliseconds);
  }
}

/**
 * ביצוע פעולה עם retry אוטומטי
 * @param {Function} operation - הפעולה לביצוע
 * @param {number} maxRetries - מספר ניסיונות מקסימלי
 * @param {number} delay - זמן המתנה בין ניסיונות
 * @returns {*} תוצאת הפעולה
 */
function retryOperation(operation, maxRetries = PERFORMANCE.MAX_RETRY_ATTEMPTS, delay = 1000) {
  let lastError;
  
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      return operation();
    } catch (error) {
      lastError = error;
      
      if (attempt < maxRetries) {
        Logger.log(`⚠️ ניסיון ${attempt} נכשל, מנסה שוב בעוד ${delay}ms: ${error.toString()}`);
        safeSleep(delay);
        delay *= 1.5; // הגדלת זמן המתנה בכל ניסיון
      }
    }
  }
  
  throw new Error(`פעולה נכשלה אחרי ${maxRetries} ניסיונות: ${lastError.toString()}`);
}

/**
 * עיבוד מערך בבאצ'ים למניעת timeout
 * @param {Array} array - המערך לעיבוד
 * @param {Function} processor - פונקציית העיבוד
 * @param {number} batchSize - גודל הבאצ'
 * @returns {Array} תוצאות העיבוד
 */
function processBatches(array, processor, batchSize = PERFORMANCE.MAX_BATCH_SIZE) {
  const results = [];
  
  for (let i = 0; i < array.length; i += batchSize) {
    const batch = array.slice(i, i + batchSize);
    const batchResults = batch.map(processor);
    results.push(...batchResults);
    
    // הפסקה קצרה בין באצ'ים
    if (i + batchSize < array.length) {
      safeSleep(50);
    }
  }
  
  return results;
}

// ===== פונקציות בדיקות ואימות =====

/**
 * בדיקת קיום עובד במערכת
 * @param {string} employeeName - שם העובד
 * @returns {boolean} האם העובד קיים
 */
function checkEmployeeExists(employeeName) {
  try {
    const masterSheet = setupMasterEmployees();
    const data = masterSheet.getDataRange().getValues();
    
    for (let i = 3; i < data.length; i++) {
      if (data[i][1] === employeeName) {
        return true;
      }
    }
    
    return false;
  } catch (error) {
    Logger.log('❌ שגיאה בבדיקת עובד: ' + error.toString());
    return false;
  }
}

/**
 * וידוא קיום עובד במערכת (יוצר אם לא קיים)
 * @param {string} employeeName - שם העובד
 * @returns {string} URL גליון העובד
 */
function ensureEmployeeExists(employeeName) {
  const lock = LockService.getScriptLock();
  
  try {
    lock.waitLock(5000);
    
    const masterSheet = setupMasterEmployees();
    const data = masterSheet.getDataRange().getValues();
    
    // בדיקה אם העובד קיים
    for (let i = 3; i < data.length; i++) {
      if (data[i][1] === employeeName) {
        // עדכון תאריך פעילות אחרונה
        masterSheet.getRange(i + 1, 5).setValue(new Date().toLocaleString('he-IL'));
        SpreadsheetApp.flush();
        return data[i][3]; // URL של הגליון
      }
    }
    
    // יצירת עובד חדש
    Logger.log('👤 יוצר עובד חדש: ' + employeeName);
    const employeeSheetUrl = createEmployeeSpreadsheetFixed(employeeName);
    
    const newRow = [
      Date.now(),
      employeeName,
      new Date().toLocaleString('he-IL'),
      employeeSheetUrl,
      new Date().toLocaleString('he-IL')
    ];
    
    masterSheet.appendRow(newRow);
    SpreadsheetApp.flush();
    
    return employeeSheetUrl;
    
  } catch (error) {
    Logger.log('❌ שגיאה בעובד: ' + error.toString());
    throw error;
  } finally {
    lock.releaseLock();
  }
}

/**
 * יצירת גליון עובד חדש (גרסה מתוקנת)
 * @param {string} employeeName - שם העובד
 * @returns {string} URL הגליון החדש
 */
function createEmployeeSpreadsheetFixed(employeeName) {
  try {
    // יצירת גליון חדש לעובד
    const spreadsheetName = `עובד - ${employeeName}`;
    const newSpreadsheet = SpreadsheetApp.create(spreadsheetName);
    
    // הוספת הגליון לתיקייה
    const folder = getOrCreateFolder(CONFIG.EMPLOYEES_FOLDER);
    const file = DriveApp.getFileById(newSpreadsheet.getId());
    folder.addFile(file);
    DriveApp.getRootFolder().removeFile(file);
    
    // יצירת טאב שעתון (נשאר זהה)
    const timesheetSheet = newSpreadsheet.getActiveSheet();
    timesheetSheet.setName(CONFIG.TAB_TIMESHEET);
    setupTimesheetTab(timesheetSheet, employeeName);
    
    // יצירת טאבים חדשים מתוקנים
    const tasksSheet = newSpreadsheet.insertSheet(CONFIG.TAB_TASKS);
    const historySheet = newSpreadsheet.insertSheet(CONFIG.TAB_HISTORY);
    const changesSheet = newSpreadsheet.insertSheet(CONFIG.TAB_CHANGES);
    
    setupFixedTasksSheetHeaders(tasksSheet);
    setupFixedHistorySheetHeaders(historySheet);
    setupFixedChangesSheetHeaders(changesSheet);
    
    Logger.log('✅ נוצר גליון עובד מתוקן: ' + spreadsheetName);
    return newSpreadsheet.getUrl();
    
  } catch (error) {
    Logger.log('❌ שגיאה ביצירת גליון עובד: ' + error.toString());
    throw error;
  }
}

/**
 * הגדרת טאב שעתון בגליון עובד
 * @param {GoogleAppsScript.Spreadsheet.Sheet} sheet - הגליון
 * @param {string} employeeName - שם העובד
 */
function setupTimesheetTab(sheet, employeeName) {
  // כותרת
  sheet.getRange(1, 1).setValue(`⏰ שעתון - ${employeeName}`);
  sheet.getRange(1, 1).setFontSize(18).setFontWeight('bold')
    .setBackground(COLORS.SUCCESS).setFontColor('white');
  sheet.getRange(1, 1, 1, 9).merge();
  
  // כותרות טבלה
  const headers = [
    'ID', 'תאריך', 'פעולה', 'עו"ד', 'דקות',
    'לקוח', 'מס\' תיק', 'הערות', 'נוצר ב'
  ];
  
  sheet.getRange(3, 1, 1, headers.length).setValues([headers]);
  sheet.getRange(3, 1, 1, headers.length)
    .setFontWeight('bold')
    .setBackground(COLORS.SUCCESS)
    .setFontColor('white');
  
  sheet.setFrozenRows(3);
  
  // עיצוב עמודות
  const widths = [80, 100, 300, 100, 80, 200, 100, 200, 150];
  for (let i = 0; i < widths.length; i++) {
    sheet.setColumnWidth(i + 1, widths[i]);
  }
}

/**
 * קבלת גליון עובד
 * @param {string} employeeName - שם העובד
 * @returns {GoogleAppsScript.Spreadsheet.Spreadsheet} גליון העובד
 */
function getEmployeeSpreadsheet(employeeName) {
  const masterSheet = setupMasterEmployees();
  const data = masterSheet.getDataRange().getValues();
  
  for (let i = 3; i < data.length; i++) {
    if (data[i][1] === employeeName) {
      const url = data[i][3];
      return SpreadsheetApp.openByUrl(url);
    }
  }
  
  throw new Error('לא נמצא גליון לעובד: ' + employeeName);
}

// ===== פונקציות עזר נוספות =====

/**
 * קבלת מספר תיק הבא באופן אוטומטי
 * @returns {string} מספר תיק חדש בפורמט YYYY/XXX
 */
function getNextFileNumber() {
  try {
    const currentYear = new Date().getFullYear();
    const masterSheet = setupMasterClients();
    
    if (masterSheet.getLastRow() < 4) {
      return `${currentYear}/001`;
    }
    
    const data = masterSheet.getDataRange().getValues();
    let maxNumber = 0;
    
    // חיפוש המספר הגבוה ביותר השנה
    for (let i = 3; i < data.length; i++) {
      if (data[i][2]) { // עמודת מספר תיק
        const fileNumber = data[i][2].toString();
        const match = fileNumber.match(new RegExp(`^${currentYear}/(\\d+)$`));
        
        if (match) {
          const number = parseInt(match[1]);
          if (number > maxNumber) {
            maxNumber = number;
          }
        }
      }
    }
    
    const nextNumber = (maxNumber + 1).toString().padStart(3, '0');
    return `${currentYear}/${nextNumber}`;
    
  } catch (error) {
    Logger.log('❌ שגיאה בחישוב מספר תיק: ' + error.toString());
    return `${new Date().getFullYear()}/001`;
  }
}

/**
 * בדיקה האם מספר תיק קיים
 * @param {string} fileNumber - מספר התיק לבדיקה
 * @returns {boolean} האם מספר התיק קיים
 */
function checkFileNumberExists(fileNumber) {
  try {
    return isClientExists(fileNumber);
  } catch (error) {
    Logger.log('❌ שגיאה בבדיקת מספר תיק: ' + error.toString());
    return false;
  }
}

/**
 * בדיקה האם לקוח קיים לייבוא מאקסל
 * @param {string} fileNumber - מספר תיק
 * @param {string} fullName - שם מלא
 * @returns {Object} תוצאת הבדיקה
 */
function checkIfClientExists(fileNumber, fullName) {
  try {
    const masterSheet = setupMasterClients();
    const data = masterSheet.getDataRange().getValues();
    
    for (let i = 3; i < data.length; i++) {
      if (data[i][2] === fileNumber || data[i][3] === fullName) {
        return {
          exists: true,
          clientData: {
            id: data[i][0],
            clientName: data[i][1],
            fileNumber: data[i][2],
            fullName: data[i][3],
            type: data[i][5],
            totalHours: data[i][6],
            hoursRemaining: data[i][7],
            clientSheetUrl: data[i][11]
          }
        };
      }
    }
    
    return { exists: false };
    
  } catch (error) {
    Logger.log('❌ שגיאה בבדיקת לקוח קיים: ' + error.toString());
    return { exists: false };
  }
}

/**
 * יצירת לקוח חדש מדיאלוג
 * @param {Object} clientData - נתוני הלקוח החדש
 * @returns {Object} תוצאת היצירה
 */
function createNewClientFromDialog(clientData) {
  try {
    Logger.log('👤 יוצר לקוח חדש מהדיאלוג: ' + clientData.fullName);
    
    // בדיקות כפולות
    if (isClientExists(clientData.fileNumber)) {
      return {
        success: false,
        message: `❌ מספר תיק ${clientData.fileNumber} כבר קיים במערכת!`
      };
    }

    const fullNameToCheck = clientData.description ? 
      `${clientData.fullName} - ${clientData.description}` : 
      clientData.fullName;

    if (isClientNameExists(fullNameToCheck)) {
      return {
        success: false,
        message: `❌ לקוח "${fullNameToCheck}" כבר קיים במערכת!`
      };
    }

    // הכנת נתוני לקוח
    const client = {
      id: Date.now(),
      clientName: extractShortNameFromFull(clientData.fullName),
      fileNumber: clientData.fileNumber,
      fullName: fullNameToCheck,
      description: clientData.description || '',
      type: clientData.type,
      createdAt: new Date(),
      createdBy: getCurrentUserName() || 'מנהל מערכת'
    };

    if (clientData.type === 'hours') {
      client.totalHours = clientData.totalHours;
      client.hoursRemaining = clientData.totalHours;
      client.minutesRemaining = clientData.totalHours * 60;
    } else {
      client.stages = [
        { id: 1, name: 'שלב 1', completed: false },
        { id: 2, name: 'שלב 2', completed: false },
        { id: 3, name: 'שלב 3', completed: false }
      ];
    }

    // יצירת גליון אישי
    const clientSheetUrl = createClientSpreadsheetEnhanced(client);
    
    // הוספה למאסטר לקוחות
    const masterSheet = setupMasterClients();
    
    const newRow = [
      client.id,
      client.clientName,
      client.fileNumber,
      client.fullName,
      client.description,
      client.type,
      client.totalHours || 0,
      client.hoursRemaining || client.totalHours || 0,
      client.stages ? JSON.stringify(client.stages) : '',
      new Date().toLocaleString('he-IL'),
      client.createdBy,
      clientSheetUrl
    ];

    masterSheet.appendRow(newRow);
    SpreadsheetApp.flush();

    // רישום במאסטר עדכונים
    logUpdate(client.createdBy, 'יצירת לקוח', `נוצר לקוח חדש מהתפריט: ${client.fullName} (${client.fileNumber})`);

    Logger.log('✅ לקוח נוצר בהצלחה מהתפריט: ' + client.fullName);

    const typeText = client.type === 'hours' ? 
      `תוכנית ${client.totalHours} שעות` : 
      'פיקס (3 שלבים)';

    return {
      success: true,
      message: `✅ לקוח "${client.fullName}" נוצר בהצלחה!\n\n📁 מספר תיק: ${client.fileNumber}\n🏷️ סוג: ${typeText}\n📋 גליון אישי נוצר אוטומטית`,
      clientSheetUrl: clientSheetUrl,
      clientId: client.id
    };

  } catch (error) {
    Logger.log('❌ שגיאה ביצירת לקוח מהתפריט: ' + error.toString());
    return {
      success: false,
      message: `❌ שגיאה ביצירת הלקוח: ${error.toString()}`
    };
  }
}

/**
 * חילוץ שם קצר מהשם המלא
 * @param {string} fullName - שם מלא
 * @returns {string} שם קצר
 */
function extractShortNameFromFull(fullName) {
  const words = fullName.split(' ').filter(word => word.trim().length > 1);
  if (words.length >= 2) {
    return words.slice(-2).join(' '); // שתי מילים אחרונות
  }
  return fullName;
}

/**
 * קבלת שם המשתמש הנוכחי
 * @returns {string} שם המשתמש
 */
function getCurrentUserName() {
  try {
    const email = Session.getActiveUser().getEmail();
    return email ? email.split('@')[0] : 'מנהל מערכת';
  } catch (error) {
    return 'מנהל מערכת';
  }
}

/**
 * טעינת נתונים בטוחה עם Timeout
 * @returns {Object} כל הנתונים של המערכת
 */
function loadAllDataSafely() {
  const startTime = new Date().getTime();
  const TIMEOUT = 15000; // 15 שניות
  
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    
    // בדיקת timeout
    if (new Date().getTime() - startTime > TIMEOUT) {
      throw new Error('Timeout - הפעולה ארכה יותר מדי');
    }
    
    const clients = loadClientsOptimized();
    const budgetTasks = loadBudgetTasksOptimized();
    const timesheetEntries = loadTimesheetEntriesOptimized();
    
    return {
      clients: clients,
      budgetTasks: budgetTasks,
      timesheetEntries: timesheetEntries,
      loadTime: new Date().getTime() - startTime,
      timestamp: new Date().toISOString()
    };
    
  } catch (error) {
    Logger.log(`❌ שגיאה בטעינת נתונים: ${error.toString()}`);
    throw new Error(`כשל בטעינת נתונים: ${error.toString()}`);
  }
}

/**
 * פונקציה לבדיקת חיבור (ping)
 * @param {Object} data - נתוני הבקשה
 * @returns {Object} תגובת ping
 */
function pingServer(data) {
  try {
    const timestamp = new Date().toISOString();
    const serverInfo = {
      serverTime: timestamp,
      requestTime: data.timestamp,
      version: SYSTEM_INFO.VERSION,
      status: 'active'
    };
    
    Logger.log('🏓 Ping request received and responded');
    
    return {
      success: true,
      message: 'שרת פעיל ומגיב',
      data: serverInfo,
      timestamp: timestamp
    };
    
  } catch (error) {
    Logger.log('❌ Ping error: ' + error.toString());
    throw new Error('שגיאה בבדיקת חיבור: ' + error.toString());
  }
}

/**
 * טיפול בכניסת משתמש
 * @param {Object} data - נתוני הכניסה
 * @returns {Object} תוצאת הכניסה
 */
function handleUserLogin(data) {
  try {
    const employeeName = data.employee;
    const userAgent = data.userAgent || '';
    const ipAddress = data.ipAddress || 'לא זמין';
    
    Logger.log('🔑 מטפל בכניסת משתמש: ' + employeeName);
    
    const mainSpreadsheet = SpreadsheetApp.getActiveSpreadsheet();
    const masterLogins = mainSpreadsheet.getSheetByName(CONFIG.MASTER_LOGINS);
    
    if (masterLogins) {
      const loginId = Date.now();
      const now = new Date();
      const loginDate = now.toLocaleDateString('he-IL');
      const loginTime = now.toLocaleTimeString('he-IL');
      
      const newRow = [
        loginId,
        employeeName,
        loginDate,
        loginTime,
        ipAddress,
        userAgent
      ];
      
      masterLogins.appendRow(newRow);
      SpreadsheetApp.flush();
      
      Logger.log(`✅ נרשמה כניסה: ${employeeName} ב-${loginTime}`);
    }
    
    ensureEmployeeExists(employeeName);
    logUpdate(employeeName, 'כניסה למערכת', 'משתמש נכנס לממשק המשופר');
    
    return createResponse(true, 'כניסה נרשמה בהצלחה');
    
  } catch (error) {
    Logger.log('❌ שגיאה בטיפול בכניסה: ' + error.toString());
    return createResponse(false, error.toString());
  }
}

// ===== פונקציות placeholder לעתיד =====

/**
 * קבלת לקוחות אחרונים לעובד (עתידי)
 * @param {string} employee - שם העובד
 * @returns {Object} רשימת לקוחות אחרונים
 */
function getRecentClients(employee) {
  // TODO: להוסיף מימוש עתידי
  return createResponse(true, 'תכונה זו תתווסף בעתיד', { clients: [] });
}

/**
 * עדכון לקוח אחרון (עתידי)
 * @param {string} employee - שם העובד
 * @param {string} clientName - שם הלקוח
 * @param {string} clientType - סוג הלקוח
 * @returns {Object} תוצאת העדכון
 */
function updateRecentClient(employee, clientName, clientType) {
  // TODO: להוסיף מימוש עתידי
  return createResponse(true, 'עודכן בהצלחה');
}

/**
 * עיבוד ייבוא מאקסל בטוח (wrapper)
 * @param {Object} data - נתוני הייבוא
 * @returns {Object} תוצאת הייבוא
 */
function processExcelImportSafely(data) {
  try {
    return processExcelImport(data);
  } catch (error) {
    Logger.log('❌ שגיאה בייבוא מאקסל: ' + error.toString());
    return createResponse(false, error.toString());
  }
}

// ===== פונקציות טעינה מותאמות =====

/**
 * טעינת לקוחות מותאמת לביצועים
 * @returns {Array} רשימת לקוחות
 */
function loadClientsOptimized() {
  const startTime = new Date().getTime();
  
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const masterSheet = ss.getSheetByName(CONFIG.MASTER_CLIENTS);
    
    if (!masterSheet) {
      Logger.log('⚠️ גליון מאסטר לקוחות לא קיים');
      return [];
    }
    
    const data = masterSheet.getDataRange().getValues();
    if (data.length <= 1) {
      return [];
    }
    
    const headers = data[0];
    const clients = [];
    
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      if (row[0]) { // רק אם יש תוכן בעמודה הראשונה
        const client = {};
        headers.forEach((header, index) => {
          client[header] = row[index];
        });
        clients.push(client);
      }
    }
    
    const duration = new Date().getTime() - startTime;
    Logger.log(`✅ נטענו ${clients.length} לקוחות ב-${duration}ms`);
    
    return clients;
    
  } catch (error) {
    Logger.log('❌ שגיאה בטעינת לקוחות: ' + error.toString());
    throw error;
  }
}

/**
 * טעינת משימות תקציב מותאמת לביצועים
 * @returns {Array} רשימת משימות
 */
function loadBudgetTasksOptimized() {
  // TODO: להוסיף מימוש מלא
  return [];
}

/**
 * טעינת רשומות שעתון מותאמת לביצועים
 * @returns {Array} רשימת רישומים
 */
function loadTimesheetEntriesOptimized() {
  // TODO: להוסיף מימוש מלא
  return [];
}

// ===== סיום הקובץ =====

Logger.log('✅ קובץ utils.js נטען בהצלחה - כל הפונקציות זמינות');




/**
 * @fileoverview מיגרציה והמרה של נתונים במערכת ניהול משרד עורכי דין
 * מכיל פונקציות למיגרציה מגרסאות ישנות, המרת גליונות, תיקון קישורים וטריגרים
 * @version 2.0.0
 * @since 2025-01-01
 * @requires config.js, clients.js, utils.js
 */

// ===== אתחול וטריגרים =====

/**
 * אתחול המערכת המשופרת
 * יוצר את כל הגליונות המאסטר והתיקיות הנדרשות
 * @returns {boolean} האם האתחול הצליח
 */
function initializeEnhancedSystem() {
  Logger.log('🚀 מאתחל מערכת משופרת עם חישוב אוטומטי...');
  
  try {
    // יצירת גליונות מאסטר
    setupMasterClients();
    setupMasterEmployees(); 
    setupMasterUpdates();
    setupMasterLogins();
    
    // יצירת תיקיות
    getOrCreateFolder(CONFIG.CLIENTS_FOLDER);
    getOrCreateFolder(CONFIG.EMPLOYEES_FOLDER);
    
    // הגדרת התפריט
    onOpen();
    
    Logger.log('✅ המערכת המשופרת מוכנה!');
    
    SpreadsheetApp.getUi().alert(
      'אתחול מערכת משופרת',
      'המערכת המשופרת אותחלה בהצלחה!\n\n' +
      '🆕 תכונות חדשות:\n' +
      '• חישוב אוטומטי לגליונות לקוחות\n' +
      '• מיון אוטומטי לפי תאריכים\n' +
      '• זיהוי אוטומטי של בונוסים\n' +
      '• עדכון אוטומטי של שעות נותרות\n' +
      '• טריגרים אוטומטיים\n' +
      '• סטטיסטיקות מפורטות\n' +
      '• 🔗 בדיקה ותיקון קישורי לקוחות\n' +
      '• 🔄 המרת גליונות קיימים לחישוב אוטומטי\n\n' +
      '📈 שיפורים קיימים:\n' +
      '• מבנה נתונים יעיל יותר\n' +
      '• ללא גליונות נפרדים למשימות\n' +
      '• מעקב היסטוריה משופר\n' +
      '• חסימת לקוחות ללא שעות\n' +
      '• ביצועים משופרים פי 10\n' +
      '• תאימות מלאה לנתונים קיימים\n\n' +
      '🔧 פעולות מומלצות:\n' +
      '1. השתמש בפונקציית המיגרציה להעברת נתונים קיימים\n' +
      '2. המר את כל הגליונות הקיימים דרך "ניהול לקוחות → המר כל הגליונות"\n' +
      '3. בדוק קישורי לקוחות דרך התפריט "ניהול לקוחות"\n' +
      '4. הטריגר onEdit עובד אוטומטית - אין צורך בהגדרה מיוחדת!',
      SpreadsheetApp.getUi().ButtonSet.OK
    );
    
    return true;
    
  } catch (error) {
    Logger.log('❌ שגיאה באתחול המערכת: ' + error.toString());
    SpreadsheetApp.getUi().alert('שגיאה באתחול', error.toString(), SpreadsheetApp.getUi().ButtonSet.OK);
    return false;
  }
}

/**
 * טריגר אוטומטי לגליונות לקוחות
 * מופעל אוטומטיט כשיש עריכה בגליון
 * @param {Object} e - אובייקט האירוע מ-Google Apps Script
 */
function onEditClient(e) {
  try {
    const sheet = e.source.getActiveSheet();
    const range = e.range;
    const row = range.getRow();
    const col = range.getColumn();
    
    // בדיקה שהעריכה היא בטווח הנתונים שלנו ושזה גליון פעולות
    if (row < CONFIG.AUTO_CALC.FIRST_DATA_ROW || sheet.getName() !== 'פעולות') {
      return;
    }
    
    Logger.log(`נערך תא בגליון לקוח - שורה ${row}, עמודה ${col}`);
    
    // אם נוסף תאריך חדש או שונו דקות או הערות, צריך לחשב מחדש
    if (col === CONFIG.AUTO_CALC.DATE_COL || 
        col === CONFIG.AUTO_CALC.MINUTES_COL || 
        col === CONFIG.AUTO_CALC.NOTES_COL) {
      
      // המתנה קצרה כדי לא להפריע למשתמש
      Utilities.sleep(100);
      recalculateClientSheet();
    }
    
  } catch (error) {
    Logger.log('❌ שגיאה בטריגר לקוח: ' + error.toString());
  }
}

/**
 * התקנת טריגרים לכל הלקוחות
 * הטריגר onEdit עובד אוטומטית ללא הגדרה מיוחדת
 */
function installTriggersForAllClients() {
  try {
    Logger.log('🔧 מתקין טריגרים לכל הלקוחות...');
    
    const ui = SpreadsheetApp.getUi();
    const response = ui.alert(
      'התקנת טריגרים',
      'האם אתה בטוח שברצונך להתקין טריגרים אוטומטיים לכל גליונות הלקוחות?\n\nזה יאפשר חישוב אוטומטי כשמוסיפים נתונים.',
      ui.ButtonSet.YES_NO
    );
    
    if (response !== ui.Button.YES) {
      return;
    }
    
    // הסרת טריגרים קיימים
    const triggers = ScriptApp.getProjectTriggers();
    triggers.forEach(trigger => {
      if (trigger.getHandlerFunction() === 'onEditClient') {
        ScriptApp.deleteTrigger(trigger);
      }
    });
    
    // יצירת טריגר כללי - הטריגר onEdit עובד אוטומטית
    // לא צריך יצירה מיוחדת כי onEdit הוא built-in trigger
    
    ui.alert('הצלחה', 'טריגרים הותקנו בהצלחה!\n\nמעתה כל שינוי בגליונות הלקוחות יפעיל חישוב אוטומטי.\n\nהטריגר onEdit עובד אוטומטית ללא הגדרה מיוחדת.', ui.ButtonSet.OK);
    Logger.log('✅ טריגרים הותקנו לכל הלקוחות');
    
  } catch (error) {
    Logger.log('❌ שגיאה בהתקנת טריגרים: ' + error.toString());
    SpreadsheetApp.getUi().alert('שגיאה', error.toString(), SpreadsheetApp.getUi().ButtonSet.OK);
  }
}

// ===== מיגרציה עיקרית =====

/**
 * תהליך מיגרציה מרכזי מהגרסה הישנה
 * מטפל בהעברת כל הנתונים למבנה החדש
 */
function runMigrationProcess() {
  try {
    Logger.log('🔄 מתחיל תהליך מיגרציה עם חישוב אוטומטי...');
    
    const ui = SpreadsheetApp.getUi();
    const response = ui.alert(
      'מיגרציה משופרת',
      'האם אתה בטוח שברצונך להמיר את הנתונים הקיימים למבנה המשופר?\n\nזה ישמור את כל הנתונים הקיימים, יתקן את המבנה ויוסיף חישוב אוטומטי.',
      ui.ButtonSet.YES_NO
    );
    
    if (response !== ui.Button.YES) {
      return;
    }
    
    let migrationReport = 'דוח מיגרציה משופרת:\n' + new Date().toLocaleString('he-IL') + '\n\n';
    
    // מיגרציה של גליונות עובדים
    migrationReport += migrateEmployeeSheets();
    
    // מיגרציה וחישוב מחדש של כל הלקוחות
    migrationReport += '\n🧮 חישוב מחדש לקוחות:\n';
    migrationReport += recalculateAllClientsQuiet();
    
    // המרת גליונות לקוחות קיימים לחישוב אוטומטי
    migrationReport += '\n🔄 המרת גליונות לקוחות קיימים:\n';
    migrationReport += convertAllClientSheetsQuiet();
    
    // התקנת טריגרים
    migrationReport += '\n🔧 התקנת טריגרים:\n';
    migrationReport += '✅ הטריגר onEdit עובד אוטומטית ללא הגדרה מיוחדת\n';
    
    // תיקון קישורי לקוחות
    migrationReport += '\n🔗 בדיקת ותיקון קישורי לקוחות:\n';
    migrationReport += fixAllClientLinksQuiet();
    
    // שמירת דוח
    const reportSheet = getOrCreateSheet('דוח_מיגרציה_משופרת_' + Date.now());
    reportSheet.getRange(1, 1).setValue(migrationReport);
    
    ui.alert('מיגרציה משופרת הושלמה', migrationReport, ui.ButtonSet.OK);
    Logger.log('✅ מיגרציה משופרת הושלמה בהצלחה');
    
  } catch (error) {
    Logger.log('❌ שגיאה במיגרציה משופרת: ' + error.toString());
    SpreadsheetApp.getUi().alert('שגיאה במיגרציה', error.toString(), SpreadsheetApp.getUi().ButtonSet.OK);
  }
}

/**
 * מיגרציה של גליונות עובדים למבנה המתוקן
 * @returns {string} דוח המיגרציה
 */
function migrateEmployeeSheets() {
  let report = '';
  let totalMigrated = 0;
  
  try {
    const masterEmployees = getOrCreateSheet(CONFIG.MASTER_EMPLOYEES);
    const employeeData = masterEmployees.getDataRange().getValues();
    
    for (let i = 3; i < employeeData.length; i++) {
      if (employeeData[i][1] && employeeData[i][1] !== 'מנהל מערכת') {
        const employeeName = employeeData[i][1];
        const employeeSheetUrl = employeeData[i][3];
        
        Logger.log(`📝 מעבד עובד: ${employeeName}`);
        report += `עובד: ${employeeName}\n`;
        
        try {
          const result = migrateEmployeeSheetFixed(employeeName, employeeSheetUrl);
          report += result;
          totalMigrated++;
        } catch (error) {
          report += `  ❌ שגיאה: ${error.toString()}\n`;
        }
      }
    }
    
    report += `\n📊 סיכום עובדים: ${totalMigrated} עובדים עובדו\n`;
    
  } catch (error) {
    report += `❌ שגיאה כללית במיגרציית עובדים: ${error.toString()}\n`;
  }
  
  return report;
}

/**
 * מיגרציה של גליון עובד יחיד
 * @param {string} employeeName - שם העובד
 * @param {string} employeeSheetUrl - URL גליון העובד
 * @returns {string} דוח המיגרציה לעובד זה
 */
function migrateEmployeeSheetFixed(employeeName, employeeSheetUrl) {
  try {
    const employeeSpreadsheet = SpreadsheetApp.openByUrl(employeeSheetUrl);
    const oldBudgetSheet = employeeSpreadsheet.getSheetByName('תקצוב');
    
    let report = '';
    let migratedTasks = 0;
    let migratedHistory = 0;
    
    if (oldBudgetSheet) {
      // צור טאבים חדשים במבנה מתוקן
      const tasksSheet = getOrCreateSheet(employeeSpreadsheet, CONFIG.TAB_TASKS);
      const historySheet = getOrCreateSheet(employeeSpreadsheet, CONFIG.TAB_HISTORY);
      const changesSheet = getOrCreateSheet(employeeSpreadsheet, CONFIG.TAB_CHANGES);
      
      // הגדר כותרות
      setupFixedTasksSheetHeaders(tasksSheet);
      setupFixedHistorySheetHeaders(historySheet);
      setupFixedChangesSheetHeaders(changesSheet);
      
      // העבר נתונים מהטאב הישן
      const oldData = oldBudgetSheet.getDataRange().getValues();
      
      for (let row = 3; row < oldData.length; row++) {
        if (oldData[row][0]) { // יש ID משימה
          const migrated = migrateTaskDataFixed(oldData[row], tasksSheet, historySheet);
          if (migrated.task) migratedTasks++;
          migratedHistory += migrated.historyEntries;
        }
      }
      
      // שנה שם הטאב הישן לגיבוי
      try {
        oldBudgetSheet.setName('תקצוב_גיבוי_' + Date.now());
      } catch (e) {
        // אם השם ארוך מדי
        oldBudgetSheet.setName('גיבוי_' + Math.floor(Date.now() / 1000));
      }
      
      report = `  ✅ ${migratedTasks} משימות + ${migratedHistory} רישומי זמן הועברו\n`;
      
    } else {
      // אין טאב תקצוב ישן - צור טאבים חדשים ריקים
      const tasksSheet = getOrCreateSheet(employeeSpreadsheet, CONFIG.TAB_TASKS);
      const historySheet = getOrCreateSheet(employeeSpreadsheet, CONFIG.TAB_HISTORY);
      const changesSheet = getOrCreateSheet(employeeSpreadsheet, CONFIG.TAB_CHANGES);
      
      setupFixedTasksSheetHeaders(tasksSheet);
      setupFixedHistorySheetHeaders(historySheet);
      setupFixedChangesSheetHeaders(changesSheet);
      
      report = '  ℹ️ אין נתונים ישנים - טאבים חדשים נוצרו\n';
    }
    
    return report;
    
  } catch (error) {
    Logger.log(`❌ שגיאה בעובד ${employeeName}: ${error.toString()}`);
    return `  ❌ שגיאה: ${error.toString()}\n`;
  }
}

/**
 * מיגרציית נתוני משימה מהמבנה הישן לחדש
 * @param {Array} oldRow - שורת המשימה הישנה
 * @param {GoogleAppsScript.Spreadsheet.Sheet} tasksSheet - גליון המשימות החדש
 * @param {GoogleAppsScript.Spreadsheet.Sheet} historySheet - גליון ההיסטוריה החדש
 * @returns {Object} תוצאת המיגרציה
 */
function migrateTaskDataFixed(oldRow, tasksSheet, historySheet) {
  try {
    // מיפוי מהמבנה הישן למבנה החדש
    const taskId = oldRow[0];
    const clientName = oldRow[1];
    const fileNumber = oldRow[2];
    const branch = oldRow[3];
    const description = oldRow[4];
    const estimatedMinutes = oldRow[5] || 0;
    const actualMinutes = oldRow[6] || 0;
    const deadline = oldRow[7];
    const status = oldRow[8] || 'פעיל';
    const createdAt = oldRow[9];
    const completedAt = oldRow[10] || '';
    const notes = oldRow[11] || '';
    const lastUpdated = oldRow[12] || createdAt;
    const originalDeadline = oldRow[13] || deadline;
    const timeHistoryJson = oldRow[14] || '[]';
    
    // בנה שורה חדשה במבנה המתוקן
    const newTaskRow = [
      taskId,
      clientName,
      description,        // תיאור נוכחי
      description,        // תיאור מקורי (זהה במיגרציה)
      estimatedMinutes,
      actualMinutes,
      deadline,           // תאריך יעד נוכחי
      originalDeadline,   // תאריך יעד מקורי
      deadline !== originalDeadline, // האם הוארך
      status,
      createdAt,
      lastUpdated,
      branch,
      fileNumber,
      notes,
      completedAt
    ];
    
    tasksSheet.appendRow(newTaskRow);
    
    // העבר היסטוריית זמנים
    const timeHistory = tryParseJSON(timeHistoryJson) || [];
    let historyEntries = 0;
    
    for (const timeEntry of timeHistory) {
      const historyRow = [
        timeEntry.id || (Date.now() + Math.random()),
        taskId,
        timeEntry.date || createdAt,
        timeEntry.minutes || 0,
        timeEntry.notes || 'נתונים מהמערכת הישנה',
        timeEntry.recordedAt || createdAt
      ];
      
      historySheet.appendRow(historyRow);
      historyEntries++;
    }
    
    return { task: true, historyEntries: historyEntries };
    
  } catch (error) {
    Logger.log(`❌ שגיאה במיגרציית משימה ${oldRow[0]}: ${error.toString()}`);
    return { task: false, historyEntries: 0 };
  }
}

// ===== המרת גליונות לקוחות =====

/**
 * המרת כל הגליונות הקיימים של לקוחות לחישוב אוטומטי
 */
function convertAllExistingClientSheets() {
  try {
    Logger.log('🔄 מתחיל המרת כל הגליונות הקיימים של לקוחות...');
    
    const ui = SpreadsheetApp.getUi();
    const response = ui.alert(
      'המרת גליונות לקוחות קיימים',
      'האם אתה בטוח שברצונך להמיר את כל הגליונות הקיימים של הלקוחות לחישוב אוטומטי?\n\n' +
      'זה יתקן את המבנה, יוסיף חישוב אוטומטי, ויעדכן את כל הנתונים הקיימים.\n\n' +
      'תהליך זה עלול לקחת זמן רב.',
      ui.ButtonSet.YES_NO
    );
    
    if (response !== ui.Button.YES) {
      return;
    }
    
    const report = convertAllClientSheetsQuiet();
    ui.alert('המרת גליונות הושלמה', report, ui.ButtonSet.OK);
    
  } catch (error) {
    Logger.log('❌ שגיאה בהמרת גליונות: ' + error.toString());
    SpreadsheetApp.getUi().alert('שגיאה בהמרה', error.toString(), SpreadsheetApp.getUi().ButtonSet.OK);
  }
}

/**
 * המרת גליונות לקוחות (ללא UI)
 * @returns {string} דוח ההמרה
 */
function convertAllClientSheetsQuiet() {
  let report = '';
  
  try {
    const masterSheet = setupMasterClients();
    const data = masterSheet.getDataRange().getValues();
    let processed = 0;
    let converted = 0;
    let errors = 0;
    
    for (let i = 3; i < data.length; i++) {
      if (data[i][0] && data[i][11]) { // יש ID ו-URL
        const clientName = data[i][3];
        const fileNumber = data[i][2];
        const clientSheetUrl = data[i][11];
        const clientType = data[i][5];
        const totalHours = data[i][6] || 0;
        
        Logger.log(`🔄 מעבד לקוח: ${clientName} (${fileNumber})`);
        
        try {
          const result = convertSingleClientSheet(clientSheetUrl, {
            clientName: clientName,
            fileNumber: fileNumber,
            type: clientType,
            totalHours: totalHours
          });
          
          if (result.converted) {
            converted++;
          }
          
          processed++;
          
        } catch (error) {
          errors++;
          Logger.log(`❌ שגיאה בלקוח ${clientName}: ${error.toString()}`);
        }
      }
    }
    
    report += `✅ גליונות הומרו: ${converted}\n`;
    report += `✅ גליונות כבר מוכנים: ${processed - converted}\n`;
    report += `❌ שגיאות: ${errors}\n`;
    
  } catch (error) {
    report += `❌ שגיאה בהמרת גליונות: ${error.toString()}\n`;
  }
  
  return report;
}

/**
 * המרת גליון לקוח יחיד לחישוב אוטומטי
 * @param {string} clientSheetUrl - URL הגליון
 * @param {Object} clientData - נתוני הלקוח
 * @returns {Object} תוצאת ההמרה
 */
function convertSingleClientSheet(clientSheetUrl, clientData) {
  try {
    if (!testClientSheetLink(clientSheetUrl)) {
      throw new Error('קישור לגליון לא עובד');
    }
    
    const clientSpreadsheet = SpreadsheetApp.openByUrl(clientSheetUrl);
    let sheet = clientSpreadsheet.getSheetByName('פעולות');
    
    if (!sheet) {
      // אולי השם שונה - נסה למצוא את הגליון הראשון
      const sheets = clientSpreadsheet.getSheets();
      if (sheets.length > 0) {
        sheet = sheets[0];
        sheet.setName('פעולות'); // שנה שם לסטנדרט
      } else {
        throw new Error('לא נמצא גליון בקובץ');
      }
    }
    
    Logger.log(`🔄 מעבד גליון: ${clientData.clientName}`);
    
    // בדיקה האם הגליון כבר מוכן
    const isAlreadyConverted = checkIfSheetAlreadyConverted(sheet);
    
    let rowsProcessed = 0;
    let converted = false;
    
    if (!isAlreadyConverted) {
      // המרה של המבנה
      converted = true;
      rowsProcessed = convertClientSheetStructure(sheet, clientData);
    } else {
      // גליון כבר מוכן - רק חישוב מחדש
      rowsProcessed = recalculateExistingClientSheet(sheet, clientData);
    }
    
    return { converted: converted, rowsProcessed: rowsProcessed };
    
  } catch (error) {
    Logger.log(`❌ שגיאה בהמרת גליון ${clientData.clientName}: ${error.toString()}`);
    throw error;
  }
}

/**
 * בדיקה האם גליון לקוח כבר מומר
 * @param {GoogleAppsScript.Spreadsheet.Sheet} sheet - הגליון לבדיקה
 * @returns {boolean} האם כבר מומר
 */
function checkIfSheetAlreadyConverted(sheet) {
  try {
    // בדיקה האם יש את הכותרות הנכונות בשורה 4
    if (sheet.getLastRow() < 4) return false;
    
    const headers = sheet.getRange(4, 1, 1, 8).getValues()[0];
    const expectedHeaders = [
      'תאריך', 'תיאור פעולה', 'צוות משפטי', 'דקות',
      'דקות מצטבר', 'דקות נותרות', 'שעות נותרות', 'הערות'
    ];
    
    // בדיקה שהכותרות תואמות
    for (let i = 0; i < expectedHeaders.length; i++) {
      if (headers[i] !== expectedHeaders[i]) {
        return false;
      }
    }
    
    return true;
    
  } catch (error) {
    return false;
  }
}

/**
 * המרת מבנה גליון לקוח לפורמט החדש
 * @param {GoogleAppsScript.Spreadsheet.Sheet} sheet - הגליון להמרה
 * @param {Object} clientData - נתוני הלקוח
 * @returns {number} מספר השורות שעובדו
 */
function convertClientSheetStructure(sheet, clientData) {
  try {
    Logger.log(`🔧 ממיר מבנה גליון: ${clientData.clientName}`);
    
    // גיבוי הנתונים הקיימים
    const existingData = backupExistingClientData(sheet);
    
    // ניקוי הגליון
    sheet.clear();
    
    // בניית המבנה החדש
    setupNewClientSheetStructure(sheet, clientData);
    
    // החזרת הנתונים הקיימים עם חישוב אוטומטי
    if (existingData.length > 0) {
      restoreClientDataWithCalculation(sheet, existingData, clientData);
    }
    
    Logger.log(`✅ המרה הושלמה: ${existingData.length} שורות נתונים`);
    return existingData.length;
    
  } catch (error) {
    Logger.log(`❌ שגיאה בהמרת מבנה: ${error.toString()}`);
    throw error;
  }
}

/**
 * גיבוי נתונים קיימים מגליון לקוח
 * @param {GoogleAppsScript.Spreadsheet.Sheet} sheet - הגליון לגיבוי
 * @returns {Array} מערך הנתונים הקיימים
 */
function backupExistingClientData(sheet) {
  const existingData = [];
  const lastRow = sheet.getLastRow();
  
  // חיפוש תחילת הנתונים בגליון הקיים
  let dataStartRow = 5; // ברירת מחדל
  for (let row = 1; row <= lastRow; row++) {
    const cellValue = sheet.getRange(row, 1).getValue();
    if (cellValue && (cellValue instanceof Date || cellValue.toString().includes('/'))) {
      dataStartRow = row;
      break;
    }
  }
  
  // שמירת הנתונים הקיימים
  if (lastRow >= dataStartRow) {
    const range = sheet.getRange(dataStartRow, 1, lastRow - dataStartRow + 1, 8);
    const values = range.getValues();
    
    for (let i = 0; i < values.length; i++) {
      if (values[i][0] && values[i][0] !== '') { // יש תאריך
        existingData.push({
          date: values[i][0],
          description: values[i][1] || '',
          lawyer: values[i][2] || '',
          minutes: values[i][3] || 0,
          notes: values[i][7] || values[i][4] || '' // הערות יכולות להיות בעמודה שונה
        });
      }
    }
  }
  
  return existingData;
}

/**
 * בניית מבנה חדש לגליון לקוח
 * @param {GoogleAppsScript.Spreadsheet.Sheet} sheet - הגליון לבניה
 * @param {Object} clientData - נתוני הלקוח
 */
function setupNewClientSheetStructure(sheet, clientData) {
  // כותרת ראשית
  sheet.getRange(1, 1).setValue(`📋 ${clientData.clientName}`);
  sheet.getRange(1, 1).setFontSize(20).setFontWeight('bold')
    .setBackground(COLORS.PRIMARY).setFontColor('white');
  sheet.getRange(1, 1, 1, 8).merge();
  
  // פרטי לקוח
  sheet.getRange(2, 1).setValue('מס\' תיק:');
  sheet.getRange(2, 2).setValue(clientData.fileNumber).setFontWeight('bold');
  
  sheet.getRange(2, 4).setValue('סוג:');
  sheet.getRange(2, 5).setValue(clientData.type === 'hours' ? 'תוכנית שעות' : 'פיקס').setFontWeight('bold');
  
  if (clientData.type === 'hours') {
    sheet.getRange(2, 7).setValue('סה"כ שעות:');
    sheet.getRange(2, 8).setValue(clientData.totalHours).setFontWeight('bold');
  }
  
  // כותרות טבלה
  const headers = [
    'תאריך', 'תיאור פעולה', 'צוות משפטי', 'דקות',
    'דקות מצטבר', 'דקות נותרות', 'שעות נותרות', 'הערות'
  ];
  
  sheet.getRange(4, 1, 1, headers.length).setValues([headers]);
  sheet.getRange(4, 1, 1, headers.length)
    .setFontWeight('bold')
    .setBackground(COLORS.PRIMARY)
    .setFontColor('white');
  
  sheet.setFrozenRows(4);
  
  // עיצוב עמודות
  const widths = [100, 300, 120, 100, 120, 150, 150, 200];
  for (let i = 0; i < widths.length; i++) {
    sheet.setColumnWidth(i + 1, widths[i]);
  }
}

/**
 * החזרת נתונים עם חישוב אוטומטי
 * @param {GoogleAppsScript.Spreadsheet.Sheet} sheet - הגליון
 * @param {Array} existingData - הנתונים הקיימים
 * @param {Object} clientData - נתוני הלקוח
 */
function restoreClientDataWithCalculation(sheet, existingData, clientData) {
  for (const data of existingData) {
    const newRow = [
      data.date,
      data.description,
      data.lawyer,
      data.minutes,
      '', // דקות מצטבר - יחושב
      '', // דקות נותרות - יחושב  
      '', // שעות נותרות - יחושב
      data.notes
    ];
    
    sheet.appendRow(newRow);
  }
  
  // חישוב אוטומטי של כל הנתונים
  const clientDataForCalc = {
    fileNumber: clientData.fileNumber,
    type: clientData.type === 'hours' ? 'hours' : 'fixed',
    totalHours: clientData.totalHours
  };
  
  calculateClientFormulas(sheet, clientDataForCalc);
}

/**
 * חישוב מחדש של גליון לקוח קיים (ללא המרת מבנה)
 * @param {GoogleAppsScript.Spreadsheet.Sheet} sheet - הגליון
 * @param {Object} clientData - נתוני הלקוח
 * @returns {number} מספר השורות שעובדו
 */
function recalculateExistingClientSheet(sheet, clientData) {
  try {
    const clientDataForCalc = {
      fileNumber: clientData.fileNumber,
      type: clientData.type === 'hours' ? 'hours' : 'fixed',
      totalHours: clientData.totalHours
    };
    
    // מיון לפי תאריכים
    sortClientSheetByDate(sheet);
    
    // חישוב הנוסחאות
    calculateClientFormulas(sheet, clientDataForCalc);
    
    const lastRow = getLastDataRowClient(sheet);
    const rowsProcessed = Math.max(0, lastRow - CONFIG.AUTO_CALC.FIRST_DATA_ROW + 1);
    
    Logger.log(`🧮 חישוב מחדש הושלם: ${rowsProcessed} שורות`);
    return rowsProcessed;
    
  } catch (error) {
    Logger.log(`❌ שגיאה בחישוב מחדש: ${error.toString()}`);
    throw error;
  }
}

/**
 * המרת גליון לקוח ספציפי (לשימוש ידני)
 */
function convertCurrentClientSheet() {
  try {
    const sheet = SpreadsheetApp.getActiveSheet();
    const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
    
    // נסה לזהות את נתוני הלקוח מהגליון
    const fileNumber = sheet.getRange(2, 2).getValue() || 'לא זוהה';
    const clientName = sheet.getRange(1, 1).getValue() || spreadsheet.getName();
    const typeCell = sheet.getRange(2, 5).getValue() || '';
    const totalHours = sheet.getRange(2, 8).getValue() || 0;
    
    const clientData = {
      clientName: clientName.replace('📋 ', ''),
      fileNumber: fileNumber,
      type: typeCell === 'תוכנית שעות' ? 'hours' : 'fixed',
      totalHours: totalHours
    };
    
    const result = convertSingleClientSheet(spreadsheet.getUrl(), clientData);
    
    let message = '';
    if (result.converted) {
      message = `✅ גליון הומר בהצלחה!\n\nעובדו ${result.rowsProcessed} שורות נתונים.`;
    } else {
      message = `ℹ️ הגליון כבר מוכן.\n\nחושבו מחדש ${result.rowsProcessed} שורות נתונים.`;
    }
    
    SpreadsheetApp.getUi().alert('המרת גליון לקוח', message, SpreadsheetApp.getUi().ButtonSet.OK);
    
  } catch (error) {
    SpreadsheetApp.getUi().alert('שגיאה בהמרה', error.toString(), SpreadsheetApp.getUi().ButtonSet.OK);
  }
}

// ===== תיקון קישורי לקוחות =====

/**
 * בדיקה ותיקון קישורי לקוחות במאסטר
 */
function fixClientLinks() {
  try {
    Logger.log('🔧 מתחיל תיקון קישורי לקוחות...');
    
    const ui = SpreadsheetApp.getUi();
    const response = ui.alert(
      'תיקון קישורי לקוחות',
      'האם אתה בטוח שברצונך לבדוק ולתקן את כל קישורי הלקוחות?\n\nזה עלול לקחת זמן רב.',
      ui.ButtonSet.YES_NO
    );
    
    if (response !== ui.Button.YES) {
      return;
    }
    
    const report = fixAllClientLinksQuiet();
    ui.alert('תיקון קישורים הושלם', report, ui.ButtonSet.OK);
    
  } catch (error) {
    Logger.log('❌ שגיאה בתיקון קישורים: ' + error.toString());
    SpreadsheetApp.getUi().alert('שגיאה', error.toString(), SpreadsheetApp.getUi().ButtonSet.OK);
  }
}

/**
 * תיקון כל קישורי הלקוחות (ללא UI)
 * @returns {string} דוח התיקון
 */
function fixAllClientLinksQuiet() {
  let report = '';
  
  try {
    const masterSheet = setupMasterClients();
    const data = masterSheet.getDataRange().getValues();
    let fixed = 0;
    let created = 0;
    let errors = 0;
    
    for (let i = 3; i < data.length; i++) {
      if (data[i][0]) { // יש ID לקוח
        const clientName = data[i][3];
        const fileNumber = data[i][2];
        const clientSheetUrl = data[i][11];
        
        try {
          if (!clientSheetUrl || clientSheetUrl === '') {
            // אין קישור - צריך ליצור
            const newUrl = createMissingClientSheet(data[i]);
            masterSheet.getRange(i + 1, 12).setValue(newUrl);
            created++;
            
          } else {
            // יש קישור - בדוק שהוא עובד
            const isWorking = testClientSheetLink(clientSheetUrl);
            
            if (!isWorking) {
              // נסה למצוא את הגליון בתיקייה
              const foundUrl = findClientSheetInFolder(clientName, fileNumber);
              
              if (foundUrl) {
                masterSheet.getRange(i + 1, 12).setValue(foundUrl);
                fixed++;
              } else {
                // צור גליון חדש
                const newUrl = createMissingClientSheet(data[i]);
                masterSheet.getRange(i + 1, 12).setValue(newUrl);
                created++;
              }
            }
          }
          
        } catch (error) {
          errors++;
          Logger.log(`❌ שגיאה בלקוח ${clientName}: ${error.toString()}`);
        }
      }
    }
    
    SpreadsheetApp.flush();
    
    report += `🔧 קישורים תוקנו: ${fixed}\n`;
    report += `🆕 גליונות נוצרו: ${created}\n`;
    report += `❌ שגיאות: ${errors}\n`;
    
  } catch (error) {
    report += `❌ שגיאה כללית בתיקון קישורים: ${error.toString()}\n`;
  }
  
  return report;
}

/**
 * חיפוש גליון לקוח בתיקייה
 * @param {string} clientName - שם הלקוח
 * @param {string} fileNumber - מספר תיק
 * @returns {string|null} URL הגליון או null
 */
function findClientSheetInFolder(clientName, fileNumber) {
  try {
    const folder = getOrCreateFolder(CONFIG.CLIENTS_FOLDER);
    const files = folder.getFiles();
    
    // דפוסי חיפוש אפשריים
    const searchPatterns = [
      `לקוח - ${clientName} - ${fileNumber}`,
      `${clientName} - ${fileNumber}`,
      clientName,
      fileNumber
    ];
    
    while (files.hasNext()) {
      const file = files.next();
      const fileName = file.getName();
      
      // בדוק אם השם של הקובץ מתאים לאחד מהדפוסים
      for (const pattern of searchPatterns) {
        if (fileName.includes(pattern)) {
          Logger.log(`🔍 נמצא גליון: ${fileName} עבור ${clientName}`);
          return file.getUrl();
        }
      }
    }
    
    Logger.log(`🔍 לא נמצא גליון עבור ${clientName} (${fileNumber})`);
    return null;
    
  } catch (error) {
    Logger.log(`❌ שגיאה בחיפוש גליון עבור ${clientName}: ${error.toString()}`);
    return null;
  }
}

/**
 * יצירת גליון חסר ללקוח
 * @param {Array} clientRow - שורת הלקוח ממאסטר
 * @returns {string} URL הגליון החדש
 */
function createMissingClientSheet(clientRow) {
  try {
    const clientData = {
      clientName: clientRow[1],
      fileNumber: clientRow[2],
      fullName: clientRow[3],
      description: clientRow[4],
      type: clientRow[5],
      totalHours: clientRow[6] || 0
    };
    
    Logger.log(`🆕 יוצר גליון חדש ללקוח: ${clientData.fullName}`);
    
    // השתמש בפונקציה הקיימת ליצירת גליון
    const url = createClientSpreadsheetEnhanced(clientData);
    
    Logger.log(`✅ נוצר גליון חדש: ${url}`);
    return url;
    
  } catch (error) {
    Logger.log(`❌ שגיאה ביצירת גליון עבור ${clientRow[3]}: ${error.toString()}`);
    throw error;
  }
}

/**
 * בדיקה מהירה של קישורי לקוחות (ללא תיקון)
 */
function checkClientLinks() {
  try {
    Logger.log('🔍 בודק קישורי לקוחות...');
    
    const masterSheet = setupMasterClients();
    const data = masterSheet.getDataRange().getValues();
    let working = 0;
    let broken = 0;
    let missing = 0;
    let brokenLinks = [];
    
    for (let i = 3; i < data.length; i++) {
      if (data[i][0]) { // יש ID לקוח
        const clientName = data[i][3];
        const clientSheetUrl = data[i][11];
        
        if (!clientSheetUrl || clientSheetUrl === '') {
          missing++;
          brokenLinks.push(`${clientName} - אין קישור`);
        } else {
          const isWorking = testClientSheetLink(clientSheetUrl);
          if (isWorking) {
            working++;
          } else {
            broken++;
            brokenLinks.push(`${clientName} - קישור שבור`);
          }
        }
      }
    }
    
    let message = `📊 דוח קישורי לקוחות:\n\n`;
    message += `✅ קישורים תקינים: ${working}\n`;
    message += `❌ קישורים שבורים: ${broken}\n`;
    message += `⚠️ קישורים חסרים: ${missing}\n\n`;
    
    if (brokenLinks.length > 0) {
      message += `רשימת בעיות:\n`;
      brokenLinks.forEach(link => {
        message += `• ${link}\n`;
      });
      message += `\nהאם לתקן את הבעיות?`;
      
      const ui = SpreadsheetApp.getUi();
      const response = ui.alert('דוח קישורי לקוחות', message, ui.ButtonSet.YES_NO);
      
      if (response === ui.Button.YES) {
        fixClientLinks();
      }
    } else {
      message += `🎉 כל הקישורים תקינים!`;
      SpreadsheetApp.getUi().alert('דוח קישורי לקוחות', message, SpreadsheetApp.getUi().ButtonSet.OK);
    }
    
  } catch (error) {
    Logger.log('❌ שגיאה בבדיקת קישורים: ' + error.toString());
    SpreadsheetApp.getUi().alert('שגיאה', error.toString(), SpreadsheetApp.getUi().ButtonSet.OK);
  }
}

// ===== פונקציות עזר שקטות =====

/**
 * חישוב מחדש כל הלקוחות (ללא UI)
 * @returns {string} דוח החישוב
 */
function recalculateAllClientsQuiet() {
  let report = '';
  
  try {
    const masterSheet = setupMasterClients();
    const data = masterSheet.getDataRange().getValues();
    let processed = 0;
    let errors = 0;
    
    for (let i = 3; i < data.length; i++) {
      if (data[i][0] && data[i][11]) { // יש ID ו-URL
        try {
          const clientSheetUrl = data[i][11];
          const clientSpreadsheet = SpreadsheetApp.openByUrl(clientSheetUrl);
          recalculateClientSheet(clientSpreadsheet.getId());
          processed++;
        } catch (error) {
          errors++;
          Logger.log(`❌ שגיאה בלקוח ${data[i][3]}: ${error.toString()}`);
        }
      }
    }
    
    report += `✅ חישוב מחדש הושלם עבור ${processed} לקוחות\n`;
    if (errors > 0) {
      report += `❌ שגיאות: ${errors}\n`;
    }
    
  } catch (error) {
    report += `❌ שגיאה בחישוב מחדש: ${error.toString()}\n`;
  }
  
  return report;
}




/**
 * @fileoverview ממשקי משתמש ודיאלוגים במערכת ניהול משרד עורכי דין
 * מכיל דיאלוגים, ייבוא מאקסל, דוחות ופונקציות UI
 * @version 2.0.0
 * @since 2025-01-01
 * @requires config.js, clients.js, utils.js
 */

// ===== דיאלוגים עיקריים =====

/**
 * הצגת דיאלוג הוספת לקוח חדש
 * יוצר ממשק מלא עם וולידציה ובדיקות
 */
function showAddClientDialog() {
  try {
    Logger.log('👤 פותח דיאלוג הוספת לקוח חדש...');
    
    const htmlContent = createAddClientDialogHtml();
    const htmlOutput = HtmlService.createHtmlOutput(htmlContent)
      .setWidth(800)
      .setHeight(650);
    
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, '👤 הוספת לקוח חדש');
    
  } catch (error) {
    Logger.log('❌ שגיאה בפתיחת דיאלוג לקוח: ' + error.toString());
    SpreadsheetApp.getUi().alert('שגיאה: ' + error.toString());
  }
}

/**
 * הצגת דיאלוג ייבוא לקוח מאקסל ישן
 * ממשק מתקדם לניתוח והמרת נתוני אקסל
 */
function showImportFromExcelDialog() {
  try {
    Logger.log('📥 פותח דיאלוג ייבוא מאקסל ישן...');
    
    const htmlContent = createImportFromExcelHtml();
    const htmlOutput = HtmlService.createHtmlOutput(htmlContent)
      .setWidth(900)
      .setHeight(700);
    
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, '📥 ייבוא לקוח מאקסל ישן');
    
  } catch (error) {
    Logger.log('❌ שגיאה בפתיחת דיאלוג ייבוא: ' + error.toString());
    SpreadsheetApp.getUi().alert('שגיאה: ' + error.toString());
  }
}

// ===== פונקציות תפריט ודוחות =====

/**
 * הצגת רשימת כל הלקוחות עם סטטוס
 * דוח מפורט עם צבעים וסינון
 */
function showAllClients() {
  try {
    const sheet = setupMasterClients();
    const data = sheet.getDataRange().getValues();
    
    let html = createClientsListHtml(data);
    
    const htmlOutput = HtmlService.createHtmlOutput(html).setWidth(700).setHeight(500);
    SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'רשימת לקוחות משופרת');
    
  } catch (error) {
    Logger.log('❌ שגיאה בהצגת רשימת לקוחות: ' + error.toString());
    SpreadsheetApp.getUi().alert('שגיאה: ' + error.toString());
  }
}

/**
 * הצגת לקוחות קריטיים ונחסמים
 * התראות עבור לקוחות עם מעט שעות או חסומים
 */
function showCriticalClients() {
  try {
    const sheet = setupMasterClients();
    const data = sheet.getDataRange().getValues();
    let criticalClients = [];
    
    // חיפוש לקוחות קריטיים
    for (let i = 3; i < data.length; i++) {
      if (data[i][0] && data[i][5] === 'hours') {
        const hoursRemaining = data[i][7] || 0;
        if (hoursRemaining <= 5) {
          criticalClients.push({
            name: data[i][3],
            fileNumber: data[i][2],
            hoursRemaining: hoursRemaining,
            isBlocked: hoursRemaining <= 0
          });
        }
      }
    }
    
    let message = '⚠️ לקוחות קריטיים ונחסמים:\n\n';
    
    if (criticalClients.length === 0) {
      message = '✅ אין לקוחות קריטיים כרגע!';
    } else {
      criticalClients.forEach(client => {
        const status = client.isBlocked ? '🚫 חסום' : '⚠️ קריטי';
        message += `${status} ${client.name} (${client.fileNumber}) - ${client.hoursRemaining} שעות\n`;
      });
    }
    
    SpreadsheetApp.getUi().alert('לקוחות קריטיים', message, SpreadsheetApp.getUi().ButtonSet.OK);
    
  } catch (error) {
    Logger.log('❌ שגיאה בהצגת לקוחות קריטיים: ' + error.toString());
    SpreadsheetApp.getUi().alert('שגיאה: ' + error.toString());
  }
}

/**
 * הצגת סטטיסטיקות גליון נוכחי
 * ניתוח מפורט של גליון לקוח פעיל
 */
function showCurrentSheetStats() {
  try {
    const sheet = SpreadsheetApp.getActiveSheet();
    const clientData = getClientDataFromSheet(sheet);
    
    if (!clientData) {
      SpreadsheetApp.getUi().alert('שגיאה', 'זה לא נראה כמו גליון לקוח תקני.', SpreadsheetApp.getUi().ButtonSet.OK);
      return;
    }
    
    const stats = calculateCurrentSheetStats(sheet, clientData);
    const statsMessage = formatStatsMessage(stats, clientData);
    
    SpreadsheetApp.getUi().alert('סטטיסטיקות גליון', statsMessage, SpreadsheetApp.getUi().ButtonSet.OK);
    
  } catch (error) {
    Logger.log('❌ שגיאה בהצגת סטטיסטיקות: ' + error.toString());
    SpreadsheetApp.getUi().alert('שגיאה', error.toString(), SpreadsheetApp.getUi().ButtonSet.OK);
  }
}

/**
 * בדיקת תקינות תאריכים בגליון נוכחי
 * וולידציה של כל התאריכים בגליון
 */
function validateCurrentSheetDates() {
  try {
    const sheet = SpreadsheetApp.getActiveSheet();
    const lastRow = getLastDataRowClient(sheet);
    const errors = [];
    
    for (let row = CONFIG.AUTO_CALC.FIRST_DATA_ROW; row <= lastRow; row++) {
      const dateValue = sheet.getRange(row, CONFIG.AUTO_CALC.DATE_COL).getValue();
      
      if (dateValue && !isValidDate(dateValue)) {
        errors.push(`שורה ${row}: תאריך לא תקין - ${dateValue}`);
      }
    }
    
    let message;
    if (errors.length > 0) {
      message = `❌ נמצאו ${errors.length} שגיאות בתאריכים:\n\n` + errors.join('\n');
    } else {
      message = `✅ כל התאריכים תקינים!\n\nנבדקו ${lastRow - CONFIG.AUTO_CALC.FIRST_DATA_ROW + 1} שורות.`;
    }
    
    SpreadsheetApp.getUi().alert('בדיקת תקינות תאריכים', message, SpreadsheetApp.getUi().ButtonSet.OK);
    
  } catch (error) {
    Logger.log('❌ שגיאה בבדיקת תאריכים: ' + error.toString());
    SpreadsheetApp.getUi().alert('שגיאה', error.toString(), SpreadsheetApp.getUi().ButtonSet.OK);
  }
}

// ===== פונקציות תפריט פיתוח עתידי =====

/**
 * פונקציות מקומיות לתכונות עתידיות
 * מוכנות להרחבה
 */
function showTasksReport() {
  SpreadsheetApp.getUi().alert('דוח משימות', 'תכונה זו תתווסף בעתיד...', SpreadsheetApp.getUi().ButtonSet.OK);
}

function fixTasksData() {
  SpreadsheetApp.getUi().alert('תיקון נתונים', 'תכונה זו תתווסף בעתיד...', SpreadsheetApp.getUi().ButtonSet.OK);
}

function showPerformanceAnalysis() {
  SpreadsheetApp.getUi().alert('ניתוח ביצועים', 'תכונה זו תתווסף בעתיד...', SpreadsheetApp.getUi().ButtonSet.OK);
}

function showAddEmployeeDialog() {
  SpreadsheetApp.getUi().alert('הוספת עובד', 'תכונה זו תתווסף בעתיד...', SpreadsheetApp.getUi().ButtonSet.OK);
}

function showEmployeesReport() {
  SpreadsheetApp.getUi().alert('דוח עובדים', 'תכונה זו תתווסף בעתיד...', SpreadsheetApp.getUi().ButtonSet.OK);
}

function showSystemSettings() {
  SpreadsheetApp.getUi().alert('הגדרות מערכת', 'תכונה זו תתווסף בעתיד...', SpreadsheetApp.getUi().ButtonSet.OK);
}

// ===== פונקציות חישוב וניהול גליון נוכחי =====

/**
 * חישוב מחדש גליון נוכחי עם הודעה למשתמש
 */
function recalculateCurrentSheet() {
  try {
    const success = recalculateClientSheet();
    if (success) {
      SpreadsheetApp.getUi().alert('הצלחה', 'הגליון חושב מחדש בהצלחה!', SpreadsheetApp.getUi().ButtonSet.OK);
    } else {
      SpreadsheetApp.getUi().alert('שגיאה', 'לא ניתן לחשב מחדש את הגליון הנוכחי. \nוודא שזה גליון לקוח תקני.', SpreadsheetApp.getUi().ButtonSet.OK);
    }
  } catch (error) {
    SpreadsheetApp.getUi().alert('שגיאה', error.toString(), SpreadsheetApp.getUi().ButtonSet.OK);
  }
}

/**
 * חישוב מחדש כל הלקוחות עם אישור משתמש
 */
function recalculateAllClients() {
  try {
    Logger.log('🔄 מתחיל חישוב מחדש לכל הלקוחות...');
    
    const ui = SpreadsheetApp.getUi();
    const response = ui.alert(
      'חישוב מחדש כל הלקוחות',
      'האם אתה בטוח שברצונך לחשב מחדש את כל גליונות הלקוחות?\n\nזה עלול לקחת זמן רב.',
      ui.ButtonSet.YES_NO
    );
    
    if (response !== ui.Button.YES) {
      return;
    }
    
    const result = recalculateAllClientsWithProgress();
    ui.alert('חישוב מחדש הושלם', result.message, ui.ButtonSet.OK);
    
  } catch (error) {
    Logger.log('❌ שגיאה בחישוב מחדש כל הלקוחות: ' + error.toString());
    SpreadsheetApp.getUi().alert('שגיאה', error.toString(), SpreadsheetApp.getUi().ButtonSet.OK);
  }
}

/**
 * מיון תאריכים לכל הלקוחות עם אישור משתמש
 */
function sortAllClientsByDate() {
  try {
    Logger.log('📅 מתחיל מיון תאריכים לכל הלקוחות...');
    
    const ui = SpreadsheetApp.getUi();
    const response = ui.alert(
      'מיון תאריכים כל הלקוחות',
      'האם אתה בטוח שברצונך למיין את התאריכים בכל גליונות הלקוחות?',
      ui.ButtonSet.YES_NO
    );
    
    if (response !== ui.Button.YES) {
      return;
    }
    
    const result = sortAllClientsByDateWithProgress();
    ui.alert('מיון הושלם', result.message, ui.ButtonSet.OK);
    
  } catch (error) {
    Logger.log('❌ שגיאה במיון כל הלקוחות: ' + error.toString());
    SpreadsheetApp.getUi().alert('שגיאה', error.toString(), SpreadsheetApp.getUi().ButtonSet.OK);
  }
}

// ===== HTML Generators =====

/**
 * יצירת HTML לדיאלוג הוספת לקוח חדש
 * @returns {string} קוד HTML מלא לדיאלוג
 */
function createAddClientDialogHtml() {
  return `<!DOCTYPE html>
<html dir="rtl">
<head>
  <meta charset="UTF-8">
  <title>הוספת לקוח חדש</title>
  ${getCommonStyles()}
</head>
<body>
  <div class="container">
    <div class="header">
      <h2>👤 הוספת לקוח חדש</h2>
      <p>יצירת לקוח חדש במערכת עם גליון אישי</p>
    </div>

    <div class="content">
      <form id="addClientForm">
        <!-- פרטי לקוח בסיסיים -->
        <div class="section">
          <h3>📋 פרטי הלקוח</h3>
          
          <div class="form-row">
            <div class="form-group">
              <label for="clientFullName">שם מלא: *</label>
              <input type="text" id="clientFullName" placeholder="לדוגמה: ד״ר אילן וסרמן" required>
              <div class="validation-error" id="nameError">אנא הזן שם מלא תקין</div>
            </div>
            <div class="form-group">
              <label for="clientDescription">תיאור/הבחנה (אופציונלי):</label>
              <input type="text" id="clientDescription" placeholder="לדוגמה: תביעת ביטוח, תיק פלילי...">
            </div>
          </div>
        </div>

        <!-- מספר תיק -->
        <div class="section">
          <h3>📁 מספר תיק</h3>
          
          <div class="form-row">
            <div class="form-group">
              <label for="clientFileNumber">מספר תיק: *</label>
              <input type="text" id="clientFileNumber" placeholder="לדוגמה: 2025/001" required>
              <div class="validation-error" id="fileNumberError">מספר תיק לא תקין או כבר קיים</div>
              <p style="color: #6b7280; font-size: 13px; margin-top: 8px;">
                💡 הזן את מספר התיק כפי שנפתח בפועל במשרד
              </p>
            </div>
          </div>
        </div>

        <!-- סוג לקוח -->
        <div class="section">
          <h3>🏷️ סוג לקוח</h3>
          
          <div class="client-type-options">
            <div class="client-type-option">
              <input type="radio" id="typeHours" name="clientType" value="hours" class="client-type-radio" checked>
              <label for="typeHours" class="client-type-label">
                <i>⏰</i> תוכנית שעות
              </label>
            </div>
            <div class="client-type-option">
              <input type="radio" id="typeFixed" name="clientType" value="fixed" class="client-type-radio">
              <label for="typeFixed" class="client-type-label">
                <i>📋</i> פיקס (3 שלבים)
              </label>
            </div>
          </div>

          <!-- מידע תוכנית שעות -->
          <div class="hours-section" id="hoursSection">
            <h4>⏰ תוכנית שעות</h4>
            <div class="form-row">
              <div class="form-group">
                <label for="hoursAmount">כמות שעות: *</label>
                <input type="number" id="hoursAmount" placeholder="30" min="1" max="500" required>
                <div class="validation-error" id="hoursError">אנא הזן מספר שעות תקין (1-500)</div>
              </div>
            </div>
            <p style="color: #92400e; margin-top: 10px; font-size: 14px;">
              <strong>💡 הערה:</strong> התראה תופיע כאשר יישארו 5 שעות בלבד
            </p>
          </div>

          <!-- מידע פיקס -->
          <div class="stages-info hidden" id="stagesSection">
            <h4>📋 התיק יכלול 3 שלבים:</h4>
            <div class="stages-list">
              ○ שלב 1 - לא הושלם<br>
              ○ שלב 2 - לא הושלם<br>
              ○ שלב 3 - לא הושלם
            </div>
            <p style="color: #0e7490; margin-top: 10px; font-size: 14px;">
              <strong>📝 הערה:</strong> ניתן לעדכן התקדמות כל שלב בנפרד
            </p>
          </div>
        </div>

        <!-- כפתורי פעולה -->
        <div class="buttons-row">
          <button type="submit" class="button" id="createClientBtn">
            ✅ צור לקוח חדש
          </button>
          <button type="button" class="button button-secondary" onclick="google.script.host.close()">
            ❌ ביטול
          </button>
        </div>

        <!-- אזור הודעות ותוצאות -->
        <div id="loading" class="loading">
          <div class="spinner"></div>
          <p><strong>יוצר לקוח חדש...</strong><br>המערכת מכינה גליון אישי ומעדכנת את הנתונים</p>
        </div>
        
        <div id="statusMessage" class="status-message"></div>
      </form>
    </div>
  </div>

  ${getClientDialogScript()}
</body>
</html>`;
}

/**
 * יצירת HTML לדיאלוג ייבוא מאקסל
 * @returns {string} קוד HTML מלא לדיאלוג ייבוא
 */
function createImportFromExcelHtml() {
  return `<!DOCTYPE html>
<html dir="rtl">
<head>
  <meta charset="UTF-8">
  <title>ייבוא לקוח מאקסל ישן</title>
  ${getCommonStyles()}
</head>
<body>
  <div class="container">
    <div class="header" style="background: linear-gradient(135deg, #10b981 0%, #059669 100%);">
      <h2>📥 ייבוא לקוח מאקסל ישן</h2>
      <p>העברת נתונים מגליון אקסל קיים למערכת החדשה</p>
    </div>

    <div class="content">
      <!-- שלב 1: פרטי לקוח -->
      <div class="section">
        <h3>📋 שלב 1: פרטי הלקוח</h3>
        
        <div class="form-row">
          <div class="form-group">
            <label for="clientFullName">שם מלא:</label>
            <input type="text" id="clientFullName" placeholder="לדוגמה: ד״ר אילן וסרמן" required>
          </div>
          <div class="form-group">
            <label for="clientFileNumber">מספר תיק:</label>
            <input type="text" id="clientFileNumber" placeholder="לדוגמה: 2025/001" required>
          </div>
        </div>
        
        <div class="form-row">
          <div class="form-group">
            <label for="clientType">סוג לקוח:</label>
            <select id="clientType" required>
              <option value="">בחר סוג...</option>
              <option value="hours">תוכנית שעות</option>
              <option value="fixed">פיקס</option>
            </select>
          </div>
          <div class="form-group">
            <label for="clientHours">סה"כ שעות (לתוכנית שעות):</label>
            <input type="number" id="clientHours" placeholder="לדוגמה: 30" min="0">
          </div>
        </div>
        
        <button type="button" class="button button-check" onclick="checkExistingClient()" style="background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);">
          🔍 בדוק אם לקוח קיים במערכת
        </button>
        
        <div id="clientCheckResult" style="display: none;"></div>
      </div>

      <!-- שלב 2: נתוני אקסל -->
      <div class="section">
        <h3>📊 שלב 2: נתוני האקסל הישן</h3>
        
        <p><strong>הוראות:</strong> העתק את כל התוכן מהאקסל הישן והדבק למטה. המערכת תזהה אוטומטית את התאריכים, הפעולות והדקות.</p>
        
        <div class="example">דוגמה למה שצריך להדביק:
12.5.25	פגישת ייעוץ	גיא הרשקוביץ	60
8.5.25	ליווי לתחנת המשטרה והגשת תלונה	רועי	140
13.5.25	מעבר על מסמכים ועריכת מכתב	מרוה	231
14.5.25	תיקון מכתב + עריכת מכתב נוסף	מרוה	59</div>
        
        <label for="excelData">הדבק כאן את נתוני האקסל:</label>
        <textarea id="excelData" placeholder="הדבק כאן את כל התוכן מהטבלה באקסל...

המערכת תזהה אוטומטית:
- תאריכים בפורמט DD.M.YY
- תיאורי פעולות
- שמות מבצעים  
- מספרי דקות

פשוט העתק הכל מהאקסל והדבק כאן!" required></textarea>
      </div>

      <!-- כפתורי פעולה -->
      <div class="buttons-row">
        <button type="button" class="button" onclick="processExcelImport()" style="background: linear-gradient(135deg, #10b981 0%, #059669 100%);">
          ✅ בצע ייבוא מאקסל
        </button>
        <button type="button" class="button button-secondary" onclick="google.script.host.close()">
          ❌ ביטול
        </button>
      </div>

      <!-- אזור הודעות ותוצאות -->
      <div id="loading" class="loading">
        <div class="spinner" style="border-top: 4px solid #10b981;"></div>
        <p><strong>מעבד נתונים...</strong><br>המערכת מנתחת את נתוני האקסל ומבצעת ייבוא</p>
      </div>
      
      <div id="statusMessage" class="status-message"></div>
    </div>
  </div>

  ${getImportDialogScript()}
</body>
</html>`;
}

/**
 * יצירת HTML לרשימת לקוחות
 * @param {Array} data - נתוני הלקוחות ממאסטר
 * @returns {string} HTML של רשימת הלקוחות
 */
function createClientsListHtml(data) {
  let html = `
    <div style="font-family: Arial, sans-serif; direction: rtl; padding: 20px;">
      <h3 style="color: #1e40af;">רשימת כל הלקוחות</h3>
      <table style="width: 100%; border-collapse: collapse;">
        <thead>
          <tr style="background: #f3f4f6;">
            <th style="padding: 8px; border: 1px solid #ddd; text-align: right;">שם לקוח</th>
            <th style="padding: 8px; border: 1px solid #ddd; text-align: right;">מספר תיק</th>
            <th style="padding: 8px; border: 1px solid #ddd; text-align: right;">סוג</th>
            <th style="padding: 8px; border: 1px solid #ddd; text-align: right;">שעות נותרות</th>
            <th style="padding: 8px; border: 1px solid #ddd; text-align: right;">סטטוס</th>
          </tr>
        </thead>
        <tbody>
  `;
  
  for (let i = 3; i < data.length; i++) {
    if (data[i][0]) {
      const hoursRemaining = data[i][7] || 0;
      const isBlocked = data[i][5] === 'hours' && hoursRemaining <= 0;
      const isWarning = data[i][5] === 'hours' && hoursRemaining <= 5 && hoursRemaining > 0;
      
      let bgColor = 'white';
      let status = 'רגיל';
      
      if (isBlocked) {
        bgColor = '#fee2e2';
        status = '🚫 חסום';
      } else if (isWarning) {
        bgColor = '#fef3c7';
        status = '⚠️ קריטי';
      }
      
      html += `
        <tr style="background: ${bgColor};">
          <td style="padding: 8px; border: 1px solid #ddd;">${data[i][3]}</td>
          <td style="padding: 8px; border: 1px solid #ddd;">${data[i][2]}</td>
          <td style="padding: 8px; border: 1px solid #ddd;">${data[i][5] === 'hours' ? 'שעות' : 'פיקס'}</td>
          <td style="padding: 8px; border: 1px solid #ddd;">${data[i][5] === 'hours' ? hoursRemaining : '-'}</td>
          <td style="padding: 8px; border: 1px solid #ddd;">${status}</td>
        </tr>
      `;
    }
  }
  
  html += `
        </tbody>
      </table>
      <button onclick="google.script.host.close()" style="margin-top: 20px; background: #6b7280; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer;">
        סגור
      </button>
    </div>
  `;
  
  return html;
}

// ===== Styles ו-Scripts =====

/**
 * CSS משותף לכל הדיאלוגים
 * @returns {string} קוד CSS מלא
 */
function getCommonStyles() {
  return `<style>
    body { 
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      margin: 0;
      padding: 20px;
      background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
      direction: rtl;
    }
    .container { 
      max-width: 850px;
      margin: 0 auto;
      background: white;
      border-radius: 20px;
      box-shadow: 0 15px 40px rgba(0,0,0,0.12);
      overflow: hidden;
    }
    .header {
      background: linear-gradient(135deg, #1e40af 0%, #1e3a8a 100%);
      color: white;
      padding: 30px;
      text-align: center;
    }
    .header h2 { 
      margin: 0 0 10px 0;
      font-size: 28px;
    }
    .header p {
      margin: 0;
      opacity: 0.9;
      font-size: 16px;
    }
    .content { 
      padding: 30px;
    }
    .section {
      background: #f8fafc;
      border: 2px solid #e2e8f0;
      border-radius: 15px;
      padding: 25px;
      margin-bottom: 25px;
    }
    .section h3 {
      color: #1e40af;
      margin: 0 0 20px 0;
      font-size: 20px;
      display: flex;
      align-items: center;
      gap: 10px;
    }
    .form-row {
      display: flex;
      gap: 20px;
      margin-bottom: 15px;
    }
    .form-group {
      flex: 1;
    }
    label {
      display: block;
      font-weight: 600;
      margin-bottom: 8px;
      color: #374151;
    }
    input, select, textarea {
      width: 100%;
      padding: 12px 15px;
      border: 2px solid #e5e7eb;
      border-radius: 8px;
      font-size: 14px;
      box-sizing: border-box;
      transition: all 0.3s ease;
    }
    input:focus, select:focus, textarea:focus {
      outline: none;
      border-color: #1e40af;
      box-shadow: 0 0 0 3px rgba(30, 64, 175, 0.1);
    }
    textarea {
      height: 200px;
      resize: vertical;
      font-family: 'Courier New', monospace;
      font-size: 13px;
      line-height: 1.4;
    }
    .button {
      background: linear-gradient(135deg, #1e40af 0%, #1e3a8a 100%);
      color: white;
      border: none;
      padding: 15px 30px;
      border-radius: 10px;
      font-size: 16px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      margin: 5px;
    }
    .button:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 20px rgba(30, 64, 175, 0.3);
    }
    .button:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none;
    }
    .button-secondary {
      background: linear-gradient(135deg, #6b7280 0%, #4b5563 100%);
    }
    .button-check {
      background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
    }
    .client-type-options {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 15px;
      margin-top: 10px;
    }
    .client-type-option {
      position: relative;
    }
    .client-type-radio {
      display: none;
    }
    .client-type-label {
      display: block;
      padding: 15px 20px;
      border: 2px solid #e5e7eb;
      border-radius: 12px;
      text-align: center;
      font-weight: 600;
      font-size: 14px;
      cursor: pointer;
      transition: all 0.3s ease;
      background: white;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
    }
    .client-type-radio:checked + .client-type-label {
      border-color: #1e40af;
      background: linear-gradient(135deg, #dbeafe 0%, #bfdbfe 100%);
      color: #1e40af;
    }
    .hours-section {
      background: #fffbeb;
      border: 2px solid #f59e0b;
      border-radius: 10px;
      padding: 20px;
      margin-top: 15px;
    }
    .stages-info {
      background: #e0f2fe;
      border: 2px solid #0ea5e9;
      border-radius: 10px;
      padding: 20px;
      margin-top: 15px;
    }
    .stages-info h4 {
      color: #0c4a6e;
      margin: 0 0 15px 0;
      font-size: 16px;
    }
    .stages-list {
      color: #0e7490;
      font-size: 14px;
      line-height: 1.6;
    }
    .example {
      background: #ecfdf5;
      border: 2px solid #10b981;
      border-radius: 10px;
      padding: 15px;
      margin: 15px 0;
      font-family: 'Courier New', monospace;
      font-size: 12px;
      line-height: 1.5;
      white-space: pre-line;
    }
    .success {
      background: #d1fae5;
      border: 2px solid #10b981;
      color: #065f46;
      padding: 15px;
      border-radius: 10px;
      margin: 15px 0;
    }
    .error {
      background: #fee2e2;
      border: 2px solid #ef4444;
      color: #991b1b;
      padding: 15px;
      border-radius: 10px;
      margin: 15px 0;
    }
    .warning {
      background: #fef3c7;
      border: 2px solid #f59e0b;
      color: #92400e;
      padding: 15px;
      border-radius: 10px;
      margin: 15px 0;
    }
    .status-message {
      display: none;
      margin: 20px 0;
      padding: 15px;
      border-radius: 10px;
      font-weight: 600;
    }
    .status-success { background: #d1fae5; border: 2px solid #10b981; color: #065f46; }
    .status-error { background: #fee2e2; border: 2px solid #ef4444; color: #991b1b; }
    .status-info { background: #dbeafe; border: 2px solid #3b82f6; color: #1e40af; }
    .loading {
      display: none;
      text-align: center;
      padding: 30px;
      background: #f8fafc;
      border-radius: 10px;
      margin: 20px 0;
    }
    .spinner {
      width: 40px;
      height: 40px;
      border: 4px solid #e5e7eb;
      border-top: 4px solid #1e40af;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin: 0 auto 15px;
    }
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    .buttons-row {
      display: flex;
      justify-content: center;
      gap: 15px;
      margin-top: 30px;
      padding-top: 20px;
      border-top: 2px solid #e5e7eb;
    }
    .hidden { display: none !important; }
    .validation-error {
      color: #ef4444;
      font-size: 12px;
      margin-top: 5px;
      display: none;
    }
    .client-exists {
      background: #fef3c7;
      border: 2px solid #f59e0b;
      border-radius: 10px;
      padding: 20px;
      margin: 15px 0;
    }
    .client-details {
      background: white;
      padding: 15px;
      border-radius: 8px;
      margin: 10px 0;
      border-right: 4px solid #f59e0b;
    }
  </style>`;
}

/**
 * JavaScript לדיאלוג הוספת לקוח
 * @returns {string} קוד JavaScript מלא
 */
function getClientDialogScript() {
  return `<script>
    // אתחול הדף
    window.onload = function() {
      updateClientTypeDisplay();
      setupEventListeners();
      document.getElementById('clientFullName').focus();
    };

    // הגדרת Event Listeners
    function setupEventListeners() {
      // שינוי סוג לקוח
      document.querySelectorAll('input[name="clientType"]').forEach(radio => {
        radio.addEventListener('change', updateClientTypeDisplay);
      });

      // וולידציה בזמן אמת
      document.getElementById('clientFullName').addEventListener('blur', validateName);
      document.getElementById('clientFileNumber').addEventListener('blur', validateFileNumber);
      document.getElementById('hoursAmount').addEventListener('blur', validateHours);

      // שליחת הטופס
      document.getElementById('addClientForm').addEventListener('submit', function(e) {
        e.preventDefault();
        createNewClient();
      });
    }

    // עדכון תצוגה לפי סוג לקוח
    function updateClientTypeDisplay() {
      const hoursSelected = document.getElementById('typeHours').checked;
      const hoursSection = document.getElementById('hoursSection');
      const stagesSection = document.getElementById('stagesSection');
      
      if (hoursSelected) {
        hoursSection.classList.remove('hidden');
        stagesSection.classList.add('hidden');
        document.getElementById('hoursAmount').required = true;
      } else {
        hoursSection.classList.add('hidden');
        stagesSection.classList.remove('hidden');
        document.getElementById('hoursAmount').required = false;
      }
    }

    // וולידציות
    function validateName() {
      const name = document.getElementById('clientFullName').value.trim();
      
      if (name.length < 2) {
        showFieldError('nameError', 'שם קצר מדי');
        return false;
      }
      
      hideFieldError('nameError');
      return true;
    }

    function validateFileNumber() {
      const fileNumber = document.getElementById('clientFileNumber').value.trim();
      
      if (fileNumber) {
        // בדיקה מול השרת
        google.script.run
          .withSuccessHandler(function(exists) {
            if (exists) {
              showFieldError('fileNumberError', 'מספר תיק כבר קיים במערכת');
            } else {
              hideFieldError('fileNumberError');
            }
          })
          .checkFileNumberExists(fileNumber);
      }
    }

    function validateHours() {
      const hours = document.getElementById('hoursAmount').value;
      const isHours = document.getElementById('typeHours').checked;
      
      if (isHours && (hours < 1 || hours > 500)) {
        showFieldError('hoursError', 'מספר שעות חייב להיות בין 1 ל-500');
        return false;
      }
      
      hideFieldError('hoursError');
      return true;
    }

    function showFieldError(fieldId, message) {
      const errorDiv = document.getElementById(fieldId);
      errorDiv.textContent = message;
      errorDiv.style.display = 'block';
    }

    function hideFieldError(fieldId) {
      document.getElementById(fieldId).style.display = 'none';
    }

    // יצירת לקוח חדש
    function createNewClient() {
      // וולידציה מלאה
      if (!validateName() || !validateHours()) {
        showMessage('אנא תקן את השגיאות בטופס', 'error');
        return;
      }

      const clientData = {
        fullName: document.getElementById('clientFullName').value.trim(),
        description: document.getElementById('clientDescription').value.trim(),
        fileNumber: document.getElementById('clientFileNumber').value.trim(),
        type: document.querySelector('input[name="clientType"]:checked').value,
        totalHours: document.getElementById('typeHours').checked ? 
                   parseInt(document.getElementById('hoursAmount').value) : 0
      };

      // בדיקות סופיות
      if (!clientData.fullName || !clientData.fileNumber) {
        showMessage('אנא מלא את כל השדות הנדרשים', 'error');
        return;
      }

      if (clientData.type === 'hours' && clientData.totalHours <= 0) {
        showMessage('אנא הזן מספר שעות תקין', 'error');
        return;
      }

      showLoading(true);
      showMessage('יוצר לקוח חדש...', 'info');

      google.script.run
        .withSuccessHandler(handleCreateResult)
        .withFailureHandler(handleError)
        .createNewClientFromDialog(clientData);
    }

    // טיפול בתוצאות
    function handleCreateResult(result) {
      showLoading(false);
      
      if (result.success) {
        showMessage(result.message, 'success');
        
        // הצעה לפתוח את הגליון החדש
        setTimeout(() => {
          if (confirm('לקוח נוצר בהצלחה!\\n\\nהאם תרצה לפתוח את הגליון הנוכחי של הלקוח?')) {
            window.open(result.clientSheetUrl, '_blank');
          }
          
          if (confirm('האם תרצה ליצור לקוח נוסף?')) {
            resetForm();
          } else {
            google.script.host.close();
          }
        }, 2000);
      } else {
        showMessage(result.message, 'error');
      }
    }

    function handleError(error) {
      showLoading(false);
      showMessage('שגיאה טכנית: ' + error.toString(), 'error');
    }

    // איפוס טופס
    function resetForm() {
      document.getElementById('addClientForm').reset();
      document.getElementById('typeHours').checked = true;
      updateClientTypeDisplay();
      document.getElementById('clientFullName').focus();
      
      // הסתר הודעות שגיאה
      document.querySelectorAll('.validation-error').forEach(el => el.style.display = 'none');
      document.getElementById('statusMessage').style.display = 'none';
    }

    // הצגת הודעות
    function showMessage(message, type) {
      const messageDiv = document.getElementById('statusMessage');
      messageDiv.innerHTML = message.replace(/\\n/g, '<br>');
      messageDiv.className = 'status-message status-' + type;
      messageDiv.style.display = 'block';
      
      if (type === 'success') {
        setTimeout(() => {
          messageDiv.style.display = 'none';
        }, 5000);
      }
    }

    // הצגת טעינה
    function showLoading(show) {
      document.getElementById('loading').style.display = show ? 'block' : 'none';
      document.getElementById('createClientBtn').disabled = show;
    }
  </script>`;
}

/**
 * JavaScript לדיאלוג ייבוא מאקסל
 * @returns {string} קוד JavaScript מלא
 */
function getImportDialogScript() {
  return `<script>
    var existingClientData = null;

    // בדיקת לקוח קיים
    function checkExistingClient() {
      const fullName = document.getElementById('clientFullName').value.trim();
      const fileNumber = document.getElementById('clientFileNumber').value.trim();
      
      if (!fullName || !fileNumber) {
        showMessage('אנא הזן שם מלא ומספר תיק', 'error');
        return;
      }
      
      showLoading(true);
      showMessage('בודק אם לקוח קיים במערכת...', 'info');
      
      google.script.run
        .withSuccessHandler(handleClientCheckResult)
        .withFailureHandler(handleError)
        .checkIfClientExists(fileNumber, fullName);
    }

    // טיפול בתוצאת בדיקת לקוח
    function handleClientCheckResult(result) {
      showLoading(false);
      
      const resultDiv = document.getElementById('clientCheckResult');
      
      if (result.exists) {
        existingClientData = result.clientData;
        
        resultDiv.innerHTML = \`
          <div class="client-exists">
            <h4>⚠️ לקוח קיים במערכת!</h4>
            <div class="client-details">
              <strong>שם:</strong> \${result.clientData.fullName}<br>
              <strong>מספר תיק:</strong> \${result.clientData.fileNumber}<br>
              <strong>סוג:</strong> \${result.clientData.type}<br>
              <strong>שעות נותרות:</strong> \${result.clientData.hoursRemaining || 0}
            </div>
            <p><strong>הנתונים מהאקסל יתווספו לגליון הקיים של הלקוח.</strong></p>
          </div>
        \`;
        
        showMessage('לקוח קיים - הנתונים יתווספו לגליון הקיים', 'info');
      } else {
        resultDiv.innerHTML = \`
          <div class="success">
            <h4>✅ לקוח חדש</h4>
            <p>הלקוח לא קיים במערכת. יווצר לקוח חדש עם גליון אישי.</p>
          </div>
        \`;
        
        showMessage('לקוח חדש - יווצר גליון חדש', 'success');
      }
      
      resultDiv.style.display = 'block';
    }

    // ביצוע ייבוא מאקסל
    function processExcelImport() {
      const fullName = document.getElementById('clientFullName').value.trim();
      const fileNumber = document.getElementById('clientFileNumber').value.trim();
      const clientType = document.getElementById('clientType').value;
      const clientHours = document.getElementById('clientHours').value;
      const excelData = document.getElementById('excelData').value.trim();
      
      // וולידציה
      if (!fullName || !fileNumber || !clientType || !excelData) {
        showMessage('אנא מלא את כל השדות הנדרשים', 'error');
        return;
      }
      
      if (clientType === 'hours' && (!clientHours || clientHours <= 0)) {
        showMessage('עבור תוכנית שעות יש להזין מספר שעות תקין', 'error');
        return;
      }
      
      showLoading(true);
      showMessage('מבצע ייבוא מאקסל... המערכת מעבדת את הנתונים', 'info');
      
      const importData = {
        clientInfo: {
          fullName: fullName,
          fileNumber: fileNumber,
          type: clientType,
          totalHours: parseInt(clientHours) || 0
        },
        excelData: excelData,
        existingClient: existingClientData
      };
      
      google.script.run
        .withSuccessHandler(handleImportResult)
        .withFailureHandler(handleError)
        .processExcelImport(importData);
    }

    // טיפול בתוצאת ייבוא
    function handleImportResult(result) {
      showLoading(false);
      
      if (result.success) {
        showMessage(result.message, 'success');
        
        // נקה טופס אחרי ייבוא מוצלח
        setTimeout(() => {
          if (confirm('ייבוא הושלם בהצלחה!\\n\\nהאם תרצה לייבא לקוח נוסף?')) {
            resetImportForm();
          } else {
            google.script.host.close();
          }
        }, 2000);
      } else {
        showMessage(result.message, 'error');
      }
    }

    // איפוס טופס ייבוא
    function resetImportForm() {
      document.getElementById('clientFullName').value = '';
      document.getElementById('clientFileNumber').value = '';
      document.getElementById('clientType').selectedIndex = 0;
      document.getElementById('clientHours').value = '';
      document.getElementById('excelData').value = '';
      document.getElementById('clientCheckResult').style.display = 'none';
      existingClientData = null;
    }

    // טיפול בשגיאות
    function handleError(error) {
      showLoading(false);
      showMessage('שגיאה טכנית: ' + error.toString(), 'error');
    }

    // הצגת הודעות
    function showMessage(message, type) {
      const messageDiv = document.getElementById('statusMessage');
      messageDiv.innerHTML = message.replace(/\\n/g, '<br>');
      messageDiv.className = 'status-message status-' + type;
      messageDiv.style.display = 'block';
      
      // הסתר הודעות אוטומטית
      if (type === 'success' || type === 'info') {
        setTimeout(() => {
          messageDiv.style.display = 'none';
        }, type === 'success' ? 5000 : 3000);
      }
    }

    // הצגת טעינה
    function showLoading(show) {
      document.getElementById('loading').style.display = show ? 'block' : 'none';
      
      // השבת/הפעל כפתורים
      const buttons = document.querySelectorAll('.button');
      buttons.forEach(btn => btn.disabled = show);
    }

    // אוטו-פוקוס
    window.onload = () => {
      document.getElementById('clientFullName').focus();
    };
  </script>`;
}

// ===== פונקציות עזר UI =====

/**
 * חישוב סטטיסטיקות גליון נוכחי
 * @param {GoogleAppsScript.Spreadsheet.Sheet} sheet - הגליון לניתוח
 * @param {Object} clientData - נתוני הלקוח
 * @returns {Object} אובייקט הסטטיסטיקות
 */
function calculateCurrentSheetStats(sheet, clientData) {
  const lastRow = getLastDataRowClient(sheet);
  let totalMinutes = 0;
  let bonusMinutes = 0;
  let entries = 0;
  let bonusEntries = 0;
  
  for (let row = CONFIG.AUTO_CALC.FIRST_DATA_ROW; row <= lastRow; row++) {
    const minutes = sheet.getRange(row, CONFIG.AUTO_CALC.MINUTES_COL).getValue();
    const notes = sheet.getRange(row, CONFIG.AUTO_CALC.NOTES_COL).getValue();
    
    if (isValidNumber(minutes)) {
      const isBonus = isRowBonus(notes, minutes);
      if (isBonus) {
        bonusMinutes += Number(minutes);
        bonusEntries++;
      } else {
        totalMinutes += Number(minutes);
      }
      entries++;
    }
  }
  
  const totalHours = Math.round((totalMinutes / 60) * 100) / 100;
  const bonusHours = Math.round((bonusMinutes / 60) * 100) / 100;
  const remainingMinutes = clientData.type === 'hours' ? Math.max(0, (clientData.totalHours * 60) - totalMinutes) : 0;
  const remainingHours = Math.round((remainingMinutes / 60) * 100) / 100;
  
  return {
    totalMinutes,
    bonusMinutes,
    entries,
    bonusEntries,
    totalHours,
    bonusHours,
    remainingMinutes,
    remainingHours
  };
}

/**
 * פורמט הודעת סטטיסטיקות
 * @param {Object} stats - נתוני הסטטיסטיקות
 * @param {Object} clientData - נתוני הלקוח
 * @returns {string} הודעה מפורמטת
 */
function formatStatsMessage(stats, clientData) {
  let message = `📊 סטטיסטיקות הגליון\n\n`;
  message += `מס' תיק: ${clientData.fileNumber}\n`;
  message += `סוג לקוח: ${clientData.type === 'hours' ? 'תוכנית שעות' : 'פיקס'}\n\n`;
  message += `📈 נתוני עבודה:\n`;
  message += `• סה"כ רשומות: ${stats.entries}\n`;
  message += `• שעות מחויבות: ${stats.totalHours}\n`;
  message += `• שעות בונוס: ${stats.bonusHours}\n`;
  message += `• רשומות בונוס: ${stats.bonusEntries}\n\n`;
  
  if (clientData.type === 'hours') {
    message += `💰 מצב תקציב:\n`;
    message += `• תקציב כולל: ${clientData.totalHours} שעות\n`;
    message += `• שעות נותרות: ${stats.remainingHours}\n`;
    message += `• אחוז ניצול: ${Math.round((stats.totalHours / clientData.totalHours) * 100)}%\n`;
    
    if (stats.remainingHours <= 0) {
      message += `• 🚫 סטטוס: חרג מתקציב!\n`;
    } else if (stats.remainingHours <= 5) {
      message += `• ⚠️ סטטוס: קריטי - נותרו מעט שעות\n`;
    } else {
      message += `• ✅ סטטוס: תקין\n`;
    }
  }
  
  return message;
}

/**
 * חישוב מחדש כל הלקוחות עם דיווח התקדמות
 * @returns {Object} תוצאת החישוב עם הודעה
 */
function recalculateAllClientsWithProgress() {
  const masterSheet = setupMasterClients();
  const data = masterSheet.getDataRange().getValues();
  let processed = 0;
  let errors = 0;
  
  for (let i = 3; i < data.length; i++) {
    if (data[i][0] && data[i][11]) { // יש ID ו-URL
      try {
        const clientSheetUrl = data[i][11];
        const clientName = data[i][3];
        
        Logger.log(`מעבד לקוח: ${clientName}`);
        
        const clientSpreadsheet = SpreadsheetApp.openByUrl(clientSheetUrl);
        const clientSheet = clientSpreadsheet.getSheetByName('פעולות');
        
        if (clientSheet) {
          recalculateClientSheet(clientSpreadsheet.getId());
          processed++;
        }
        
      } catch (error) {
        Logger.log(`❌ שגיאה בלקוח ${data[i][3]}: ${error.toString()}`);
        errors++;
      }
    }
  }
  
  const message = `חישוב מחדש הושלם!\n\nעובדו: ${processed} לקוחות\nשגיאות: ${errors}`;
  
  return {
    success: true,
    processed: processed,
    errors: errors,
    message: message
  };
}

/**
 * מיון תאריכים לכל הלקוחות עם דיווח התקדמות
 * @returns {Object} תוצאת המיון עם הודעה
 */
function sortAllClientsByDateWithProgress() {
  const masterSheet = setupMasterClients();
  const data = masterSheet.getDataRange().getValues();
  let processed = 0;
  let errors = 0;
  
  for (let i = 3; i < data.length; i++) {
    if (data[i][0] && data[i][11]) {
      try {
        const clientSheetUrl = data[i][11];
        const clientName = data[i][3];
        
        Logger.log(`ממיין לקוח: ${clientName}`);
        
        const clientSpreadsheet = SpreadsheetApp.openByUrl(clientSheetUrl);
        const clientSheet = clientSpreadsheet.getSheetByName('פעולות');
        
        if (clientSheet) {
          sortClientSheetByDate(clientSheet);
          processed++;
        }
        
      } catch (error) {
        Logger.log(`❌ שגיאה בלקוח ${data[i][3]}: ${error.toString()}`);
        errors++;
      }
    }
  }
  
  const message = `מיון תאריכים הושלם!\n\nעובדו: ${processed} לקוחות\nשגיאות: ${errors}`;
  
  return {
    success: true,
    processed: processed,
    errors: errors,
    message: message
  };
}

/**
 * בדיקה האם תאריך תקין
 * @param {*} date - התאריך לבדיקה
 * @returns {boolean} האם התאריך תקין
 */
function isValidDate(date) {
  return date instanceof Date && !isNaN(date.getTime());
}