/**
 * בדיקת עומס מרובה משתמשים
 * מדמה 10 עובדים מוסיפים זמן לאותה משימה בו-זמנית
 *
 * שימוש:
 * 1. עדכן את taskId למשימה אמיתית במערכת
 * 2. הרץ: node test-concurrent-users.js
 */

const { initializeApp } = require('firebase/app');
const { getFunctions, httpsCallable } = require('firebase/functions');
const { getAuth, signInWithEmailAndPassword } = require('firebase/auth');

// Firebase Configuration
const firebaseConfig = {
  apiKey: "AIzaSyAlVbkAEBklF6lnxI_LsSg8ZXGlp0pgeMw",
  authDomain: "law-office-system-e4801.firebaseapp.com",
  projectId: "law-office-system-e4801",
};

const app = initializeApp(firebaseConfig);
const functions = getFunctions(app);
const auth = getAuth(app);

// רשימת עובדים לבדיקה (צריך להתאים למשתמשים האמיתיים שלך)
const testUsers = [
  { email: 'haim@ghlawoffice.co.il', password: 'your-password' },
  // הוסף עוד משתמשים לבדיקה
];

async function testConcurrentAccess() {
  console.log('🚀 התחלת בדיקת עומס - 10 משתמשים בו-זמנית');
  console.log('================================================\n');

  // 🔴 עדכן את זה למשימה אמיתית במערכת שלך!
  const taskId = 'YOUR_TASK_ID_HERE';

  try {
    // שלב 1: התחבר כמשתמש הראשון
    console.log('📝 מתחבר כמשתמש...');
    await signInWithEmailAndPassword(auth, testUsers[0].email, testUsers[0].password);
    console.log('✅ התחברות הצליחה\n');

    // שלב 2: יצירת 10 קריאות במקביל
    console.log('⏱️  מדמה 10 עובדים מוסיפים זמן בו-זמנית...\n');

    const addTimeToTask = httpsCallable(functions, 'addTimeToTask');

    const promises = [];
    const minutesPerUser = [60, 90, 120, 45, 30, 75, 150, 100, 80, 50];

    for (let i = 0; i < 10; i++) {
      const timeData = {
        taskId: taskId,
        minutes: minutesPerUser[i],
        description: `בדיקה מעובד ${i + 1}`,
        date: new Date().toISOString().split('T')[0]
      };

      promises.push(
        addTimeToTask(timeData)
          .then(() => {
            console.log(`✅ עובד ${i + 1}: הוסיף ${minutesPerUser[i]} דקות`);
            return minutesPerUser[i];
          })
          .catch(error => {
            console.error(`❌ עובד ${i + 1}: שגיאה - ${error.message}`);
            return 0;
          })
      );
    }

    // המתן לכל הקריאות
    const results = await Promise.all(promises);

    // חשב תוצאה צפויה
    const totalExpected = results.reduce((sum, minutes) => sum + minutes, 0);

    console.log('\n================================================');
    console.log('📊 תוצאות:');
    console.log(`   סה"כ דקות צפוי: ${totalExpected}`);
    console.log(`   ${results.filter(r => r > 0).length}/${10} קריאות הצליחו`);
    console.log('================================================\n');

    console.log('🔍 כעת בדוק במערכת:');
    console.log(`   1. פתח את המשימה: ${taskId}`);
    console.log(`   2. בדוק ש-actualMinutes = ${totalExpected}`);
    console.log(`   3. בדוק שיש 10 רשומות ב-timeEntries`);
    console.log(`   4. בדוק שיש 10 רשומות בשעתון עם autoGenerated: true\n`);

  } catch (error) {
    console.error('❌ הבדיקה נכשלה:', error.message);
    console.error('Stack:', error.stack);
  }
}

// הרץ את הבדיקה
testConcurrentAccess()
  .then(() => {
    console.log('✅ בדיקה הסתיימה');
    process.exit(0);
  })
  .catch(error => {
    console.error('❌ שגיאה:', error);
    process.exit(1);
  });
