/**
 * Admin Dashboard - מערכת ניהול מלאה
 * משרד עו"ד - דשבורד מנהלים מתקדם
 */

// Global Variables
let db;
let employeesData = [];
let clientsData = [];
let activityData = [];
let currentUser = null;

// Firebase Configuration (מתוך HTML)
const firebaseConfig = {
  apiKey: "AIzaSyAlVbkAEBklF6lnxI_LsSg8ZXGlp0pgeMw",
  authDomain: "law-office-system-e4801.firebaseapp.com",
  projectId: "law-office-system-e4801",
  storageBucket: "law-office-system-e4801.firebasestorage.app",
  messagingSenderId: "199682320505",
  appId: "1:199682320505:web:8e4f5e34653476479b4ca8",
};

// Initialize Firebase
try {
  firebase.initializeApp(firebaseConfig);
  db = firebase.firestore();
  console.log("Firebase מחובר בהצלחה לדשבורד מנהלים");
} catch (error) {
  console.error("שגיאה בחיבור Firebase:", error);
}

/**
 * Authentication & Authorization
 */
function checkAdminAccess() {
  const urlParams = new URLSearchParams(window.location.search);
  const user = urlParams.get("user") || urlParams.get("emp");

  if (user !== "מנהל מערכת" && user !== "גיא") {
    document.body.innerHTML = `
      <div class="min-h-screen bg-red-50 flex items-center justify-center">
        <div class="bg-white p-8 rounded-lg shadow-lg text-center">
          <h1 class="text-2xl font-bold text-red-600 mb-4">אין הרשאה</h1>
          <p class="text-gray-600 mb-4">אין לך הרשאה לגשת לדשבורד המנהלים</p>
          <a href="../index.html" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">חזור למערכת</a>
        </div>
      </div>
    `;
    return false;
  }

  currentUser = user;
  return true;
}

/**
 * Main Tab Management
 */
function showMainTab(tabName) {
  // Hide all tabs
  document.querySelectorAll(".tab-content").forEach((tab) => {
    tab.classList.add("hidden");
  });

  // Remove active class from all tab buttons
  document.querySelectorAll("[data-tab]").forEach((button) => {
    button.classList.remove("bg-blue-100", "dark:bg-blue-800");
    button.classList.add("bg-gray-100", "dark:bg-gray-800");
  });

  // Show selected tab
  const selectedTab = document.getElementById(tabName);
  if (selectedTab) {
    selectedTab.classList.remove("hidden");
  }

  // Activate selected tab button
  const selectedButton = document.querySelector(`[data-tab="${tabName}"]`);
  if (selectedButton) {
    selectedButton.classList.remove("bg-gray-100", "dark:bg-gray-800");
    selectedButton.classList.add("bg-blue-100", "dark:bg-blue-800");
  }

  // Load data for the selected tab
  switch (tabName) {
    case "employees":
      loadEmployeesData();
      break;
    case "clients":
      loadClientsData();
      break;
    case "userManagement":
      loadUserManagement();
      break;
    case "activity":
      loadActivityFeed();
      break;
  }
}

/**
 * Data Loading Functions
 */
async function loadEmployeesData() {
  try {
    showLoading("טוען נתוני עובדים...");

    // Get all employees from different collections
    const [budgetTasks, timesheetEntries] = await Promise.all([
      db.collection("budget_tasks").get(),
      db.collection("timesheet_entries").get(),
    ]);

    const employeeStats = {};

    // Process budget tasks
    budgetTasks.forEach((doc) => {
      const data = doc.data();
      const emp = data.employee || "לא ידוע";
      if (!employeeStats[emp]) {
        employeeStats[emp] = {
          name: emp,
          totalTasks: 0,
          completedTasks: 0,
          totalHours: 0,
          lastActivity: null,
        };
      }
      employeeStats[emp].totalTasks++;
      if (data.status === "הושלם") {
        employeeStats[emp].completedTasks++;
      }
      employeeStats[emp].totalHours += (data.actualMinutes || 0) / 60;
    });

    // Process timesheet entries
    timesheetEntries.forEach((doc) => {
      const data = doc.data();
      const emp = data.employee || data.lawyer || "לא ידוע";
      if (!employeeStats[emp]) {
        employeeStats[emp] = {
          name: emp,
          totalTasks: 0,
          completedTasks: 0,
          totalHours: 0,
          lastActivity: null,
        };
      }
      employeeStats[emp].totalHours += (data.minutes || 0) / 60;

      // Update last activity
      const entryDate = new Date(data.date || data.createdAt?.toDate?.());
      if (
        !employeeStats[emp].lastActivity ||
        entryDate > employeeStats[emp].lastActivity
      ) {
        employeeStats[emp].lastActivity = entryDate;
      }
    });

    employeesData = Object.values(employeeStats);
    renderEmployeesTable();
    updateEmployeesStats();

    hideLoading();
  } catch (error) {
    console.error("שגיאה בטעינת נתוני עובדים:", error);
    hideLoading();
    renderEmployeesTable(); // הוסף את השורה הזאת
  }
}

async function loadClientsData() {
  try {
    showLoading("טוען נתוני לקוחות...");

    const [clients, timesheetEntries] = await Promise.all([
      db.collection("clients").get(),
      db.collection("timesheet_entries").get(),
    ]);

    const clientsWithStats = [];

    clients.forEach((doc) => {
      const clientData = { id: doc.id, ...doc.data() };

      // Calculate actual hours used
      let totalMinutesUsed = 0;
      timesheetEntries.forEach((entry) => {
        const entryData = entry.data();
        if (entryData.clientName === clientData.fullName) {
          totalMinutesUsed += entryData.minutes || 0;
        }
      });

      clientData.hoursUsed = totalMinutesUsed / 60;
      clientData.hoursRemaining =
        (clientData.totalHours || 0) - clientData.hoursUsed;
      clientData.utilizationPercent =
        clientData.totalHours > 0
          ? (clientData.hoursUsed / clientData.totalHours) * 100
          : 0;

      clientsWithStats.push(clientData);
    });

    clientsData = clientsWithStats;
    renderClientsTable();
    updateClientsStats();

    hideLoading();
  } catch (error) {
    console.error("שגיאה בטעינת נתוני לקוחות:", error);
    hideLoading();
    renderClientsTable(); // הוסף את השורה הזאת
  }
}

async function loadActivityFeed() {
  try {
    showLoading("טוען פעילות מערכת...");

    const [timesheetEntries, budgetTasks] = await Promise.all([
      db
        .collection("timesheet_entries")
        .orderBy("createdAt", "desc")
        .limit(20)
        .get(),
      db
        .collection("budget_tasks")
        .orderBy("updatedAt", "desc")
        .limit(20)
        .get(),
    ]);

    const activities = [];

    // Process user logs
    userLogs.forEach((doc) => {
      const data = doc.data();
      activities.push({
        type: "login",
        user: data.employee,
        action: "התחבר למערכת",
        timestamp: data.timestamp?.toDate() || new Date(),
        details: `${data.userAgent?.slice(0, 50)}...`,
      });
    });

    // Process timesheet entries
    timesheetEntries.forEach((doc) => {
      const data = doc.data();
      activities.push({
        type: "timesheet",
        user: data.employee || data.lawyer,
        action: "רישום שעות",
        timestamp: data.createdAt?.toDate() || new Date(data.date),
        details: `${data.minutes} דקות - ${data.clientName}`,
      });
    });

    // Process budget tasks
    budgetTasks.forEach((doc) => {
      const data = doc.data();
      activities.push({
        type: "task",
        user: data.employee,
        action: data.status === "הושלם" ? "השלמת משימה" : "עדכון משימה",
        timestamp:
          data.updatedAt?.toDate() || data.createdAt?.toDate() || new Date(),
        details: data.description,
      });
    });

    // Sort by timestamp
    activities.sort((a, b) => b.timestamp - a.timestamp);
    activityData = activities.slice(0, 100);

    renderActivityFeed();
    hideLoading();
  } catch (error) {
    console.error("שגיאה בטעינת פעילות:", error);
    hideLoading();
  }
}

/**
 * Rendering Functions
 */
function renderEmployeesTable() {
  alert("renderEmployeesTable נקרא!"); // שורת debug זמנית
  const container = document.getElementById("employee-list");
  if (!container) return;

  const html = employeesData
    .map(
      (emp) => `
    <div class="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm border border-gray-200 dark:border-gray-700">
      <div class="flex justify-between items-start">
        <div>
          <h3 class="text-lg font-semibold text-gray-900 dark:text-white">${
            emp.name
          }</h3>
          <div class="mt-2 space-y-1">
            <p class="text-sm text-gray-600 dark:text-gray-400">משימות: ${
              emp.totalTasks
            } (${emp.completedTasks} הושלמו)</p>
            <p class="text-sm text-gray-600 dark:text-gray-400">שעות: ${emp.totalHours.toFixed(
              1
            )}</p>
            <p class="text-sm text-gray-600 dark:text-gray-400">פעילות אחרונה: ${
              emp.lastActivity ? formatDate(emp.lastActivity) : "לא ידוע"
            }</p>
          </div>
        </div>
        <div class="flex gap-2">
          <button onclick="viewEmployeeDetails('${
            emp.name
          }')" class="bg-blue-500 text-white px-3 py-1 rounded text-sm hover:bg-blue-600">
            פרטים
          </button>
          <button onclick="editEmployee('${
            emp.name
          }')" class="bg-green-500 text-white px-3 py-1 rounded text-sm hover:bg-green-600">
            עריכה
          </button>
        </div>
      </div>
    </div>
  `
    )
    .join("");

  container.innerHTML = html;
}

function renderClientsTable() {
  alert("renderClientsTable נקרא!"); // שורת debug זמנית
  const container = document.getElementById("client-list");
  if (!container) return;

  const html = clientsData
    .map(
      (client) => `
    <div class="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm border border-gray-200 dark:border-gray-700">
      <div class="flex justify-between items-start">
        <div class="flex-1">
          <h3 class="text-lg font-semibold text-gray-900 dark:text-white">${
            client.fullName
          }</h3>
          <p class="text-sm text-gray-600 dark:text-gray-400 mb-2">תיק: ${
            client.fileNumber
          }</p>
          <div class="grid grid-cols-2 gap-4">
            <div>
              <p class="text-sm text-gray-600 dark:text-gray-400">שעות מוקצות: ${
                client.totalHours || 0
              }</p>
              <p class="text-sm text-gray-600 dark:text-gray-400">שעות בשימוש: ${client.hoursUsed.toFixed(
                1
              )}</p>
              <p class="text-sm text-gray-600 dark:text-gray-400">שעות נותרות: ${client.hoursRemaining.toFixed(
                1
              )}</p>
            </div>
            <div>
              <p class="text-sm text-gray-600 dark:text-gray-400">ניצול: ${client.utilizationPercent.toFixed(
                1
              )}%</p>
              <p class="text-sm text-gray-600 dark:text-gray-400">סוג: ${
                client.type
              }</p>
              <p class="text-sm ${
                client.hoursRemaining <= 0 ? "text-red-600" : "text-green-600"
              }">
                ${client.hoursRemaining <= 0 ? "חסום" : "פעיל"}
              </p>
            </div>
          </div>
        </div>
        <div class="flex gap-2">
          <button onclick="viewClientDetails('${
            client.id
          }')" class="bg-blue-500 text-white px-3 py-1 rounded text-sm hover:bg-blue-600">
            פרטים
          </button>
          <button onclick="editClient('${
            client.id
          }')" class="bg-green-500 text-white px-3 py-1 rounded text-sm hover:bg-green-600">
            עריכה
          </button>
        </div>
      </div>
    </div>
  `
    )
    .join("");

  container.innerHTML = html;
}

function renderActivityFeed() {
  const container = document.getElementById("activity-list");
  if (!container) return;

  const html = activityData
    .map(
      (activity) => `
    <div class="bg-white dark:bg-gray-800 rounded-lg p-4 shadow-sm border border-gray-200 dark:border-gray-700">
      <div class="flex items-start justify-between">
        <div class="flex-1">
          <div class="flex items-center gap-2 mb-1">
            <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getActivityTypeClass(
              activity.type
            )}">
              ${getActivityTypeLabel(activity.type)}
            </span>
            <span class="text-sm font-medium text-gray-900 dark:text-white">${
              activity.user
            }</span>
          </div>
          <p class="text-sm text-gray-600 dark:text-gray-400">${
            activity.action
          }</p>
          <p class="text-xs text-gray-500 dark:text-gray-500 mt-1">${
            activity.details
          }</p>
        </div>
        <div class="text-xs text-gray-500 dark:text-gray-500">
          ${formatDateTime(activity.timestamp)}
        </div>
      </div>
    </div>
  `
    )
    .join("");

  container.innerHTML = html;
}

/**
 * Statistics Updates
 */
function updateEmployeesStats() {
  const totalUsers = document.getElementById("total-users");
  const onlineUsers = document.getElementById("online-users");

  if (totalUsers) totalUsers.textContent = employeesData.length;
  if (onlineUsers) {
    // מספר המשתמשים שהיו פעילים ב-24 השעות האחרונות
    const activeCount = employeesData.filter(
      (emp) =>
        emp.lastActivity && new Date() - emp.lastActivity < 24 * 60 * 60 * 1000
    ).length;
    onlineUsers.textContent = activeCount;
  }
}

function updateClientsStats() {
  const activeClients = document.getElementById("active-clients");
  const completedTasks = document.getElementById("completed-tasks");

  if (activeClients) {
    const activeCount = clientsData.filter(
      (client) => client.hoursRemaining > 0
    ).length;
    activeClients.textContent = activeCount;
  }

  if (completedTasks) {
    const totalTasks = employeesData.reduce(
      (sum, emp) => sum + emp.totalTasks,
      0
    );
    const completed = employeesData.reduce(
      (sum, emp) => sum + emp.completedTasks,
      0
    );
    completedTasks.textContent = completed;

    const progress = document.getElementById("completion-progress");
    if (progress) {
      const percentage = totalTasks > 0 ? (completed / totalTasks) * 100 : 0;
      progress.style.width = `${percentage}%`;
    }
  }
}

/**
 * Utility Functions
 */
function showLoading(message = "טוען...") {
  const overlay = document.getElementById("loadingOverlay");
  if (overlay) {
    overlay.querySelector("div div").textContent = message;
    overlay.classList.remove("hidden");
  }
}

function hideLoading() {
  const overlay = document.getElementById("loadingOverlay");
  if (overlay) {
    overlay.classList.add("hidden");
  }
}

function formatDate(date) {
  if (!date) return "לא ידוע";
  return new Date(date).toLocaleDateString("he-IL");
}

function formatDateTime(date) {
  if (!date) return "לא ידוע";
  return new Date(date).toLocaleString("he-IL");
}

function getActivityTypeClass(type) {
  switch (type) {
    case "login":
      return "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300";
    case "timesheet":
      return "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300";
    case "task":
      return "bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300";
    default:
      return "bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300";
  }
}

function getActivityTypeLabel(type) {
  switch (type) {
    case "login":
      return "כניסה";
    case "timesheet":
      return "שעתון";
    case "task":
      return "משימה";
    default:
      return "פעילות";
  }
}

function showNotifications() {
  alert("מערכת הודעות בפיתוח...");
}

// Placeholder functions for detailed views
function viewEmployeeDetails(employeeName) {
  alert(`פרטי העובד ${employeeName} - בפיתוח`);
}

function editEmployee(employeeName) {
  alert(`עריכת עובד ${employeeName} - בפיתוח`);
}

function viewClientDetails(clientId) {
  alert(`פרטי לקוח ${clientId} - בפיתוח`);
}

function editClient(clientId) {
  alert(`עריכת לקוח ${clientId} - בפיתוח`);
}

/**
 * Initialize Dashboard
 */
document.addEventListener("DOMContentLoaded", function () {
  if (!checkAdminAccess()) {
    return;
  }

  console.log("דשבורד מנהלים נטען בהצלחה");

  // Load initial data
  showMainTab("employees");

  // Update statistics every 5 minutes
  setInterval(() => {
    loadEmployeesData();
    loadClientsData();
    loadActivityFeed();
  }, 5 * 60 * 1000);
});
/**
 * תכונות ניהול מתקדמות - הוספה לadmin.js
 * פונקציות ניהול מלא של המערכת
 */

// הוספת משתנים גלובליים חדשים
let usersPermissions = {};
let blockedClients = [];
let systemReports = [];

/**
 * ניהול הרשאות משתמשים
 */

// חסימת/הפעלת משתמש
async function toggleUserAccess(userName, isBlocked) {
  try {
    const userPermissionRef = db.collection("user_permissions").doc(userName);

    await userPermissionRef.set(
      {
        userName: userName,
        isBlocked: isBlocked,
        blockedAt: isBlocked
          ? firebase.firestore.FieldValue.serverTimestamp()
          : null,
        blockedBy: currentUser,
        lastUpdated: firebase.firestore.FieldValue.serverTimestamp(),
      },
      { merge: true }
    );

    const status = isBlocked ? "נחסם" : "הופעל";
    showNotification(`המשתמש ${userName} ${status} בהצלחה`, "success");

    // רענן את רשימת העובדים
    loadEmployeesData();

    return true;
  } catch (error) {
    console.error("שגיאה בעדכון הרשאות משתמש:", error);
    showNotification("שגיאה בעדכון הרשאות", "error");
    return false;
  }
}

// בדיקת הרשאות משתמש
async function checkUserPermissions() {
  try {
    const permissionsSnapshot = await db.collection("user_permissions").get();
    usersPermissions = {};

    permissionsSnapshot.forEach((doc) => {
      usersPermissions[doc.id] = doc.data();
    });

    return usersPermissions;
  } catch (error) {
    console.error("שגיאה בטעינת הרשאות:", error);
    return {};
  }
}

/**
 * ניהול לקוחות מתקדם
 */

// חסימת/הפעלת לקוח
async function toggleClientStatus(clientId, isBlocked) {
  try {
    const clientRef = db.collection("clients").doc(clientId);

    await clientRef.update({
      isBlocked: isBlocked,
      blockedAt: isBlocked
        ? firebase.firestore.FieldValue.serverTimestamp()
        : null,
      blockedBy: currentUser,
      lastUpdated: firebase.firestore.FieldValue.serverTimestamp(),
    });

    const status = isBlocked ? "נחסם" : "הופעל";
    showNotification(`הלקוח ${status} בהצלחה`, "success");

    loadClientsData();
    return true;
  } catch (error) {
    console.error("שגיאה בעדכון סטטוס לקוח:", error);
    showNotification("שגיאה בעדכון סטטוס לקוח", "error");
    return false;
  }
}

// עריכת לקוח מתקדמת
async function advancedEditClient(clientId) {
  const client = clientsData.find((c) => c.id === clientId);
  if (!client) {
    showNotification("לקוח לא נמצא", "error");
    return;
  }

  const modal = createEditClientModal(client);
  document.body.appendChild(modal);
}

function createEditClientModal(client) {
  const modal = document.createElement("div");
  modal.className =
    "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50";
  modal.innerHTML = `
    <div class="bg-white dark:bg-gray-800 rounded-lg p-6 max-w-md w-full mx-4">
      <h3 class="text-lg font-semibold mb-4 text-gray-900 dark:text-white">עריכת לקוח: ${
        client.fullName
      }</h3>
      
      <div class="space-y-4">
        <div>
          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">שם מלא</label>
          <input id="editClientName" type="text" value="${
            client.fullName
          }" class="w-full border rounded-lg px-3 py-2 dark:bg-gray-700 dark:border-gray-600 dark:text-white">
        </div>
        
        <div>
          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">מספר תיק</label>
          <input id="editFileNumber" type="text" value="${
            client.fileNumber
          }" class="w-full border rounded-lg px-3 py-2 dark:bg-gray-700 dark:border-gray-600 dark:text-white">
        </div>
        
        <div>
          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">סה"כ שעות</label>
          <input id="editTotalHours" type="number" value="${
            client.totalHours || 0
          }" class="w-full border rounded-lg px-3 py-2 dark:bg-gray-700 dark:border-gray-600 dark:text-white">
        </div>
        
        <div>
          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">סוג תקצוב</label>
          <select id="editClientType" class="w-full border rounded-lg px-3 py-2 dark:bg-gray-700 dark:border-gray-600 dark:text-white">
            <option value="hours" ${
              client.type === "hours" ? "selected" : ""
            }>שעות</option>
            <option value="fixed" ${
              client.type === "fixed" ? "selected" : ""
            }>קבוע</option>
          </select>
        </div>
        
        <div class="flex items-center">
          <input id="editClientBlocked" type="checkbox" ${
            client.isBlocked ? "checked" : ""
          } class="mr-2">
          <label class="text-sm text-gray-700 dark:text-gray-300">לקוח חסום</label>
        </div>
      </div>
      
      <div class="flex gap-2 mt-6">
        <button onclick="saveClientEdit('${
          client.id
        }')" class="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600">
          שמור
        </button>
        <button onclick="closeModal()" class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600">
          ביטול
        </button>
      </div>
    </div>
  `;

  return modal;
}

async function saveClientEdit(clientId) {
  try {
    const clientRef = db.collection("clients").doc(clientId);

    const updatedData = {
      fullName: document.getElementById("editClientName").value,
      fileNumber: document.getElementById("editFileNumber").value,
      totalHours:
        parseInt(document.getElementById("editTotalHours").value) || 0,
      type: document.getElementById("editClientType").value,
      isBlocked: document.getElementById("editClientBlocked").checked,
      lastUpdated: firebase.firestore.FieldValue.serverTimestamp(),
      lastModifiedBy: currentUser,
    };

    await clientRef.update(updatedData);

    showNotification("לקוח עודכן בהצלחה", "success");
    closeModal();
    loadClientsData();
  } catch (error) {
    console.error("שגיאה בעדכון לקוח:", error);
    showNotification("שגיאה בעדכון לקוח", "error");
  }
}

/**
 * ניהול משימות מתקדם
 */

// יצירת משימה למשתמש אחר
async function createTaskForUser(employeeName, taskData) {
  try {
    const newTask = {
      ...taskData,
      employee: employeeName,
      createdBy: currentUser,
      createdAt: firebase.firestore.FieldValue.serverTimestamp(),
      updatedAt: firebase.firestore.FieldValue.serverTimestamp(),
      status: "פעיל",
      actualMinutes: 0,
      history: [],
    };

    const docRef = await db.collection("budget_tasks").add(newTask);

    showNotification(`משימה נוצרה עבור ${employeeName}`, "success");
    logSystemAction(
      "create_task",
      `משימה נוצרה עבור ${employeeName}: ${taskData.description}`
    );

    return docRef.id;
  } catch (error) {
    console.error("שגיאה ביצירת משימה:", error);
    showNotification("שגיאה ביצירת משימה", "error");
    return null;
  }
}

// העברת משימה בין עובדים
async function transferTask(taskId, fromEmployee, toEmployee) {
  try {
    const taskRef = db.collection("budget_tasks").doc(taskId);

    await taskRef.update({
      employee: toEmployee,
      transferredFrom: fromEmployee,
      transferredAt: firebase.firestore.FieldValue.serverTimestamp(),
      transferredBy: currentUser,
      updatedAt: firebase.firestore.FieldValue.serverTimestamp(),
    });

    showNotification(`משימה הועברה מ${fromEmployee} ל${toEmployee}`, "success");
    logSystemAction(
      "transfer_task",
      `משימה הועברה מ${fromEmployee} ל${toEmployee}`
    );

    loadEmployeesData();
    return true;
  } catch (error) {
    console.error("שגיאה בהעברת משימה:", error);
    showNotification("שגיאה בהעברת משימה", "error");
    return false;
  }
}

/**
 * דוחות מתקדמים
 */

// יצירת דוח שעות עובד
async function generateEmployeeReport(employeeName, startDate, endDate) {
  try {
    showLoading("מכין דוח עובד...");

    const [timesheetEntries, budgetTasks] = await Promise.all([
      db
        .collection("timesheet_entries")
        .where("employee", "==", employeeName)
        .where("date", ">=", startDate)
        .where("date", "<=", endDate)
        .get(),
      db.collection("budget_tasks").where("employee", "==", employeeName).get(),
    ]);

    const report = {
      employeeName,
      period: { startDate, endDate },
      totalHours: 0,
      totalMinutes: 0,
      clientsWorkedOn: [],
      tasksCompleted: 0,
      entries: [],
    };

    const clientsMap = {};

    timesheetEntries.forEach((doc) => {
      const entry = doc.data();
      report.totalMinutes += entry.minutes || 0;
      report.entries.push(entry);

      if (!clientsMap[entry.clientName]) {
        clientsMap[entry.clientName] = 0;
      }
      clientsMap[entry.clientName] += entry.minutes || 0;
    });

    budgetTasks.forEach((doc) => {
      const task = doc.data();
      if (task.status === "הושלם") {
        report.tasksCompleted++;
      }
    });

    report.totalHours = report.totalMinutes / 60;
    report.clientsWorkedOn = Object.entries(clientsMap).map(
      ([name, minutes]) => ({
        name,
        minutes,
        hours: minutes / 60,
      })
    );

    hideLoading();
    displayEmployeeReport(report);

    return report;
  } catch (error) {
    console.error("שגיאה ביצירת דוח עובד:", error);
    hideLoading();
    showNotification("שגיאה ביצירת דוח", "error");
    return null;
  }
}

// יצירת דוח לקוח מפורט
async function generateClientReport(clientName) {
  try {
    showLoading("מכין דוח לקוח...");

    const [clientDoc, timesheetEntries, budgetTasks] = await Promise.all([
      db.collection("clients").where("fullName", "==", clientName).get(),
      db
        .collection("timesheet_entries")
        .where("clientName", "==", clientName)
        .get(),
      db.collection("budget_tasks").where("clientName", "==", clientName).get(),
    ]);

    if (clientDoc.empty) {
      throw new Error("לקוח לא נמצא");
    }

    const client = clientDoc.docs[0].data();
    const report = {
      clientName,
      client,
      totalAllocatedHours: client.totalHours || 0,
      totalUsedHours: 0,
      totalUsedMinutes: 0,
      remainingHours: 0,
      utilizationPercent: 0,
      employeesWorked: [],
      entries: [],
      tasks: [],
    };

    const employeesMap = {};

    timesheetEntries.forEach((doc) => {
      const entry = doc.data();
      report.totalUsedMinutes += entry.minutes || 0;
      report.entries.push(entry);

      const emp = entry.employee || entry.lawyer;
      if (!employeesMap[emp]) {
        employeesMap[emp] = 0;
      }
      employeesMap[emp] += entry.minutes || 0;
    });

    budgetTasks.forEach((doc) => {
      const task = doc.data();
      report.tasks.push(task);
    });

    report.totalUsedHours = report.totalUsedMinutes / 60;
    report.remainingHours = report.totalAllocatedHours - report.totalUsedHours;
    report.utilizationPercent =
      report.totalAllocatedHours > 0
        ? (report.totalUsedHours / report.totalAllocatedHours) * 100
        : 0;

    report.employeesWorked = Object.entries(employeesMap).map(
      ([name, minutes]) => ({
        name,
        minutes,
        hours: minutes / 60,
      })
    );

    hideLoading();
    displayClientReport(report);

    return report;
  } catch (error) {
    console.error("שגיאה ביצירת דוח לקוח:", error);
    hideLoading();
    showNotification("שגיאה ביצירת דוח", "error");
    return null;
  }
}

// דוח מערכת כללי
async function generateSystemReport() {
  try {
    showLoading("מכין דוח מערכת...");

    const [clients, employees, timesheet, tasks, userLogs] = await Promise.all([
      db.collection("clients").get(),
      checkUserPermissions(),
      db.collection("timesheet_entries").get(),
      db.collection("budget_tasks").get(),
    ]);

    const report = {
      generatedAt: new Date(),
      totalClients: clients.size,
      activeClients: 0,
      blockedClients: 0,
      totalEmployees: Object.keys(employees).length,
      blockedEmployees: 0,
      totalTimesheetEntries: timesheet.size,
      totalTasks: tasks.size,
      completedTasks: 0,
      totalHoursLogged: 0,
      recentActivity: [],
    };

    // עיבוד נתוני לקוחות
    clients.forEach((doc) => {
      const client = doc.data();
      if (client.isBlocked) {
        report.blockedClients++;
      } else {
        report.activeClients++;
      }
    });

    // עיבוד נתוני עובדים
    Object.values(employees).forEach((emp) => {
      if (emp.isBlocked) {
        report.blockedEmployees++;
      }
    });

    // עיבוד נתוני שעתון
    timesheet.forEach((doc) => {
      const entry = doc.data();
      report.totalHoursLogged += (entry.minutes || 0) / 60;
    });

    // עיבוד נתוני משימות
    tasks.forEach((doc) => {
      const task = doc.data();
      if (task.status === "הושלם") {
        report.completedTasks++;
      }
    });

    // פעילות אחרונה
    userLogs.forEach((doc) => {
      const log = doc.data();
      report.recentActivity.push({
        user: log.employee,
        action: log.action,
        timestamp: log.timestamp?.toDate() || new Date(),
      });
    });

    hideLoading();
    displaySystemReport(report);

    return report;
  } catch (error) {
    console.error("שגיאה ביצירת דוח מערכת:", error);
    hideLoading();
    showNotification("שגיאה ביצירת דוח מערכת", "error");
    return null;
  }
}

/**
 * פונקציות תצוגה לדוחות
 */

function displayEmployeeReport(report) {
  const modal = document.createElement("div");
  modal.className =
    "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 overflow-y-auto";
  modal.innerHTML = `
    <div class="bg-white dark:bg-gray-800 rounded-lg p-6 max-w-4xl w-full mx-4 my-4">
      <div class="flex justify-between items-center mb-4">
        <h3 class="text-xl font-bold text-gray-900 dark:text-white">דוח עובד: ${
          report.employeeName
        }</h3>
        <button onclick="closeModal()" class="text-gray-500 hover:text-gray-700">&times;</button>
      </div>
      
      <div class="grid grid-cols-2 gap-6 mb-6">
        <div class="bg-blue-50 dark:bg-blue-900 p-4 rounded-lg">
          <h4 class="font-semibold text-blue-800 dark:text-blue-200">סה"כ שעות</h4>
          <p class="text-2xl font-bold text-blue-600 dark:text-blue-400">${report.totalHours.toFixed(
            1
          )}</p>
        </div>
        <div class="bg-green-50 dark:bg-green-900 p-4 rounded-lg">
          <h4 class="font-semibold text-green-800 dark:text-green-200">משימות הושלמו</h4>
          <p class="text-2xl font-bold text-green-600 dark:text-green-400">${
            report.tasksCompleted
          }</p>
        </div>
      </div>
      
      <div class="mb-6">
        <h4 class="font-semibold mb-3 text-gray-900 dark:text-white">עבודה לפי לקוחות</h4>
        <div class="space-y-2">
          ${report.clientsWorkedOn
            .map(
              (client) => `
            <div class="flex justify-between bg-gray-50 dark:bg-gray-700 p-2 rounded">
              <span class="text-gray-700 dark:text-gray-300">${
                client.name
              }</span>
              <span class="font-semibold text-gray-900 dark:text-white">${client.hours.toFixed(
                1
              )} שעות</span>
            </div>
          `
            )
            .join("")}
        </div>
      </div>
      
      <div class="flex gap-2">
        <button onclick="exportReport('employee', '${
          report.employeeName
        }')" class="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600">
          ייצא לExcel
        </button>
        <button onclick="printReport()" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
          הדפס
        </button>
        <button onclick="closeModal()" class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600">
          סגור
        </button>
      </div>
    </div>
  `;

  document.body.appendChild(modal);
}

/**
 * פונקציות עזר
 */

function closeModal() {
  const modals = document.querySelectorAll(".fixed.inset-0");
  modals.forEach((modal) => modal.remove());
}

function showNotification(message, type = "info") {
  // יצירת התראה זמנית
  const notification = document.createElement("div");
  notification.className = `fixed top-4 right-4 p-4 rounded-lg z-50 ${
    type === "success"
      ? "bg-green-500"
      : type === "error"
      ? "bg-red-500"
      : "bg-blue-500"
  } text-white`;
  notification.textContent = message;

  document.body.appendChild(notification);

  setTimeout(() => {
    notification.remove();
  }, 3000);
}

async function logSystemAction(action, details) {
  try {
    await db.collection("system_logs").add({
      action,
      details,
      performedBy: currentUser,
      timestamp: firebase.firestore.FieldValue.serverTimestamp(),
    });
  } catch (error) {
    console.error("שגיאה ברישום פעולת מערכת:", error);
  }
}

// פונקציות placeholder לייצוא ודפוס
function exportReport(type, identifier) {
  showNotification("ייצוא דוח - תכונה בפיתוח", "info");
}

function printReport() {
  window.print();
}
<div class="flex gap-1">
  <button
    onclick="generateEmployeeReport('${emp.name}', '2025-01-01', '2025-12-31')"
    class="bg-blue-500 text-white px-2 py-1 rounded text-xs hover:bg-blue-600"
  >
    דוח
  </button>
  <button
    onclick="createTaskModal('${emp.name}')"
    class="bg-purple-500 text-white px-2 py-1 rounded text-xs hover:bg-purple-600"
  >
    משימה
  </button>
  <button
    onclick="toggleUserAccess('${emp.name}', true)"
    class="bg-red-500 text-white px-2 py-1 rounded text-xs hover:bg-red-600"
  >
    חסום
  </button>
</div>;

function renderEmployeesTable() {
  const container = document.getElementById("employee-list");
  if (!container || !employeesData.length) return;

  const html = employeesData
    .map(
      (emp) => `
    <div class="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm border border-gray-200 dark:border-gray-700">
      <div class="flex justify-between items-start">
        <div>
          <h3 class="text-lg font-semibold text-gray-900 dark:text-white">${
            emp.name
          }</h3>
          <div class="mt-2 space-y-1">
            <p class="text-sm text-gray-600 dark:text-gray-400">משימות: ${
              emp.totalTasks
            } (${emp.completedTasks} הושלמו)</p>
            <p class="text-sm text-gray-600 dark:text-gray-400">שעות: ${emp.totalHours.toFixed(
              1
            )}</p>
            <p class="text-sm text-gray-600 dark:text-gray-400">פעילות אחרונה: ${
              emp.lastActivity ? formatDate(emp.lastActivity) : "לא ידוע"
            }</p>
          </div>
        </div>
        <div class="flex gap-1">
          <button onclick="generateEmployeeReport('${
            emp.name
          }', '2025-01-01', '2025-12-31')" 
                  class="bg-blue-500 text-white px-2 py-1 rounded text-xs hover:bg-blue-600">דוח</button>
          <button onclick="alert('יצירת משימה - בפיתוח')" 
                  class="bg-purple-500 text-white px-2 py-1 rounded text-xs hover:bg-purple-600">משימה</button>
          <button onclick="toggleUserAccess('${emp.name}', true)" 
                  class="bg-red-500 text-white px-2 py-1 rounded text-xs hover:bg-red-600">חסום</button>
        </div>
      </div>
    </div>
  `
    )
    .join("");

  container.innerHTML = html;
}

function renderClientsTable() {
  const container = document.getElementById("client-list");
  if (!container || !clientsData.length) return;

  const html = clientsData
    .map(
      (client) => `
    <div class="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm border border-gray-200 dark:border-gray-700">
      <div class="flex justify-between items-start">
        <div class="flex-1">
          <h3 class="text-lg font-semibold text-gray-900 dark:text-white">${
            client.fullName || client.name
          }</h3>
          <p class="text-sm text-gray-600 dark:text-gray-400 mb-2">תיק: ${
            client.fileNumber || "לא צוין"
          }</p>
          <div class="grid grid-cols-2 gap-4">
            <div>
              <p class="text-sm text-gray-600 dark:text-gray-400">שעות מוקצות: ${
                client.totalHours || 0
              }</p>
              <p class="text-sm text-gray-600 dark:text-gray-400">שעות בשימוש: ${(
                client.hoursUsed || 0
              ).toFixed(1)}</p>
            </div>
            <div>
              <p class="text-sm text-gray-600 dark:text-gray-400">סוג: ${
                client.type || "לא צוין"
              }</p>
              <p class="text-sm ${
                client.isBlocked ? "text-red-600" : "text-green-600"
              }">
                ${client.isBlocked ? "חסום" : "פעיל"}
              </p>
            </div>
          </div>
        </div>
        <div class="flex gap-1">
          <button onclick="generateClientReport('${
            client.fullName || client.name
          }')" 
                  class="bg-blue-500 text-white px-2 py-1 rounded text-xs hover:bg-blue-600">דוח</button>
          <button onclick="advancedEditClient('${client.id}')" 
                  class="bg-green-500 text-white px-2 py-1 rounded text-xs hover:bg-green-600">עריכה</button>
          <button onclick="toggleClientStatus('${
            client.id
          }', ${!client.isBlocked})" 
                  class="bg-${
                    client.isBlocked ? "green" : "red"
                  }-500 text-white px-2 py-1 rounded text-xs">
            ${client.isBlocked ? "הפעל" : "חסום"}</button>
        </div>
      </div>
    </div>
  `
    )
    .join("");

  container.innerHTML = html;
}
setTimeout(() => {
  renderEmployeesTable();
  renderClientsTable();
}, 3000);

async function loadUserManagement() {
  try {
    showLoading("טוען נתוני משתמשים...");

    // Get all data
    const [budgetTasks, timesheetEntries] = await Promise.all([
      db.collection("budget_tasks").get(),
      db.collection("timesheet_entries").get(),
    ]);

    // Extract users from data
    const users = new Map();

    budgetTasks.forEach((doc) => {
      const data = doc.data();
      if (data.employee) {
        if (!users.has(data.employee)) {
          users.set(data.employee, { name: data.employee, tasks: 0, hours: 0 });
        }
        users.get(data.employee).tasks++;
      }
    });

    timesheetEntries.forEach((doc) => {
      const data = doc.data();
      if (data.employee) {
        if (!users.has(data.employee)) {
          users.set(data.employee, { name: data.employee, tasks: 0, hours: 0 });
        }
        users.get(data.employee).hours += data.minutes || 0;
      }
    });

    // Render users
    const content = document.getElementById("userManagementContent");
    const userList = Array.from(users.values());

    if (userList.length === 0) {
      content.innerHTML = `
        <div class="text-center py-8">
          <p class="text-gray-500">לא נמצאו משתמשים פעילים</p>
        </div>
      `;
    } else {
      content.innerHTML = `
        <div class="grid gap-4">
          ${userList
            .map(
              (user) => `
            <div class="bg-white dark:bg-gray-800 rounded-lg border p-6">
              <div class="flex items-center justify-between">
                <div>
                  <h3 class="font-semibold text-lg">${user.name}</h3>
                  <p class="text-sm text-gray-600 dark:text-gray-400">
                    ${user.tasks} משימות • ${Math.round(user.hours / 60)} שעות
                  </p>
                </div>
                <div class="flex space-x-2">
                  <button onclick="transferUserTasks('${
                    user.name
                  }')" class="px-3 py-1 bg-blue-500 text-white rounded text-sm hover:bg-blue-600">
                    העבר משימות
                  </button>
                  <button onclick="deleteUserRecords('${
                    user.name
                  }')" class="px-3 py-1 bg-red-500 text-white rounded text-sm hover:bg-red-600">
                    מחק רשומות
                  </button>
                </div>
              </div>
            </div>
          `
            )
            .join("")}
        </div>
      `;
    }

    hideLoading();
  } catch (error) {
    console.error("שגיאה בטעינת משתמשים:", error);
    hideLoading();
  }
}
